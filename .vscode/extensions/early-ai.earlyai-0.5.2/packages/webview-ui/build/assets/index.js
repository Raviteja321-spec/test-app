var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var require_assets = __commonJS({
  "assets/index.js"(exports, module) {
    (function polyfill() {
      const relList = document.createElement("link").relList;
      if (relList && relList.supports && relList.supports("modulepreload")) {
        return;
      }
      for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
        processPreload(link);
      }
      new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          if (mutation.type !== "childList") {
            continue;
          }
          for (const node of mutation.addedNodes) {
            if (node.tagName === "LINK" && node.rel === "modulepreload")
              processPreload(node);
          }
        }
      }).observe(document, { childList: true, subtree: true });
      function getFetchOpts(link) {
        const fetchOpts = {};
        if (link.integrity)
          fetchOpts.integrity = link.integrity;
        if (link.referrerPolicy)
          fetchOpts.referrerPolicy = link.referrerPolicy;
        if (link.crossOrigin === "use-credentials")
          fetchOpts.credentials = "include";
        else if (link.crossOrigin === "anonymous")
          fetchOpts.credentials = "omit";
        else
          fetchOpts.credentials = "same-origin";
        return fetchOpts;
      }
      function processPreload(link) {
        if (link.ep)
          return;
        link.ep = true;
        const fetchOpts = getFetchOpts(link);
        fetch(link.href, fetchOpts);
      }
    })();
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function getDefaultExportFromCjs(x2) {
      return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
    }
    var jsxRuntime = { exports: {} };
    var reactJsxRuntime_production_min = {};
    var react = { exports: {} };
    var react_production_min = {};
    /**
     * @license React
     * react.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var l$2 = Symbol.for("react.element"), n$2 = Symbol.for("react.portal"), p$3 = Symbol.for("react.fragment"), q$2 = Symbol.for("react.strict_mode"), r$2 = Symbol.for("react.profiler"), t$2 = Symbol.for("react.provider"), u = Symbol.for("react.context"), v$2 = Symbol.for("react.forward_ref"), w$1 = Symbol.for("react.suspense"), x$1 = Symbol.for("react.memo"), y$1 = Symbol.for("react.lazy"), z$3 = Symbol.iterator;
    function A$2(a) {
      if (null === a || "object" !== typeof a)
        return null;
      a = z$3 && a[z$3] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    var B$1 = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } }, C$1 = Object.assign, D$1 = {};
    function E$1(a, b2, e2) {
      this.props = a;
      this.context = b2;
      this.refs = D$1;
      this.updater = e2 || B$1;
    }
    E$1.prototype.isReactComponent = {};
    E$1.prototype.setState = function(a, b2) {
      if ("object" !== typeof a && "function" !== typeof a && null != a)
        throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
      this.updater.enqueueSetState(this, a, b2, "setState");
    };
    E$1.prototype.forceUpdate = function(a) {
      this.updater.enqueueForceUpdate(this, a, "forceUpdate");
    };
    function F() {
    }
    F.prototype = E$1.prototype;
    function G$1(a, b2, e2) {
      this.props = a;
      this.context = b2;
      this.refs = D$1;
      this.updater = e2 || B$1;
    }
    var H$1 = G$1.prototype = new F();
    H$1.constructor = G$1;
    C$1(H$1, E$1.prototype);
    H$1.isPureReactComponent = true;
    var I$1 = Array.isArray, J = Object.prototype.hasOwnProperty, K$1 = { current: null }, L$1 = { key: true, ref: true, __self: true, __source: true };
    function M$1(a, b2, e2) {
      var d2, c2 = {}, k2 = null, h2 = null;
      if (null != b2)
        for (d2 in void 0 !== b2.ref && (h2 = b2.ref), void 0 !== b2.key && (k2 = "" + b2.key), b2)
          J.call(b2, d2) && !L$1.hasOwnProperty(d2) && (c2[d2] = b2[d2]);
      var g2 = arguments.length - 2;
      if (1 === g2)
        c2.children = e2;
      else if (1 < g2) {
        for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++)
          f2[m2] = arguments[m2 + 2];
        c2.children = f2;
      }
      if (a && a.defaultProps)
        for (d2 in g2 = a.defaultProps, g2)
          void 0 === c2[d2] && (c2[d2] = g2[d2]);
      return { $$typeof: l$2, type: a, key: k2, ref: h2, props: c2, _owner: K$1.current };
    }
    function N$1(a, b2) {
      return { $$typeof: l$2, type: a.type, key: b2, ref: a.ref, props: a.props, _owner: a._owner };
    }
    function O$1(a) {
      return "object" === typeof a && null !== a && a.$$typeof === l$2;
    }
    function escape(a) {
      var b2 = { "=": "=0", ":": "=2" };
      return "$" + a.replace(/[=:]/g, function(a2) {
        return b2[a2];
      });
    }
    var P$1 = /\/+/g;
    function Q$1(a, b2) {
      return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b2.toString(36);
    }
    function R$1(a, b2, e2, d2, c2) {
      var k2 = typeof a;
      if ("undefined" === k2 || "boolean" === k2)
        a = null;
      var h2 = false;
      if (null === a)
        h2 = true;
      else
        switch (k2) {
          case "string":
          case "number":
            h2 = true;
            break;
          case "object":
            switch (a.$$typeof) {
              case l$2:
              case n$2:
                h2 = true;
            }
        }
      if (h2)
        return h2 = a, c2 = c2(h2), a = "" === d2 ? "." + Q$1(h2, 0) : d2, I$1(c2) ? (e2 = "", null != a && (e2 = a.replace(P$1, "$&/") + "/"), R$1(c2, b2, e2, "", function(a2) {
          return a2;
        })) : null != c2 && (O$1(c2) && (c2 = N$1(c2, e2 + (!c2.key || h2 && h2.key === c2.key ? "" : ("" + c2.key).replace(P$1, "$&/") + "/") + a)), b2.push(c2)), 1;
      h2 = 0;
      d2 = "" === d2 ? "." : d2 + ":";
      if (I$1(a))
        for (var g2 = 0; g2 < a.length; g2++) {
          k2 = a[g2];
          var f2 = d2 + Q$1(k2, g2);
          h2 += R$1(k2, b2, e2, f2, c2);
        }
      else if (f2 = A$2(a), "function" === typeof f2)
        for (a = f2.call(a), g2 = 0; !(k2 = a.next()).done; )
          k2 = k2.value, f2 = d2 + Q$1(k2, g2++), h2 += R$1(k2, b2, e2, f2, c2);
      else if ("object" === k2)
        throw b2 = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b2 ? "object with keys {" + Object.keys(a).join(", ") + "}" : b2) + "). If you meant to render a collection of children, use an array instead.");
      return h2;
    }
    function S$1(a, b2, e2) {
      if (null == a)
        return a;
      var d2 = [], c2 = 0;
      R$1(a, d2, "", "", function(a2) {
        return b2.call(e2, a2, c2++);
      });
      return d2;
    }
    function T$1(a) {
      if (-1 === a._status) {
        var b2 = a._result;
        b2 = b2();
        b2.then(function(b3) {
          if (0 === a._status || -1 === a._status)
            a._status = 1, a._result = b3;
        }, function(b3) {
          if (0 === a._status || -1 === a._status)
            a._status = 2, a._result = b3;
        });
        -1 === a._status && (a._status = 0, a._result = b2);
      }
      if (1 === a._status)
        return a._result.default;
      throw a._result;
    }
    var U$1 = { current: null }, V$1 = { transition: null }, W$1 = { ReactCurrentDispatcher: U$1, ReactCurrentBatchConfig: V$1, ReactCurrentOwner: K$1 };
    react_production_min.Children = { map: S$1, forEach: function(a, b2, e2) {
      S$1(a, function() {
        b2.apply(this, arguments);
      }, e2);
    }, count: function(a) {
      var b2 = 0;
      S$1(a, function() {
        b2++;
      });
      return b2;
    }, toArray: function(a) {
      return S$1(a, function(a2) {
        return a2;
      }) || [];
    }, only: function(a) {
      if (!O$1(a))
        throw Error("React.Children.only expected to receive a single React element child.");
      return a;
    } };
    react_production_min.Component = E$1;
    react_production_min.Fragment = p$3;
    react_production_min.Profiler = r$2;
    react_production_min.PureComponent = G$1;
    react_production_min.StrictMode = q$2;
    react_production_min.Suspense = w$1;
    react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$1;
    react_production_min.cloneElement = function(a, b2, e2) {
      if (null === a || void 0 === a)
        throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
      var d2 = C$1({}, a.props), c2 = a.key, k2 = a.ref, h2 = a._owner;
      if (null != b2) {
        void 0 !== b2.ref && (k2 = b2.ref, h2 = K$1.current);
        void 0 !== b2.key && (c2 = "" + b2.key);
        if (a.type && a.type.defaultProps)
          var g2 = a.type.defaultProps;
        for (f2 in b2)
          J.call(b2, f2) && !L$1.hasOwnProperty(f2) && (d2[f2] = void 0 === b2[f2] && void 0 !== g2 ? g2[f2] : b2[f2]);
      }
      var f2 = arguments.length - 2;
      if (1 === f2)
        d2.children = e2;
      else if (1 < f2) {
        g2 = Array(f2);
        for (var m2 = 0; m2 < f2; m2++)
          g2[m2] = arguments[m2 + 2];
        d2.children = g2;
      }
      return { $$typeof: l$2, type: a.type, key: c2, ref: k2, props: d2, _owner: h2 };
    };
    react_production_min.createContext = function(a) {
      a = { $$typeof: u, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
      a.Provider = { $$typeof: t$2, _context: a };
      return a.Consumer = a;
    };
    react_production_min.createElement = M$1;
    react_production_min.createFactory = function(a) {
      var b2 = M$1.bind(null, a);
      b2.type = a;
      return b2;
    };
    react_production_min.createRef = function() {
      return { current: null };
    };
    react_production_min.forwardRef = function(a) {
      return { $$typeof: v$2, render: a };
    };
    react_production_min.isValidElement = O$1;
    react_production_min.lazy = function(a) {
      return { $$typeof: y$1, _payload: { _status: -1, _result: a }, _init: T$1 };
    };
    react_production_min.memo = function(a, b2) {
      return { $$typeof: x$1, type: a, compare: void 0 === b2 ? null : b2 };
    };
    react_production_min.startTransition = function(a) {
      var b2 = V$1.transition;
      V$1.transition = {};
      try {
        a();
      } finally {
        V$1.transition = b2;
      }
    };
    react_production_min.unstable_act = function() {
      throw Error("act(...) is not supported in production builds of React.");
    };
    react_production_min.useCallback = function(a, b2) {
      return U$1.current.useCallback(a, b2);
    };
    react_production_min.useContext = function(a) {
      return U$1.current.useContext(a);
    };
    react_production_min.useDebugValue = function() {
    };
    react_production_min.useDeferredValue = function(a) {
      return U$1.current.useDeferredValue(a);
    };
    react_production_min.useEffect = function(a, b2) {
      return U$1.current.useEffect(a, b2);
    };
    react_production_min.useId = function() {
      return U$1.current.useId();
    };
    react_production_min.useImperativeHandle = function(a, b2, e2) {
      return U$1.current.useImperativeHandle(a, b2, e2);
    };
    react_production_min.useInsertionEffect = function(a, b2) {
      return U$1.current.useInsertionEffect(a, b2);
    };
    react_production_min.useLayoutEffect = function(a, b2) {
      return U$1.current.useLayoutEffect(a, b2);
    };
    react_production_min.useMemo = function(a, b2) {
      return U$1.current.useMemo(a, b2);
    };
    react_production_min.useReducer = function(a, b2, e2) {
      return U$1.current.useReducer(a, b2, e2);
    };
    react_production_min.useRef = function(a) {
      return U$1.current.useRef(a);
    };
    react_production_min.useState = function(a) {
      return U$1.current.useState(a);
    };
    react_production_min.useSyncExternalStore = function(a, b2, e2) {
      return U$1.current.useSyncExternalStore(a, b2, e2);
    };
    react_production_min.useTransition = function() {
      return U$1.current.useTransition();
    };
    react_production_min.version = "18.2.0";
    {
      react.exports = react_production_min;
    }
    var reactExports = react.exports;
    const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
    /**
     * @license React
     * react-jsx-runtime.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var f$1 = reactExports, k$1 = Symbol.for("react.element"), l$1 = Symbol.for("react.fragment"), m$2 = Object.prototype.hasOwnProperty, n$1 = f$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p$2 = { key: true, ref: true, __self: true, __source: true };
    function q$1(c2, a, g2) {
      var b2, d2 = {}, e2 = null, h2 = null;
      void 0 !== g2 && (e2 = "" + g2);
      void 0 !== a.key && (e2 = "" + a.key);
      void 0 !== a.ref && (h2 = a.ref);
      for (b2 in a)
        m$2.call(a, b2) && !p$2.hasOwnProperty(b2) && (d2[b2] = a[b2]);
      if (c2 && c2.defaultProps)
        for (b2 in a = c2.defaultProps, a)
          void 0 === d2[b2] && (d2[b2] = a[b2]);
      return { $$typeof: k$1, type: c2, key: e2, ref: h2, props: d2, _owner: n$1.current };
    }
    reactJsxRuntime_production_min.Fragment = l$1;
    reactJsxRuntime_production_min.jsx = q$1;
    reactJsxRuntime_production_min.jsxs = q$1;
    {
      jsxRuntime.exports = reactJsxRuntime_production_min;
    }
    var jsxRuntimeExports = jsxRuntime.exports;
    var reactDom = { exports: {} };
    var reactDom_production_min = {};
    var scheduler = { exports: {} };
    var scheduler_production_min = {};
    /**
     * @license React
     * scheduler.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function(exports2) {
      function f2(a, b2) {
        var c2 = a.length;
        a.push(b2);
        a:
          for (; 0 < c2; ) {
            var d2 = c2 - 1 >>> 1, e2 = a[d2];
            if (0 < g2(e2, b2))
              a[d2] = b2, a[c2] = e2, c2 = d2;
            else
              break a;
          }
      }
      function h2(a) {
        return 0 === a.length ? null : a[0];
      }
      function k2(a) {
        if (0 === a.length)
          return null;
        var b2 = a[0], c2 = a.pop();
        if (c2 !== b2) {
          a[0] = c2;
          a:
            for (var d2 = 0, e2 = a.length, w2 = e2 >>> 1; d2 < w2; ) {
              var m2 = 2 * (d2 + 1) - 1, C2 = a[m2], n2 = m2 + 1, x2 = a[n2];
              if (0 > g2(C2, c2))
                n2 < e2 && 0 > g2(x2, C2) ? (a[d2] = x2, a[n2] = c2, d2 = n2) : (a[d2] = C2, a[m2] = c2, d2 = m2);
              else if (n2 < e2 && 0 > g2(x2, c2))
                a[d2] = x2, a[n2] = c2, d2 = n2;
              else
                break a;
            }
        }
        return b2;
      }
      function g2(a, b2) {
        var c2 = a.sortIndex - b2.sortIndex;
        return 0 !== c2 ? c2 : a.id - b2.id;
      }
      if ("object" === typeof performance && "function" === typeof performance.now) {
        var l2 = performance;
        exports2.unstable_now = function() {
          return l2.now();
        };
      } else {
        var p2 = Date, q2 = p2.now();
        exports2.unstable_now = function() {
          return p2.now() - q2;
        };
      }
      var r2 = [], t2 = [], u2 = 1, v2 = null, y2 = 3, z2 = false, A2 = false, B2 = false, D2 = "function" === typeof setTimeout ? setTimeout : null, E2 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
      "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function G2(a) {
        for (var b2 = h2(t2); null !== b2; ) {
          if (null === b2.callback)
            k2(t2);
          else if (b2.startTime <= a)
            k2(t2), b2.sortIndex = b2.expirationTime, f2(r2, b2);
          else
            break;
          b2 = h2(t2);
        }
      }
      function H2(a) {
        B2 = false;
        G2(a);
        if (!A2)
          if (null !== h2(r2))
            A2 = true, I2(J2);
          else {
            var b2 = h2(t2);
            null !== b2 && K2(H2, b2.startTime - a);
          }
      }
      function J2(a, b2) {
        A2 = false;
        B2 && (B2 = false, E2(L2), L2 = -1);
        z2 = true;
        var c2 = y2;
        try {
          G2(b2);
          for (v2 = h2(r2); null !== v2 && (!(v2.expirationTime > b2) || a && !M2()); ) {
            var d2 = v2.callback;
            if ("function" === typeof d2) {
              v2.callback = null;
              y2 = v2.priorityLevel;
              var e2 = d2(v2.expirationTime <= b2);
              b2 = exports2.unstable_now();
              "function" === typeof e2 ? v2.callback = e2 : v2 === h2(r2) && k2(r2);
              G2(b2);
            } else
              k2(r2);
            v2 = h2(r2);
          }
          if (null !== v2)
            var w2 = true;
          else {
            var m2 = h2(t2);
            null !== m2 && K2(H2, m2.startTime - b2);
            w2 = false;
          }
          return w2;
        } finally {
          v2 = null, y2 = c2, z2 = false;
        }
      }
      var N2 = false, O2 = null, L2 = -1, P2 = 5, Q2 = -1;
      function M2() {
        return exports2.unstable_now() - Q2 < P2 ? false : true;
      }
      function R2() {
        if (null !== O2) {
          var a = exports2.unstable_now();
          Q2 = a;
          var b2 = true;
          try {
            b2 = O2(true, a);
          } finally {
            b2 ? S2() : (N2 = false, O2 = null);
          }
        } else
          N2 = false;
      }
      var S2;
      if ("function" === typeof F2)
        S2 = function() {
          F2(R2);
        };
      else if ("undefined" !== typeof MessageChannel) {
        var T2 = new MessageChannel(), U2 = T2.port2;
        T2.port1.onmessage = R2;
        S2 = function() {
          U2.postMessage(null);
        };
      } else
        S2 = function() {
          D2(R2, 0);
        };
      function I2(a) {
        O2 = a;
        N2 || (N2 = true, S2());
      }
      function K2(a, b2) {
        L2 = D2(function() {
          a(exports2.unstable_now());
        }, b2);
      }
      exports2.unstable_IdlePriority = 5;
      exports2.unstable_ImmediatePriority = 1;
      exports2.unstable_LowPriority = 4;
      exports2.unstable_NormalPriority = 3;
      exports2.unstable_Profiling = null;
      exports2.unstable_UserBlockingPriority = 2;
      exports2.unstable_cancelCallback = function(a) {
        a.callback = null;
      };
      exports2.unstable_continueExecution = function() {
        A2 || z2 || (A2 = true, I2(J2));
      };
      exports2.unstable_forceFrameRate = function(a) {
        0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a ? Math.floor(1e3 / a) : 5;
      };
      exports2.unstable_getCurrentPriorityLevel = function() {
        return y2;
      };
      exports2.unstable_getFirstCallbackNode = function() {
        return h2(r2);
      };
      exports2.unstable_next = function(a) {
        switch (y2) {
          case 1:
          case 2:
          case 3:
            var b2 = 3;
            break;
          default:
            b2 = y2;
        }
        var c2 = y2;
        y2 = b2;
        try {
          return a();
        } finally {
          y2 = c2;
        }
      };
      exports2.unstable_pauseExecution = function() {
      };
      exports2.unstable_requestPaint = function() {
      };
      exports2.unstable_runWithPriority = function(a, b2) {
        switch (a) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            a = 3;
        }
        var c2 = y2;
        y2 = a;
        try {
          return b2();
        } finally {
          y2 = c2;
        }
      };
      exports2.unstable_scheduleCallback = function(a, b2, c2) {
        var d2 = exports2.unstable_now();
        "object" === typeof c2 && null !== c2 ? (c2 = c2.delay, c2 = "number" === typeof c2 && 0 < c2 ? d2 + c2 : d2) : c2 = d2;
        switch (a) {
          case 1:
            var e2 = -1;
            break;
          case 2:
            e2 = 250;
            break;
          case 5:
            e2 = 1073741823;
            break;
          case 4:
            e2 = 1e4;
            break;
          default:
            e2 = 5e3;
        }
        e2 = c2 + e2;
        a = { id: u2++, callback: b2, priorityLevel: a, startTime: c2, expirationTime: e2, sortIndex: -1 };
        c2 > d2 ? (a.sortIndex = c2, f2(t2, a), null === h2(r2) && a === h2(t2) && (B2 ? (E2(L2), L2 = -1) : B2 = true, K2(H2, c2 - d2))) : (a.sortIndex = e2, f2(r2, a), A2 || z2 || (A2 = true, I2(J2)));
        return a;
      };
      exports2.unstable_shouldYield = M2;
      exports2.unstable_wrapCallback = function(a) {
        var b2 = y2;
        return function() {
          var c2 = y2;
          y2 = b2;
          try {
            return a.apply(this, arguments);
          } finally {
            y2 = c2;
          }
        };
      };
    })(scheduler_production_min);
    {
      scheduler.exports = scheduler_production_min;
    }
    var schedulerExports = scheduler.exports;
    /**
     * @license React
     * react-dom.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var aa = reactExports, ca = schedulerExports;
    function p$1(a) {
      for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c2 = 1; c2 < arguments.length; c2++)
        b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
      return "Minified React error #" + a + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var da = /* @__PURE__ */ new Set(), ea = {};
    function fa(a, b2) {
      ha(a, b2);
      ha(a + "Capture", b2);
    }
    function ha(a, b2) {
      ea[a] = b2;
      for (a = 0; a < b2.length; a++)
        da.add(b2[a]);
    }
    var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
    function oa(a) {
      if (ja.call(ma, a))
        return true;
      if (ja.call(la, a))
        return false;
      if (ka.test(a))
        return ma[a] = true;
      la[a] = true;
      return false;
    }
    function pa(a, b2, c2, d2) {
      if (null !== c2 && 0 === c2.type)
        return false;
      switch (typeof b2) {
        case "function":
        case "symbol":
          return true;
        case "boolean":
          if (d2)
            return false;
          if (null !== c2)
            return !c2.acceptsBooleans;
          a = a.toLowerCase().slice(0, 5);
          return "data-" !== a && "aria-" !== a;
        default:
          return false;
      }
    }
    function qa(a, b2, c2, d2) {
      if (null === b2 || "undefined" === typeof b2 || pa(a, b2, c2, d2))
        return true;
      if (d2)
        return false;
      if (null !== c2)
        switch (c2.type) {
          case 3:
            return !b2;
          case 4:
            return false === b2;
          case 5:
            return isNaN(b2);
          case 6:
            return isNaN(b2) || 1 > b2;
        }
      return false;
    }
    function v$1(a, b2, c2, d2, e2, f2, g2) {
      this.acceptsBooleans = 2 === b2 || 3 === b2 || 4 === b2;
      this.attributeName = d2;
      this.attributeNamespace = e2;
      this.mustUseProperty = c2;
      this.propertyName = a;
      this.type = b2;
      this.sanitizeURL = f2;
      this.removeEmptyString = g2;
    }
    var z$2 = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
      z$2[a] = new v$1(a, 0, false, a, null, false, false);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
      var b2 = a[0];
      z$2[b2] = new v$1(b2, 1, false, a[1], null, false, false);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
      z$2[a] = new v$1(a, 2, false, a.toLowerCase(), null, false, false);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
      z$2[a] = new v$1(a, 2, false, a, null, false, false);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
      z$2[a] = new v$1(a, 3, false, a.toLowerCase(), null, false, false);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(a) {
      z$2[a] = new v$1(a, 3, true, a, null, false, false);
    });
    ["capture", "download"].forEach(function(a) {
      z$2[a] = new v$1(a, 4, false, a, null, false, false);
    });
    ["cols", "rows", "size", "span"].forEach(function(a) {
      z$2[a] = new v$1(a, 6, false, a, null, false, false);
    });
    ["rowSpan", "start"].forEach(function(a) {
      z$2[a] = new v$1(a, 5, false, a.toLowerCase(), null, false, false);
    });
    var ra = /[\-:]([a-z])/g;
    function sa(a) {
      return a[1].toUpperCase();
    }
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
      var b2 = a.replace(
        ra,
        sa
      );
      z$2[b2] = new v$1(b2, 1, false, a, null, false, false);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
      var b2 = a.replace(ra, sa);
      z$2[b2] = new v$1(b2, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
      var b2 = a.replace(ra, sa);
      z$2[b2] = new v$1(b2, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
    });
    ["tabIndex", "crossOrigin"].forEach(function(a) {
      z$2[a] = new v$1(a, 1, false, a.toLowerCase(), null, false, false);
    });
    z$2.xlinkHref = new v$1("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    ["src", "href", "action", "formAction"].forEach(function(a) {
      z$2[a] = new v$1(a, 1, false, a.toLowerCase(), null, true, true);
    });
    function ta(a, b2, c2, d2) {
      var e2 = z$2.hasOwnProperty(b2) ? z$2[b2] : null;
      if (null !== e2 ? 0 !== e2.type : d2 || !(2 < b2.length) || "o" !== b2[0] && "O" !== b2[0] || "n" !== b2[1] && "N" !== b2[1])
        qa(b2, c2, e2, d2) && (c2 = null), d2 || null === e2 ? oa(b2) && (null === c2 ? a.removeAttribute(b2) : a.setAttribute(b2, "" + c2)) : e2.mustUseProperty ? a[e2.propertyName] = null === c2 ? 3 === e2.type ? false : "" : c2 : (b2 = e2.attributeName, d2 = e2.attributeNamespace, null === c2 ? a.removeAttribute(b2) : (e2 = e2.type, c2 = 3 === e2 || 4 === e2 && true === c2 ? "" : "" + c2, d2 ? a.setAttributeNS(d2, b2, c2) : a.setAttribute(b2, c2)));
    }
    var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
    var Ia = Symbol.for("react.offscreen");
    var Ja = Symbol.iterator;
    function Ka(a) {
      if (null === a || "object" !== typeof a)
        return null;
      a = Ja && a[Ja] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    var A$1 = Object.assign, La;
    function Ma(a) {
      if (void 0 === La)
        try {
          throw Error();
        } catch (c2) {
          var b2 = c2.stack.trim().match(/\n( *(at )?)/);
          La = b2 && b2[1] || "";
        }
      return "\n" + La + a;
    }
    var Na = false;
    function Oa(a, b2) {
      if (!a || Na)
        return "";
      Na = true;
      var c2 = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (b2)
          if (b2 = function() {
            throw Error();
          }, Object.defineProperty(b2.prototype, "props", { set: function() {
            throw Error();
          } }), "object" === typeof Reflect && Reflect.construct) {
            try {
              Reflect.construct(b2, []);
            } catch (l2) {
              var d2 = l2;
            }
            Reflect.construct(a, [], b2);
          } else {
            try {
              b2.call();
            } catch (l2) {
              d2 = l2;
            }
            a.call(b2.prototype);
          }
        else {
          try {
            throw Error();
          } catch (l2) {
            d2 = l2;
          }
          a();
        }
      } catch (l2) {
        if (l2 && d2 && "string" === typeof l2.stack) {
          for (var e2 = l2.stack.split("\n"), f2 = d2.stack.split("\n"), g2 = e2.length - 1, h2 = f2.length - 1; 1 <= g2 && 0 <= h2 && e2[g2] !== f2[h2]; )
            h2--;
          for (; 1 <= g2 && 0 <= h2; g2--, h2--)
            if (e2[g2] !== f2[h2]) {
              if (1 !== g2 || 1 !== h2) {
                do
                  if (g2--, h2--, 0 > h2 || e2[g2] !== f2[h2]) {
                    var k2 = "\n" + e2[g2].replace(" at new ", " at ");
                    a.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a.displayName));
                    return k2;
                  }
                while (1 <= g2 && 0 <= h2);
              }
              break;
            }
        }
      } finally {
        Na = false, Error.prepareStackTrace = c2;
      }
      return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
    }
    function Pa(a) {
      switch (a.tag) {
        case 5:
          return Ma(a.type);
        case 16:
          return Ma("Lazy");
        case 13:
          return Ma("Suspense");
        case 19:
          return Ma("SuspenseList");
        case 0:
        case 2:
        case 15:
          return a = Oa(a.type, false), a;
        case 11:
          return a = Oa(a.type.render, false), a;
        case 1:
          return a = Oa(a.type, true), a;
        default:
          return "";
      }
    }
    function Qa(a) {
      if (null == a)
        return null;
      if ("function" === typeof a)
        return a.displayName || a.name || null;
      if ("string" === typeof a)
        return a;
      switch (a) {
        case ya:
          return "Fragment";
        case wa:
          return "Portal";
        case Aa:
          return "Profiler";
        case za:
          return "StrictMode";
        case Ea:
          return "Suspense";
        case Fa:
          return "SuspenseList";
      }
      if ("object" === typeof a)
        switch (a.$$typeof) {
          case Ca:
            return (a.displayName || "Context") + ".Consumer";
          case Ba:
            return (a._context.displayName || "Context") + ".Provider";
          case Da:
            var b2 = a.render;
            a = a.displayName;
            a || (a = b2.displayName || b2.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
            return a;
          case Ga:
            return b2 = a.displayName || null, null !== b2 ? b2 : Qa(a.type) || "Memo";
          case Ha:
            b2 = a._payload;
            a = a._init;
            try {
              return Qa(a(b2));
            } catch (c2) {
            }
        }
      return null;
    }
    function Ra(a) {
      var b2 = a.type;
      switch (a.tag) {
        case 24:
          return "Cache";
        case 9:
          return (b2.displayName || "Context") + ".Consumer";
        case 10:
          return (b2._context.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return a = b2.render, a = a.displayName || a.name || "", b2.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 5:
          return b2;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return Qa(b2);
        case 8:
          return b2 === za ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if ("function" === typeof b2)
            return b2.displayName || b2.name || null;
          if ("string" === typeof b2)
            return b2;
      }
      return null;
    }
    function Sa(a) {
      switch (typeof a) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return a;
        case "object":
          return a;
        default:
          return "";
      }
    }
    function Ta(a) {
      var b2 = a.type;
      return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b2 || "radio" === b2);
    }
    function Ua(a) {
      var b2 = Ta(a) ? "checked" : "value", c2 = Object.getOwnPropertyDescriptor(a.constructor.prototype, b2), d2 = "" + a[b2];
      if (!a.hasOwnProperty(b2) && "undefined" !== typeof c2 && "function" === typeof c2.get && "function" === typeof c2.set) {
        var e2 = c2.get, f2 = c2.set;
        Object.defineProperty(a, b2, { configurable: true, get: function() {
          return e2.call(this);
        }, set: function(a2) {
          d2 = "" + a2;
          f2.call(this, a2);
        } });
        Object.defineProperty(a, b2, { enumerable: c2.enumerable });
        return { getValue: function() {
          return d2;
        }, setValue: function(a2) {
          d2 = "" + a2;
        }, stopTracking: function() {
          a._valueTracker = null;
          delete a[b2];
        } };
      }
    }
    function Va(a) {
      a._valueTracker || (a._valueTracker = Ua(a));
    }
    function Wa(a) {
      if (!a)
        return false;
      var b2 = a._valueTracker;
      if (!b2)
        return true;
      var c2 = b2.getValue();
      var d2 = "";
      a && (d2 = Ta(a) ? a.checked ? "true" : "false" : a.value);
      a = d2;
      return a !== c2 ? (b2.setValue(a), true) : false;
    }
    function Xa(a) {
      a = a || ("undefined" !== typeof document ? document : void 0);
      if ("undefined" === typeof a)
        return null;
      try {
        return a.activeElement || a.body;
      } catch (b2) {
        return a.body;
      }
    }
    function Ya(a, b2) {
      var c2 = b2.checked;
      return A$1({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c2 ? c2 : a._wrapperState.initialChecked });
    }
    function Za(a, b2) {
      var c2 = null == b2.defaultValue ? "" : b2.defaultValue, d2 = null != b2.checked ? b2.checked : b2.defaultChecked;
      c2 = Sa(null != b2.value ? b2.value : c2);
      a._wrapperState = { initialChecked: d2, initialValue: c2, controlled: "checkbox" === b2.type || "radio" === b2.type ? null != b2.checked : null != b2.value };
    }
    function ab(a, b2) {
      b2 = b2.checked;
      null != b2 && ta(a, "checked", b2, false);
    }
    function bb(a, b2) {
      ab(a, b2);
      var c2 = Sa(b2.value), d2 = b2.type;
      if (null != c2)
        if ("number" === d2) {
          if (0 === c2 && "" === a.value || a.value != c2)
            a.value = "" + c2;
        } else
          a.value !== "" + c2 && (a.value = "" + c2);
      else if ("submit" === d2 || "reset" === d2) {
        a.removeAttribute("value");
        return;
      }
      b2.hasOwnProperty("value") ? cb(a, b2.type, c2) : b2.hasOwnProperty("defaultValue") && cb(a, b2.type, Sa(b2.defaultValue));
      null == b2.checked && null != b2.defaultChecked && (a.defaultChecked = !!b2.defaultChecked);
    }
    function db(a, b2, c2) {
      if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
        var d2 = b2.type;
        if (!("submit" !== d2 && "reset" !== d2 || void 0 !== b2.value && null !== b2.value))
          return;
        b2 = "" + a._wrapperState.initialValue;
        c2 || b2 === a.value || (a.value = b2);
        a.defaultValue = b2;
      }
      c2 = a.name;
      "" !== c2 && (a.name = "");
      a.defaultChecked = !!a._wrapperState.initialChecked;
      "" !== c2 && (a.name = c2);
    }
    function cb(a, b2, c2) {
      if ("number" !== b2 || Xa(a.ownerDocument) !== a)
        null == c2 ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c2 && (a.defaultValue = "" + c2);
    }
    var eb = Array.isArray;
    function fb(a, b2, c2, d2) {
      a = a.options;
      if (b2) {
        b2 = {};
        for (var e2 = 0; e2 < c2.length; e2++)
          b2["$" + c2[e2]] = true;
        for (c2 = 0; c2 < a.length; c2++)
          e2 = b2.hasOwnProperty("$" + a[c2].value), a[c2].selected !== e2 && (a[c2].selected = e2), e2 && d2 && (a[c2].defaultSelected = true);
      } else {
        c2 = "" + Sa(c2);
        b2 = null;
        for (e2 = 0; e2 < a.length; e2++) {
          if (a[e2].value === c2) {
            a[e2].selected = true;
            d2 && (a[e2].defaultSelected = true);
            return;
          }
          null !== b2 || a[e2].disabled || (b2 = a[e2]);
        }
        null !== b2 && (b2.selected = true);
      }
    }
    function gb(a, b2) {
      if (null != b2.dangerouslySetInnerHTML)
        throw Error(p$1(91));
      return A$1({}, b2, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
    }
    function hb(a, b2) {
      var c2 = b2.value;
      if (null == c2) {
        c2 = b2.children;
        b2 = b2.defaultValue;
        if (null != c2) {
          if (null != b2)
            throw Error(p$1(92));
          if (eb(c2)) {
            if (1 < c2.length)
              throw Error(p$1(93));
            c2 = c2[0];
          }
          b2 = c2;
        }
        null == b2 && (b2 = "");
        c2 = b2;
      }
      a._wrapperState = { initialValue: Sa(c2) };
    }
    function ib(a, b2) {
      var c2 = Sa(b2.value), d2 = Sa(b2.defaultValue);
      null != c2 && (c2 = "" + c2, c2 !== a.value && (a.value = c2), null == b2.defaultValue && a.defaultValue !== c2 && (a.defaultValue = c2));
      null != d2 && (a.defaultValue = "" + d2);
    }
    function jb(a) {
      var b2 = a.textContent;
      b2 === a._wrapperState.initialValue && "" !== b2 && null !== b2 && (a.value = b2);
    }
    function kb(a) {
      switch (a) {
        case "svg":
          return "http://www.w3.org/2000/svg";
        case "math":
          return "http://www.w3.org/1998/Math/MathML";
        default:
          return "http://www.w3.org/1999/xhtml";
      }
    }
    function lb(a, b2) {
      return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b2) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : a;
    }
    var mb, nb = function(a) {
      return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b2, c2, d2, e2) {
        MSApp.execUnsafeLocalFunction(function() {
          return a(b2, c2, d2, e2);
        });
      } : a;
    }(function(a, b2) {
      if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a)
        a.innerHTML = b2;
      else {
        mb = mb || document.createElement("div");
        mb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
        for (b2 = mb.firstChild; a.firstChild; )
          a.removeChild(a.firstChild);
        for (; b2.firstChild; )
          a.appendChild(b2.firstChild);
      }
    });
    function ob(a, b2) {
      if (b2) {
        var c2 = a.firstChild;
        if (c2 && c2 === a.lastChild && 3 === c2.nodeType) {
          c2.nodeValue = b2;
          return;
        }
      }
      a.textContent = b2;
    }
    var pb = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    }, qb = ["Webkit", "ms", "Moz", "O"];
    Object.keys(pb).forEach(function(a) {
      qb.forEach(function(b2) {
        b2 = b2 + a.charAt(0).toUpperCase() + a.substring(1);
        pb[b2] = pb[a];
      });
    });
    function rb(a, b2, c2) {
      return null == b2 || "boolean" === typeof b2 || "" === b2 ? "" : c2 || "number" !== typeof b2 || 0 === b2 || pb.hasOwnProperty(a) && pb[a] ? ("" + b2).trim() : b2 + "px";
    }
    function sb(a, b2) {
      a = a.style;
      for (var c2 in b2)
        if (b2.hasOwnProperty(c2)) {
          var d2 = 0 === c2.indexOf("--"), e2 = rb(c2, b2[c2], d2);
          "float" === c2 && (c2 = "cssFloat");
          d2 ? a.setProperty(c2, e2) : a[c2] = e2;
        }
    }
    var tb = A$1({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
    function ub(a, b2) {
      if (b2) {
        if (tb[a] && (null != b2.children || null != b2.dangerouslySetInnerHTML))
          throw Error(p$1(137, a));
        if (null != b2.dangerouslySetInnerHTML) {
          if (null != b2.children)
            throw Error(p$1(60));
          if ("object" !== typeof b2.dangerouslySetInnerHTML || !("__html" in b2.dangerouslySetInnerHTML))
            throw Error(p$1(61));
        }
        if (null != b2.style && "object" !== typeof b2.style)
          throw Error(p$1(62));
      }
    }
    function vb(a, b2) {
      if (-1 === a.indexOf("-"))
        return "string" === typeof b2.is;
      switch (a) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var wb = null;
    function xb(a) {
      a = a.target || a.srcElement || window;
      a.correspondingUseElement && (a = a.correspondingUseElement);
      return 3 === a.nodeType ? a.parentNode : a;
    }
    var yb = null, zb = null, Ab = null;
    function Bb(a) {
      if (a = Cb(a)) {
        if ("function" !== typeof yb)
          throw Error(p$1(280));
        var b2 = a.stateNode;
        b2 && (b2 = Db(b2), yb(a.stateNode, a.type, b2));
      }
    }
    function Eb(a) {
      zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
    }
    function Fb() {
      if (zb) {
        var a = zb, b2 = Ab;
        Ab = zb = null;
        Bb(a);
        if (b2)
          for (a = 0; a < b2.length; a++)
            Bb(b2[a]);
      }
    }
    function Gb(a, b2) {
      return a(b2);
    }
    function Hb() {
    }
    var Ib = false;
    function Jb(a, b2, c2) {
      if (Ib)
        return a(b2, c2);
      Ib = true;
      try {
        return Gb(a, b2, c2);
      } finally {
        if (Ib = false, null !== zb || null !== Ab)
          Hb(), Fb();
      }
    }
    function Kb(a, b2) {
      var c2 = a.stateNode;
      if (null === c2)
        return null;
      var d2 = Db(c2);
      if (null === d2)
        return null;
      c2 = d2[b2];
      a:
        switch (b2) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (d2 = !d2.disabled) || (a = a.type, d2 = !("button" === a || "input" === a || "select" === a || "textarea" === a));
            a = !d2;
            break a;
          default:
            a = false;
        }
      if (a)
        return null;
      if (c2 && "function" !== typeof c2)
        throw Error(p$1(231, b2, typeof c2));
      return c2;
    }
    var Lb = false;
    if (ia)
      try {
        var Mb = {};
        Object.defineProperty(Mb, "passive", { get: function() {
          Lb = true;
        } });
        window.addEventListener("test", Mb, Mb);
        window.removeEventListener("test", Mb, Mb);
      } catch (a) {
        Lb = false;
      }
    function Nb(a, b2, c2, d2, e2, f2, g2, h2, k2) {
      var l2 = Array.prototype.slice.call(arguments, 3);
      try {
        b2.apply(c2, l2);
      } catch (m2) {
        this.onError(m2);
      }
    }
    var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a) {
      Ob = true;
      Pb = a;
    } };
    function Tb(a, b2, c2, d2, e2, f2, g2, h2, k2) {
      Ob = false;
      Pb = null;
      Nb.apply(Sb, arguments);
    }
    function Ub(a, b2, c2, d2, e2, f2, g2, h2, k2) {
      Tb.apply(this, arguments);
      if (Ob) {
        if (Ob) {
          var l2 = Pb;
          Ob = false;
          Pb = null;
        } else
          throw Error(p$1(198));
        Qb || (Qb = true, Rb = l2);
      }
    }
    function Vb(a) {
      var b2 = a, c2 = a;
      if (a.alternate)
        for (; b2.return; )
          b2 = b2.return;
      else {
        a = b2;
        do
          b2 = a, 0 !== (b2.flags & 4098) && (c2 = b2.return), a = b2.return;
        while (a);
      }
      return 3 === b2.tag ? c2 : null;
    }
    function Wb(a) {
      if (13 === a.tag) {
        var b2 = a.memoizedState;
        null === b2 && (a = a.alternate, null !== a && (b2 = a.memoizedState));
        if (null !== b2)
          return b2.dehydrated;
      }
      return null;
    }
    function Xb(a) {
      if (Vb(a) !== a)
        throw Error(p$1(188));
    }
    function Yb(a) {
      var b2 = a.alternate;
      if (!b2) {
        b2 = Vb(a);
        if (null === b2)
          throw Error(p$1(188));
        return b2 !== a ? null : a;
      }
      for (var c2 = a, d2 = b2; ; ) {
        var e2 = c2.return;
        if (null === e2)
          break;
        var f2 = e2.alternate;
        if (null === f2) {
          d2 = e2.return;
          if (null !== d2) {
            c2 = d2;
            continue;
          }
          break;
        }
        if (e2.child === f2.child) {
          for (f2 = e2.child; f2; ) {
            if (f2 === c2)
              return Xb(e2), a;
            if (f2 === d2)
              return Xb(e2), b2;
            f2 = f2.sibling;
          }
          throw Error(p$1(188));
        }
        if (c2.return !== d2.return)
          c2 = e2, d2 = f2;
        else {
          for (var g2 = false, h2 = e2.child; h2; ) {
            if (h2 === c2) {
              g2 = true;
              c2 = e2;
              d2 = f2;
              break;
            }
            if (h2 === d2) {
              g2 = true;
              d2 = e2;
              c2 = f2;
              break;
            }
            h2 = h2.sibling;
          }
          if (!g2) {
            for (h2 = f2.child; h2; ) {
              if (h2 === c2) {
                g2 = true;
                c2 = f2;
                d2 = e2;
                break;
              }
              if (h2 === d2) {
                g2 = true;
                d2 = f2;
                c2 = e2;
                break;
              }
              h2 = h2.sibling;
            }
            if (!g2)
              throw Error(p$1(189));
          }
        }
        if (c2.alternate !== d2)
          throw Error(p$1(190));
      }
      if (3 !== c2.tag)
        throw Error(p$1(188));
      return c2.stateNode.current === c2 ? a : b2;
    }
    function Zb(a) {
      a = Yb(a);
      return null !== a ? $b(a) : null;
    }
    function $b(a) {
      if (5 === a.tag || 6 === a.tag)
        return a;
      for (a = a.child; null !== a; ) {
        var b2 = $b(a);
        if (null !== b2)
          return b2;
        a = a.sibling;
      }
      return null;
    }
    var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
    function mc(a) {
      if (lc && "function" === typeof lc.onCommitFiberRoot)
        try {
          lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
        } catch (b2) {
        }
    }
    var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
    function nc(a) {
      a >>>= 0;
      return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
    }
    var rc = 64, sc = 4194304;
    function tc(a) {
      switch (a & -a) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return a & 4194240;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return a & 130023424;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 1073741824;
        default:
          return a;
      }
    }
    function uc(a, b2) {
      var c2 = a.pendingLanes;
      if (0 === c2)
        return 0;
      var d2 = 0, e2 = a.suspendedLanes, f2 = a.pingedLanes, g2 = c2 & 268435455;
      if (0 !== g2) {
        var h2 = g2 & ~e2;
        0 !== h2 ? d2 = tc(h2) : (f2 &= g2, 0 !== f2 && (d2 = tc(f2)));
      } else
        g2 = c2 & ~e2, 0 !== g2 ? d2 = tc(g2) : 0 !== f2 && (d2 = tc(f2));
      if (0 === d2)
        return 0;
      if (0 !== b2 && b2 !== d2 && 0 === (b2 & e2) && (e2 = d2 & -d2, f2 = b2 & -b2, e2 >= f2 || 16 === e2 && 0 !== (f2 & 4194240)))
        return b2;
      0 !== (d2 & 4) && (d2 |= c2 & 16);
      b2 = a.entangledLanes;
      if (0 !== b2)
        for (a = a.entanglements, b2 &= d2; 0 < b2; )
          c2 = 31 - oc(b2), e2 = 1 << c2, d2 |= a[c2], b2 &= ~e2;
      return d2;
    }
    function vc(a, b2) {
      switch (a) {
        case 1:
        case 2:
        case 4:
          return b2 + 250;
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return b2 + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function wc(a, b2) {
      for (var c2 = a.suspendedLanes, d2 = a.pingedLanes, e2 = a.expirationTimes, f2 = a.pendingLanes; 0 < f2; ) {
        var g2 = 31 - oc(f2), h2 = 1 << g2, k2 = e2[g2];
        if (-1 === k2) {
          if (0 === (h2 & c2) || 0 !== (h2 & d2))
            e2[g2] = vc(h2, b2);
        } else
          k2 <= b2 && (a.expiredLanes |= h2);
        f2 &= ~h2;
      }
    }
    function xc(a) {
      a = a.pendingLanes & -1073741825;
      return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
    }
    function yc() {
      var a = rc;
      rc <<= 1;
      0 === (rc & 4194240) && (rc = 64);
      return a;
    }
    function zc(a) {
      for (var b2 = [], c2 = 0; 31 > c2; c2++)
        b2.push(a);
      return b2;
    }
    function Ac(a, b2, c2) {
      a.pendingLanes |= b2;
      536870912 !== b2 && (a.suspendedLanes = 0, a.pingedLanes = 0);
      a = a.eventTimes;
      b2 = 31 - oc(b2);
      a[b2] = c2;
    }
    function Bc(a, b2) {
      var c2 = a.pendingLanes & ~b2;
      a.pendingLanes = b2;
      a.suspendedLanes = 0;
      a.pingedLanes = 0;
      a.expiredLanes &= b2;
      a.mutableReadLanes &= b2;
      a.entangledLanes &= b2;
      b2 = a.entanglements;
      var d2 = a.eventTimes;
      for (a = a.expirationTimes; 0 < c2; ) {
        var e2 = 31 - oc(c2), f2 = 1 << e2;
        b2[e2] = 0;
        d2[e2] = -1;
        a[e2] = -1;
        c2 &= ~f2;
      }
    }
    function Cc(a, b2) {
      var c2 = a.entangledLanes |= b2;
      for (a = a.entanglements; c2; ) {
        var d2 = 31 - oc(c2), e2 = 1 << d2;
        e2 & b2 | a[d2] & b2 && (a[d2] |= b2);
        c2 &= ~e2;
      }
    }
    var C = 0;
    function Dc(a) {
      a &= -a;
      return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
    }
    var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
    function Sc(a, b2) {
      switch (a) {
        case "focusin":
        case "focusout":
          Lc = null;
          break;
        case "dragenter":
        case "dragleave":
          Mc = null;
          break;
        case "mouseover":
        case "mouseout":
          Nc = null;
          break;
        case "pointerover":
        case "pointerout":
          Oc.delete(b2.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          Pc.delete(b2.pointerId);
      }
    }
    function Tc(a, b2, c2, d2, e2, f2) {
      if (null === a || a.nativeEvent !== f2)
        return a = { blockedOn: b2, domEventName: c2, eventSystemFlags: d2, nativeEvent: f2, targetContainers: [e2] }, null !== b2 && (b2 = Cb(b2), null !== b2 && Fc(b2)), a;
      a.eventSystemFlags |= d2;
      b2 = a.targetContainers;
      null !== e2 && -1 === b2.indexOf(e2) && b2.push(e2);
      return a;
    }
    function Uc(a, b2, c2, d2, e2) {
      switch (b2) {
        case "focusin":
          return Lc = Tc(Lc, a, b2, c2, d2, e2), true;
        case "dragenter":
          return Mc = Tc(Mc, a, b2, c2, d2, e2), true;
        case "mouseover":
          return Nc = Tc(Nc, a, b2, c2, d2, e2), true;
        case "pointerover":
          var f2 = e2.pointerId;
          Oc.set(f2, Tc(Oc.get(f2) || null, a, b2, c2, d2, e2));
          return true;
        case "gotpointercapture":
          return f2 = e2.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a, b2, c2, d2, e2)), true;
      }
      return false;
    }
    function Vc(a) {
      var b2 = Wc(a.target);
      if (null !== b2) {
        var c2 = Vb(b2);
        if (null !== c2) {
          if (b2 = c2.tag, 13 === b2) {
            if (b2 = Wb(c2), null !== b2) {
              a.blockedOn = b2;
              Ic(a.priority, function() {
                Gc(c2);
              });
              return;
            }
          } else if (3 === b2 && c2.stateNode.current.memoizedState.isDehydrated) {
            a.blockedOn = 3 === c2.tag ? c2.stateNode.containerInfo : null;
            return;
          }
        }
      }
      a.blockedOn = null;
    }
    function Xc(a) {
      if (null !== a.blockedOn)
        return false;
      for (var b2 = a.targetContainers; 0 < b2.length; ) {
        var c2 = Yc(a.domEventName, a.eventSystemFlags, b2[0], a.nativeEvent);
        if (null === c2) {
          c2 = a.nativeEvent;
          var d2 = new c2.constructor(c2.type, c2);
          wb = d2;
          c2.target.dispatchEvent(d2);
          wb = null;
        } else
          return b2 = Cb(c2), null !== b2 && Fc(b2), a.blockedOn = c2, false;
        b2.shift();
      }
      return true;
    }
    function Zc(a, b2, c2) {
      Xc(a) && c2.delete(b2);
    }
    function $c() {
      Jc = false;
      null !== Lc && Xc(Lc) && (Lc = null);
      null !== Mc && Xc(Mc) && (Mc = null);
      null !== Nc && Xc(Nc) && (Nc = null);
      Oc.forEach(Zc);
      Pc.forEach(Zc);
    }
    function ad(a, b2) {
      a.blockedOn === b2 && (a.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
    }
    function bd(a) {
      function b2(b3) {
        return ad(b3, a);
      }
      if (0 < Kc.length) {
        ad(Kc[0], a);
        for (var c2 = 1; c2 < Kc.length; c2++) {
          var d2 = Kc[c2];
          d2.blockedOn === a && (d2.blockedOn = null);
        }
      }
      null !== Lc && ad(Lc, a);
      null !== Mc && ad(Mc, a);
      null !== Nc && ad(Nc, a);
      Oc.forEach(b2);
      Pc.forEach(b2);
      for (c2 = 0; c2 < Qc.length; c2++)
        d2 = Qc[c2], d2.blockedOn === a && (d2.blockedOn = null);
      for (; 0 < Qc.length && (c2 = Qc[0], null === c2.blockedOn); )
        Vc(c2), null === c2.blockedOn && Qc.shift();
    }
    var cd = ua.ReactCurrentBatchConfig, dd = true;
    function ed(a, b2, c2, d2) {
      var e2 = C, f2 = cd.transition;
      cd.transition = null;
      try {
        C = 1, fd(a, b2, c2, d2);
      } finally {
        C = e2, cd.transition = f2;
      }
    }
    function gd(a, b2, c2, d2) {
      var e2 = C, f2 = cd.transition;
      cd.transition = null;
      try {
        C = 4, fd(a, b2, c2, d2);
      } finally {
        C = e2, cd.transition = f2;
      }
    }
    function fd(a, b2, c2, d2) {
      if (dd) {
        var e2 = Yc(a, b2, c2, d2);
        if (null === e2)
          hd(a, b2, d2, id, c2), Sc(a, d2);
        else if (Uc(e2, a, b2, c2, d2))
          d2.stopPropagation();
        else if (Sc(a, d2), b2 & 4 && -1 < Rc.indexOf(a)) {
          for (; null !== e2; ) {
            var f2 = Cb(e2);
            null !== f2 && Ec(f2);
            f2 = Yc(a, b2, c2, d2);
            null === f2 && hd(a, b2, d2, id, c2);
            if (f2 === e2)
              break;
            e2 = f2;
          }
          null !== e2 && d2.stopPropagation();
        } else
          hd(a, b2, d2, null, c2);
      }
    }
    var id = null;
    function Yc(a, b2, c2, d2) {
      id = null;
      a = xb(d2);
      a = Wc(a);
      if (null !== a)
        if (b2 = Vb(a), null === b2)
          a = null;
        else if (c2 = b2.tag, 13 === c2) {
          a = Wb(b2);
          if (null !== a)
            return a;
          a = null;
        } else if (3 === c2) {
          if (b2.stateNode.current.memoizedState.isDehydrated)
            return 3 === b2.tag ? b2.stateNode.containerInfo : null;
          a = null;
        } else
          b2 !== a && (a = null);
      id = a;
      return null;
    }
    function jd(a) {
      switch (a) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return 1;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return 4;
        case "message":
          switch (ec()) {
            case fc:
              return 1;
            case gc:
              return 4;
            case hc:
            case ic:
              return 16;
            case jc:
              return 536870912;
            default:
              return 16;
          }
        default:
          return 16;
      }
    }
    var kd = null, ld = null, md = null;
    function nd() {
      if (md)
        return md;
      var a, b2 = ld, c2 = b2.length, d2, e2 = "value" in kd ? kd.value : kd.textContent, f2 = e2.length;
      for (a = 0; a < c2 && b2[a] === e2[a]; a++)
        ;
      var g2 = c2 - a;
      for (d2 = 1; d2 <= g2 && b2[c2 - d2] === e2[f2 - d2]; d2++)
        ;
      return md = e2.slice(a, 1 < d2 ? 1 - d2 : void 0);
    }
    function od(a) {
      var b2 = a.keyCode;
      "charCode" in a ? (a = a.charCode, 0 === a && 13 === b2 && (a = 13)) : a = b2;
      10 === a && (a = 13);
      return 32 <= a || 13 === a ? a : 0;
    }
    function pd() {
      return true;
    }
    function qd() {
      return false;
    }
    function rd(a) {
      function b2(b3, d2, e2, f2, g2) {
        this._reactName = b3;
        this._targetInst = e2;
        this.type = d2;
        this.nativeEvent = f2;
        this.target = g2;
        this.currentTarget = null;
        for (var c2 in a)
          a.hasOwnProperty(c2) && (b3 = a[c2], this[c2] = b3 ? b3(f2) : f2[c2]);
        this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
        this.isPropagationStopped = qd;
        return this;
      }
      A$1(b2.prototype, { preventDefault: function() {
        this.defaultPrevented = true;
        var a2 = this.nativeEvent;
        a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = pd);
      }, stopPropagation: function() {
        var a2 = this.nativeEvent;
        a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = pd);
      }, persist: function() {
      }, isPersistent: pd });
      return b2;
    }
    var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
      return a.timeStamp || Date.now();
    }, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A$1({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A$1({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
      return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    }, movementX: function(a) {
      if ("movementX" in a)
        return a.movementX;
      a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
      return wd;
    }, movementY: function(a) {
      return "movementY" in a ? a.movementY : xd;
    } }), Bd = rd(Ad), Cd = A$1({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A$1({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A$1({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A$1({}, sd, { clipboardData: function(a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    } }), Jd = rd(Id), Kd = A$1({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    }, Nd = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    }, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
    function Pd(a) {
      var b2 = this.nativeEvent;
      return b2.getModifierState ? b2.getModifierState(a) : (a = Od[a]) ? !!b2[a] : false;
    }
    function zd() {
      return Pd;
    }
    var Qd = A$1({}, ud, { key: function(a) {
      if (a.key) {
        var b2 = Md[a.key] || a.key;
        if ("Unidentified" !== b2)
          return b2;
      }
      return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
    }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
      return "keypress" === a.type ? od(a) : 0;
    }, keyCode: function(a) {
      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }, which: function(a) {
      return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    } }), Rd = rd(Qd), Sd = A$1({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A$1({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A$1({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A$1({}, Ad, {
      deltaX: function(a) {
        return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
      },
      deltaY: function(a) {
        return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    }), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = ia && "CompositionEvent" in window, be = null;
    ia && "documentMode" in document && (be = document.documentMode);
    var ce = ia && "TextEvent" in window && !be, de = ia && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
    function ge(a, b2) {
      switch (a) {
        case "keyup":
          return -1 !== $d.indexOf(b2.keyCode);
        case "keydown":
          return 229 !== b2.keyCode;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function he(a) {
      a = a.detail;
      return "object" === typeof a && "data" in a ? a.data : null;
    }
    var ie = false;
    function je(a, b2) {
      switch (a) {
        case "compositionend":
          return he(b2);
        case "keypress":
          if (32 !== b2.which)
            return null;
          fe = true;
          return ee;
        case "textInput":
          return a = b2.data, a === ee && fe ? null : a;
        default:
          return null;
      }
    }
    function ke(a, b2) {
      if (ie)
        return "compositionend" === a || !ae && ge(a, b2) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
      switch (a) {
        case "paste":
          return null;
        case "keypress":
          if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
            if (b2.char && 1 < b2.char.length)
              return b2.char;
            if (b2.which)
              return String.fromCharCode(b2.which);
          }
          return null;
        case "compositionend":
          return de && "ko" !== b2.locale ? null : b2.data;
        default:
          return null;
      }
    }
    var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
    function me(a) {
      var b2 = a && a.nodeName && a.nodeName.toLowerCase();
      return "input" === b2 ? !!le[a.type] : "textarea" === b2 ? true : false;
    }
    function ne(a, b2, c2, d2) {
      Eb(d2);
      b2 = oe(b2, "onChange");
      0 < b2.length && (c2 = new td("onChange", "change", null, c2, d2), a.push({ event: c2, listeners: b2 }));
    }
    var pe = null, qe = null;
    function re(a) {
      se(a, 0);
    }
    function te(a) {
      var b2 = ue(a);
      if (Wa(b2))
        return a;
    }
    function ve(a, b2) {
      if ("change" === a)
        return b2;
    }
    var we = false;
    if (ia) {
      var xe;
      if (ia) {
        var ye = "oninput" in document;
        if (!ye) {
          var ze = document.createElement("div");
          ze.setAttribute("oninput", "return;");
          ye = "function" === typeof ze.oninput;
        }
        xe = ye;
      } else
        xe = false;
      we = xe && (!document.documentMode || 9 < document.documentMode);
    }
    function Ae() {
      pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
    }
    function Be(a) {
      if ("value" === a.propertyName && te(qe)) {
        var b2 = [];
        ne(b2, qe, a, xb(a));
        Jb(re, b2);
      }
    }
    function Ce(a, b2, c2) {
      "focusin" === a ? (Ae(), pe = b2, qe = c2, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
    }
    function De(a) {
      if ("selectionchange" === a || "keyup" === a || "keydown" === a)
        return te(qe);
    }
    function Ee(a, b2) {
      if ("click" === a)
        return te(b2);
    }
    function Fe(a, b2) {
      if ("input" === a || "change" === a)
        return te(b2);
    }
    function Ge(a, b2) {
      return a === b2 && (0 !== a || 1 / a === 1 / b2) || a !== a && b2 !== b2;
    }
    var He = "function" === typeof Object.is ? Object.is : Ge;
    function Ie(a, b2) {
      if (He(a, b2))
        return true;
      if ("object" !== typeof a || null === a || "object" !== typeof b2 || null === b2)
        return false;
      var c2 = Object.keys(a), d2 = Object.keys(b2);
      if (c2.length !== d2.length)
        return false;
      for (d2 = 0; d2 < c2.length; d2++) {
        var e2 = c2[d2];
        if (!ja.call(b2, e2) || !He(a[e2], b2[e2]))
          return false;
      }
      return true;
    }
    function Je(a) {
      for (; a && a.firstChild; )
        a = a.firstChild;
      return a;
    }
    function Ke(a, b2) {
      var c2 = Je(a);
      a = 0;
      for (var d2; c2; ) {
        if (3 === c2.nodeType) {
          d2 = a + c2.textContent.length;
          if (a <= b2 && d2 >= b2)
            return { node: c2, offset: b2 - a };
          a = d2;
        }
        a: {
          for (; c2; ) {
            if (c2.nextSibling) {
              c2 = c2.nextSibling;
              break a;
            }
            c2 = c2.parentNode;
          }
          c2 = void 0;
        }
        c2 = Je(c2);
      }
    }
    function Le(a, b2) {
      return a && b2 ? a === b2 ? true : a && 3 === a.nodeType ? false : b2 && 3 === b2.nodeType ? Le(a, b2.parentNode) : "contains" in a ? a.contains(b2) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b2) & 16) : false : false;
    }
    function Me() {
      for (var a = window, b2 = Xa(); b2 instanceof a.HTMLIFrameElement; ) {
        try {
          var c2 = "string" === typeof b2.contentWindow.location.href;
        } catch (d2) {
          c2 = false;
        }
        if (c2)
          a = b2.contentWindow;
        else
          break;
        b2 = Xa(a.document);
      }
      return b2;
    }
    function Ne(a) {
      var b2 = a && a.nodeName && a.nodeName.toLowerCase();
      return b2 && ("input" === b2 && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b2 || "true" === a.contentEditable);
    }
    function Oe(a) {
      var b2 = Me(), c2 = a.focusedElem, d2 = a.selectionRange;
      if (b2 !== c2 && c2 && c2.ownerDocument && Le(c2.ownerDocument.documentElement, c2)) {
        if (null !== d2 && Ne(c2)) {
          if (b2 = d2.start, a = d2.end, void 0 === a && (a = b2), "selectionStart" in c2)
            c2.selectionStart = b2, c2.selectionEnd = Math.min(a, c2.value.length);
          else if (a = (b2 = c2.ownerDocument || document) && b2.defaultView || window, a.getSelection) {
            a = a.getSelection();
            var e2 = c2.textContent.length, f2 = Math.min(d2.start, e2);
            d2 = void 0 === d2.end ? f2 : Math.min(d2.end, e2);
            !a.extend && f2 > d2 && (e2 = d2, d2 = f2, f2 = e2);
            e2 = Ke(c2, f2);
            var g2 = Ke(
              c2,
              d2
            );
            e2 && g2 && (1 !== a.rangeCount || a.anchorNode !== e2.node || a.anchorOffset !== e2.offset || a.focusNode !== g2.node || a.focusOffset !== g2.offset) && (b2 = b2.createRange(), b2.setStart(e2.node, e2.offset), a.removeAllRanges(), f2 > d2 ? (a.addRange(b2), a.extend(g2.node, g2.offset)) : (b2.setEnd(g2.node, g2.offset), a.addRange(b2)));
          }
        }
        b2 = [];
        for (a = c2; a = a.parentNode; )
          1 === a.nodeType && b2.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
        "function" === typeof c2.focus && c2.focus();
        for (c2 = 0; c2 < b2.length; c2++)
          a = b2[c2], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
      }
    }
    var Pe = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
    function Ue(a, b2, c2) {
      var d2 = c2.window === c2 ? c2.document : 9 === c2.nodeType ? c2 : c2.ownerDocument;
      Te || null == Qe || Qe !== Xa(d2) || (d2 = Qe, "selectionStart" in d2 && Ne(d2) ? d2 = { start: d2.selectionStart, end: d2.selectionEnd } : (d2 = (d2.ownerDocument && d2.ownerDocument.defaultView || window).getSelection(), d2 = { anchorNode: d2.anchorNode, anchorOffset: d2.anchorOffset, focusNode: d2.focusNode, focusOffset: d2.focusOffset }), Se && Ie(Se, d2) || (Se = d2, d2 = oe(Re, "onSelect"), 0 < d2.length && (b2 = new td("onSelect", "select", null, b2, c2), a.push({ event: b2, listeners: d2 }), b2.target = Qe)));
    }
    function Ve(a, b2) {
      var c2 = {};
      c2[a.toLowerCase()] = b2.toLowerCase();
      c2["Webkit" + a] = "webkit" + b2;
      c2["Moz" + a] = "moz" + b2;
      return c2;
    }
    var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") }, Xe = {}, Ye = {};
    ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
    function Ze(a) {
      if (Xe[a])
        return Xe[a];
      if (!We[a])
        return a;
      var b2 = We[a], c2;
      for (c2 in b2)
        if (b2.hasOwnProperty(c2) && c2 in Ye)
          return Xe[a] = b2[c2];
      return a;
    }
    var $e = Ze("animationend"), af = Ze("animationiteration"), bf = Ze("animationstart"), cf = Ze("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
    function ff(a, b2) {
      df.set(a, b2);
      fa(b2, [a]);
    }
    for (var gf = 0; gf < ef.length; gf++) {
      var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
      ff(jf, "on" + kf);
    }
    ff($e, "onAnimationEnd");
    ff(af, "onAnimationIteration");
    ff(bf, "onAnimationStart");
    ff("dblclick", "onDoubleClick");
    ff("focusin", "onFocus");
    ff("focusout", "onBlur");
    ff(cf, "onTransitionEnd");
    ha("onMouseEnter", ["mouseout", "mouseover"]);
    ha("onMouseLeave", ["mouseout", "mouseover"]);
    ha("onPointerEnter", ["pointerout", "pointerover"]);
    ha("onPointerLeave", ["pointerout", "pointerover"]);
    fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
    fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
    function nf(a, b2, c2) {
      var d2 = a.type || "unknown-event";
      a.currentTarget = c2;
      Ub(d2, b2, void 0, a);
      a.currentTarget = null;
    }
    function se(a, b2) {
      b2 = 0 !== (b2 & 4);
      for (var c2 = 0; c2 < a.length; c2++) {
        var d2 = a[c2], e2 = d2.event;
        d2 = d2.listeners;
        a: {
          var f2 = void 0;
          if (b2)
            for (var g2 = d2.length - 1; 0 <= g2; g2--) {
              var h2 = d2[g2], k2 = h2.instance, l2 = h2.currentTarget;
              h2 = h2.listener;
              if (k2 !== f2 && e2.isPropagationStopped())
                break a;
              nf(e2, h2, l2);
              f2 = k2;
            }
          else
            for (g2 = 0; g2 < d2.length; g2++) {
              h2 = d2[g2];
              k2 = h2.instance;
              l2 = h2.currentTarget;
              h2 = h2.listener;
              if (k2 !== f2 && e2.isPropagationStopped())
                break a;
              nf(e2, h2, l2);
              f2 = k2;
            }
        }
      }
      if (Qb)
        throw a = Rb, Qb = false, Rb = null, a;
    }
    function D(a, b2) {
      var c2 = b2[of];
      void 0 === c2 && (c2 = b2[of] = /* @__PURE__ */ new Set());
      var d2 = a + "__bubble";
      c2.has(d2) || (pf(b2, a, 2, false), c2.add(d2));
    }
    function qf(a, b2, c2) {
      var d2 = 0;
      b2 && (d2 |= 4);
      pf(c2, a, d2, b2);
    }
    var rf = "_reactListening" + Math.random().toString(36).slice(2);
    function sf(a) {
      if (!a[rf]) {
        a[rf] = true;
        da.forEach(function(b3) {
          "selectionchange" !== b3 && (mf.has(b3) || qf(b3, false, a), qf(b3, true, a));
        });
        var b2 = 9 === a.nodeType ? a : a.ownerDocument;
        null === b2 || b2[rf] || (b2[rf] = true, qf("selectionchange", false, b2));
      }
    }
    function pf(a, b2, c2, d2) {
      switch (jd(b2)) {
        case 1:
          var e2 = ed;
          break;
        case 4:
          e2 = gd;
          break;
        default:
          e2 = fd;
      }
      c2 = e2.bind(null, b2, c2, a);
      e2 = void 0;
      !Lb || "touchstart" !== b2 && "touchmove" !== b2 && "wheel" !== b2 || (e2 = true);
      d2 ? void 0 !== e2 ? a.addEventListener(b2, c2, { capture: true, passive: e2 }) : a.addEventListener(b2, c2, true) : void 0 !== e2 ? a.addEventListener(b2, c2, { passive: e2 }) : a.addEventListener(b2, c2, false);
    }
    function hd(a, b2, c2, d2, e2) {
      var f2 = d2;
      if (0 === (b2 & 1) && 0 === (b2 & 2) && null !== d2)
        a:
          for (; ; ) {
            if (null === d2)
              return;
            var g2 = d2.tag;
            if (3 === g2 || 4 === g2) {
              var h2 = d2.stateNode.containerInfo;
              if (h2 === e2 || 8 === h2.nodeType && h2.parentNode === e2)
                break;
              if (4 === g2)
                for (g2 = d2.return; null !== g2; ) {
                  var k2 = g2.tag;
                  if (3 === k2 || 4 === k2) {
                    if (k2 = g2.stateNode.containerInfo, k2 === e2 || 8 === k2.nodeType && k2.parentNode === e2)
                      return;
                  }
                  g2 = g2.return;
                }
              for (; null !== h2; ) {
                g2 = Wc(h2);
                if (null === g2)
                  return;
                k2 = g2.tag;
                if (5 === k2 || 6 === k2) {
                  d2 = f2 = g2;
                  continue a;
                }
                h2 = h2.parentNode;
              }
            }
            d2 = d2.return;
          }
      Jb(function() {
        var d3 = f2, e3 = xb(c2), g3 = [];
        a: {
          var h3 = df.get(a);
          if (void 0 !== h3) {
            var k3 = td, n2 = a;
            switch (a) {
              case "keypress":
                if (0 === od(c2))
                  break a;
              case "keydown":
              case "keyup":
                k3 = Rd;
                break;
              case "focusin":
                n2 = "focus";
                k3 = Fd;
                break;
              case "focusout":
                n2 = "blur";
                k3 = Fd;
                break;
              case "beforeblur":
              case "afterblur":
                k3 = Fd;
                break;
              case "click":
                if (2 === c2.button)
                  break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                k3 = Bd;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                k3 = Dd;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                k3 = Vd;
                break;
              case $e:
              case af:
              case bf:
                k3 = Hd;
                break;
              case cf:
                k3 = Xd;
                break;
              case "scroll":
                k3 = vd;
                break;
              case "wheel":
                k3 = Zd;
                break;
              case "copy":
              case "cut":
              case "paste":
                k3 = Jd;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                k3 = Td;
            }
            var t2 = 0 !== (b2 & 4), J2 = !t2 && "scroll" === a, x2 = t2 ? null !== h3 ? h3 + "Capture" : null : h3;
            t2 = [];
            for (var w2 = d3, u2; null !== w2; ) {
              u2 = w2;
              var F2 = u2.stateNode;
              5 === u2.tag && null !== F2 && (u2 = F2, null !== x2 && (F2 = Kb(w2, x2), null != F2 && t2.push(tf(w2, F2, u2))));
              if (J2)
                break;
              w2 = w2.return;
            }
            0 < t2.length && (h3 = new k3(h3, n2, null, c2, e3), g3.push({ event: h3, listeners: t2 }));
          }
        }
        if (0 === (b2 & 7)) {
          a: {
            h3 = "mouseover" === a || "pointerover" === a;
            k3 = "mouseout" === a || "pointerout" === a;
            if (h3 && c2 !== wb && (n2 = c2.relatedTarget || c2.fromElement) && (Wc(n2) || n2[uf]))
              break a;
            if (k3 || h3) {
              h3 = e3.window === e3 ? e3 : (h3 = e3.ownerDocument) ? h3.defaultView || h3.parentWindow : window;
              if (k3) {
                if (n2 = c2.relatedTarget || c2.toElement, k3 = d3, n2 = n2 ? Wc(n2) : null, null !== n2 && (J2 = Vb(n2), n2 !== J2 || 5 !== n2.tag && 6 !== n2.tag))
                  n2 = null;
              } else
                k3 = null, n2 = d3;
              if (k3 !== n2) {
                t2 = Bd;
                F2 = "onMouseLeave";
                x2 = "onMouseEnter";
                w2 = "mouse";
                if ("pointerout" === a || "pointerover" === a)
                  t2 = Td, F2 = "onPointerLeave", x2 = "onPointerEnter", w2 = "pointer";
                J2 = null == k3 ? h3 : ue(k3);
                u2 = null == n2 ? h3 : ue(n2);
                h3 = new t2(F2, w2 + "leave", k3, c2, e3);
                h3.target = J2;
                h3.relatedTarget = u2;
                F2 = null;
                Wc(e3) === d3 && (t2 = new t2(x2, w2 + "enter", n2, c2, e3), t2.target = u2, t2.relatedTarget = J2, F2 = t2);
                J2 = F2;
                if (k3 && n2)
                  b: {
                    t2 = k3;
                    x2 = n2;
                    w2 = 0;
                    for (u2 = t2; u2; u2 = vf(u2))
                      w2++;
                    u2 = 0;
                    for (F2 = x2; F2; F2 = vf(F2))
                      u2++;
                    for (; 0 < w2 - u2; )
                      t2 = vf(t2), w2--;
                    for (; 0 < u2 - w2; )
                      x2 = vf(x2), u2--;
                    for (; w2--; ) {
                      if (t2 === x2 || null !== x2 && t2 === x2.alternate)
                        break b;
                      t2 = vf(t2);
                      x2 = vf(x2);
                    }
                    t2 = null;
                  }
                else
                  t2 = null;
                null !== k3 && wf(g3, h3, k3, t2, false);
                null !== n2 && null !== J2 && wf(g3, J2, n2, t2, true);
              }
            }
          }
          a: {
            h3 = d3 ? ue(d3) : window;
            k3 = h3.nodeName && h3.nodeName.toLowerCase();
            if ("select" === k3 || "input" === k3 && "file" === h3.type)
              var na = ve;
            else if (me(h3))
              if (we)
                na = Fe;
              else {
                na = De;
                var xa = Ce;
              }
            else
              (k3 = h3.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h3.type || "radio" === h3.type) && (na = Ee);
            if (na && (na = na(a, d3))) {
              ne(g3, na, c2, e3);
              break a;
            }
            xa && xa(a, h3, d3);
            "focusout" === a && (xa = h3._wrapperState) && xa.controlled && "number" === h3.type && cb(h3, "number", h3.value);
          }
          xa = d3 ? ue(d3) : window;
          switch (a) {
            case "focusin":
              if (me(xa) || "true" === xa.contentEditable)
                Qe = xa, Re = d3, Se = null;
              break;
            case "focusout":
              Se = Re = Qe = null;
              break;
            case "mousedown":
              Te = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              Te = false;
              Ue(g3, c2, e3);
              break;
            case "selectionchange":
              if (Pe)
                break;
            case "keydown":
            case "keyup":
              Ue(g3, c2, e3);
          }
          var $a;
          if (ae)
            b: {
              switch (a) {
                case "compositionstart":
                  var ba = "onCompositionStart";
                  break b;
                case "compositionend":
                  ba = "onCompositionEnd";
                  break b;
                case "compositionupdate":
                  ba = "onCompositionUpdate";
                  break b;
              }
              ba = void 0;
            }
          else
            ie ? ge(a, c2) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c2.keyCode && (ba = "onCompositionStart");
          ba && (de && "ko" !== c2.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e3, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d3, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c2, e3), g3.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c2), null !== $a && (ba.data = $a))));
          if ($a = ce ? je(a, c2) : ke(a, c2))
            d3 = oe(d3, "onBeforeInput"), 0 < d3.length && (e3 = new Ld("onBeforeInput", "beforeinput", null, c2, e3), g3.push({ event: e3, listeners: d3 }), e3.data = $a);
        }
        se(g3, b2);
      });
    }
    function tf(a, b2, c2) {
      return { instance: a, listener: b2, currentTarget: c2 };
    }
    function oe(a, b2) {
      for (var c2 = b2 + "Capture", d2 = []; null !== a; ) {
        var e2 = a, f2 = e2.stateNode;
        5 === e2.tag && null !== f2 && (e2 = f2, f2 = Kb(a, c2), null != f2 && d2.unshift(tf(a, f2, e2)), f2 = Kb(a, b2), null != f2 && d2.push(tf(a, f2, e2)));
        a = a.return;
      }
      return d2;
    }
    function vf(a) {
      if (null === a)
        return null;
      do
        a = a.return;
      while (a && 5 !== a.tag);
      return a ? a : null;
    }
    function wf(a, b2, c2, d2, e2) {
      for (var f2 = b2._reactName, g2 = []; null !== c2 && c2 !== d2; ) {
        var h2 = c2, k2 = h2.alternate, l2 = h2.stateNode;
        if (null !== k2 && k2 === d2)
          break;
        5 === h2.tag && null !== l2 && (h2 = l2, e2 ? (k2 = Kb(c2, f2), null != k2 && g2.unshift(tf(c2, k2, h2))) : e2 || (k2 = Kb(c2, f2), null != k2 && g2.push(tf(c2, k2, h2))));
        c2 = c2.return;
      }
      0 !== g2.length && a.push({ event: b2, listeners: g2 });
    }
    var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
    function zf(a) {
      return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
    }
    function Af(a, b2, c2) {
      b2 = zf(b2);
      if (zf(a) !== b2 && c2)
        throw Error(p$1(425));
    }
    function Bf() {
    }
    var Cf = null, Df = null;
    function Ef(a, b2) {
      return "textarea" === a || "noscript" === a || "string" === typeof b2.children || "number" === typeof b2.children || "object" === typeof b2.dangerouslySetInnerHTML && null !== b2.dangerouslySetInnerHTML && null != b2.dangerouslySetInnerHTML.__html;
    }
    var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a) {
      return Hf.resolve(null).then(a).catch(If);
    } : Ff;
    function If(a) {
      setTimeout(function() {
        throw a;
      });
    }
    function Kf(a, b2) {
      var c2 = b2, d2 = 0;
      do {
        var e2 = c2.nextSibling;
        a.removeChild(c2);
        if (e2 && 8 === e2.nodeType)
          if (c2 = e2.data, "/$" === c2) {
            if (0 === d2) {
              a.removeChild(e2);
              bd(b2);
              return;
            }
            d2--;
          } else
            "$" !== c2 && "$?" !== c2 && "$!" !== c2 || d2++;
        c2 = e2;
      } while (c2);
      bd(b2);
    }
    function Lf(a) {
      for (; null != a; a = a.nextSibling) {
        var b2 = a.nodeType;
        if (1 === b2 || 3 === b2)
          break;
        if (8 === b2) {
          b2 = a.data;
          if ("$" === b2 || "$!" === b2 || "$?" === b2)
            break;
          if ("/$" === b2)
            return null;
        }
      }
      return a;
    }
    function Mf(a) {
      a = a.previousSibling;
      for (var b2 = 0; a; ) {
        if (8 === a.nodeType) {
          var c2 = a.data;
          if ("$" === c2 || "$!" === c2 || "$?" === c2) {
            if (0 === b2)
              return a;
            b2--;
          } else
            "/$" === c2 && b2++;
        }
        a = a.previousSibling;
      }
      return null;
    }
    var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
    function Wc(a) {
      var b2 = a[Of];
      if (b2)
        return b2;
      for (var c2 = a.parentNode; c2; ) {
        if (b2 = c2[uf] || c2[Of]) {
          c2 = b2.alternate;
          if (null !== b2.child || null !== c2 && null !== c2.child)
            for (a = Mf(a); null !== a; ) {
              if (c2 = a[Of])
                return c2;
              a = Mf(a);
            }
          return b2;
        }
        a = c2;
        c2 = a.parentNode;
      }
      return null;
    }
    function Cb(a) {
      a = a[Of] || a[uf];
      return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
    }
    function ue(a) {
      if (5 === a.tag || 6 === a.tag)
        return a.stateNode;
      throw Error(p$1(33));
    }
    function Db(a) {
      return a[Pf] || null;
    }
    var Sf = [], Tf = -1;
    function Uf(a) {
      return { current: a };
    }
    function E(a) {
      0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
    }
    function G(a, b2) {
      Tf++;
      Sf[Tf] = a.current;
      a.current = b2;
    }
    var Vf = {}, H = Uf(Vf), Wf = Uf(false), Xf = Vf;
    function Yf(a, b2) {
      var c2 = a.type.contextTypes;
      if (!c2)
        return Vf;
      var d2 = a.stateNode;
      if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b2)
        return d2.__reactInternalMemoizedMaskedChildContext;
      var e2 = {}, f2;
      for (f2 in c2)
        e2[f2] = b2[f2];
      d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b2, a.__reactInternalMemoizedMaskedChildContext = e2);
      return e2;
    }
    function Zf(a) {
      a = a.childContextTypes;
      return null !== a && void 0 !== a;
    }
    function $f() {
      E(Wf);
      E(H);
    }
    function ag(a, b2, c2) {
      if (H.current !== Vf)
        throw Error(p$1(168));
      G(H, b2);
      G(Wf, c2);
    }
    function bg(a, b2, c2) {
      var d2 = a.stateNode;
      b2 = b2.childContextTypes;
      if ("function" !== typeof d2.getChildContext)
        return c2;
      d2 = d2.getChildContext();
      for (var e2 in d2)
        if (!(e2 in b2))
          throw Error(p$1(108, Ra(a) || "Unknown", e2));
      return A$1({}, c2, d2);
    }
    function cg(a) {
      a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
      Xf = H.current;
      G(H, a);
      G(Wf, Wf.current);
      return true;
    }
    function dg(a, b2, c2) {
      var d2 = a.stateNode;
      if (!d2)
        throw Error(p$1(169));
      c2 ? (a = bg(a, b2, Xf), d2.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
      G(Wf, c2);
    }
    var eg = null, fg = false, gg = false;
    function hg(a) {
      null === eg ? eg = [a] : eg.push(a);
    }
    function ig(a) {
      fg = true;
      hg(a);
    }
    function jg() {
      if (!gg && null !== eg) {
        gg = true;
        var a = 0, b2 = C;
        try {
          var c2 = eg;
          for (C = 1; a < c2.length; a++) {
            var d2 = c2[a];
            do
              d2 = d2(true);
            while (null !== d2);
          }
          eg = null;
          fg = false;
        } catch (e2) {
          throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e2;
        } finally {
          C = b2, gg = false;
        }
      }
      return null;
    }
    var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
    function tg(a, b2) {
      kg[lg++] = ng;
      kg[lg++] = mg;
      mg = a;
      ng = b2;
    }
    function ug(a, b2, c2) {
      og[pg++] = rg;
      og[pg++] = sg;
      og[pg++] = qg;
      qg = a;
      var d2 = rg;
      a = sg;
      var e2 = 32 - oc(d2) - 1;
      d2 &= ~(1 << e2);
      c2 += 1;
      var f2 = 32 - oc(b2) + e2;
      if (30 < f2) {
        var g2 = e2 - e2 % 5;
        f2 = (d2 & (1 << g2) - 1).toString(32);
        d2 >>= g2;
        e2 -= g2;
        rg = 1 << 32 - oc(b2) + e2 | c2 << e2 | d2;
        sg = f2 + a;
      } else
        rg = 1 << f2 | c2 << e2 | d2, sg = a;
    }
    function vg(a) {
      null !== a.return && (tg(a, 1), ug(a, 1, 0));
    }
    function wg(a) {
      for (; a === mg; )
        mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
      for (; a === qg; )
        qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
    }
    var xg = null, yg = null, I = false, zg = null;
    function Ag(a, b2) {
      var c2 = Bg(5, null, null, 0);
      c2.elementType = "DELETED";
      c2.stateNode = b2;
      c2.return = a;
      b2 = a.deletions;
      null === b2 ? (a.deletions = [c2], a.flags |= 16) : b2.push(c2);
    }
    function Cg(a, b2) {
      switch (a.tag) {
        case 5:
          var c2 = a.type;
          b2 = 1 !== b2.nodeType || c2.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
          return null !== b2 ? (a.stateNode = b2, xg = a, yg = Lf(b2.firstChild), true) : false;
        case 6:
          return b2 = "" === a.pendingProps || 3 !== b2.nodeType ? null : b2, null !== b2 ? (a.stateNode = b2, xg = a, yg = null, true) : false;
        case 13:
          return b2 = 8 !== b2.nodeType ? null : b2, null !== b2 ? (c2 = null !== qg ? { id: rg, overflow: sg } : null, a.memoizedState = { dehydrated: b2, treeContext: c2, retryLane: 1073741824 }, c2 = Bg(18, null, null, 0), c2.stateNode = b2, c2.return = a, a.child = c2, xg = a, yg = null, true) : false;
        default:
          return false;
      }
    }
    function Dg(a) {
      return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
    }
    function Eg(a) {
      if (I) {
        var b2 = yg;
        if (b2) {
          var c2 = b2;
          if (!Cg(a, b2)) {
            if (Dg(a))
              throw Error(p$1(418));
            b2 = Lf(c2.nextSibling);
            var d2 = xg;
            b2 && Cg(a, b2) ? Ag(d2, c2) : (a.flags = a.flags & -4097 | 2, I = false, xg = a);
          }
        } else {
          if (Dg(a))
            throw Error(p$1(418));
          a.flags = a.flags & -4097 | 2;
          I = false;
          xg = a;
        }
      }
    }
    function Fg(a) {
      for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; )
        a = a.return;
      xg = a;
    }
    function Gg(a) {
      if (a !== xg)
        return false;
      if (!I)
        return Fg(a), I = true, false;
      var b2;
      (b2 = 3 !== a.tag) && !(b2 = 5 !== a.tag) && (b2 = a.type, b2 = "head" !== b2 && "body" !== b2 && !Ef(a.type, a.memoizedProps));
      if (b2 && (b2 = yg)) {
        if (Dg(a))
          throw Hg(), Error(p$1(418));
        for (; b2; )
          Ag(a, b2), b2 = Lf(b2.nextSibling);
      }
      Fg(a);
      if (13 === a.tag) {
        a = a.memoizedState;
        a = null !== a ? a.dehydrated : null;
        if (!a)
          throw Error(p$1(317));
        a: {
          a = a.nextSibling;
          for (b2 = 0; a; ) {
            if (8 === a.nodeType) {
              var c2 = a.data;
              if ("/$" === c2) {
                if (0 === b2) {
                  yg = Lf(a.nextSibling);
                  break a;
                }
                b2--;
              } else
                "$" !== c2 && "$!" !== c2 && "$?" !== c2 || b2++;
            }
            a = a.nextSibling;
          }
          yg = null;
        }
      } else
        yg = xg ? Lf(a.stateNode.nextSibling) : null;
      return true;
    }
    function Hg() {
      for (var a = yg; a; )
        a = Lf(a.nextSibling);
    }
    function Ig() {
      yg = xg = null;
      I = false;
    }
    function Jg(a) {
      null === zg ? zg = [a] : zg.push(a);
    }
    var Kg = ua.ReactCurrentBatchConfig;
    function Lg(a, b2) {
      if (a && a.defaultProps) {
        b2 = A$1({}, b2);
        a = a.defaultProps;
        for (var c2 in a)
          void 0 === b2[c2] && (b2[c2] = a[c2]);
        return b2;
      }
      return b2;
    }
    var Mg = Uf(null), Ng = null, Og = null, Pg = null;
    function Qg() {
      Pg = Og = Ng = null;
    }
    function Rg(a) {
      var b2 = Mg.current;
      E(Mg);
      a._currentValue = b2;
    }
    function Sg(a, b2, c2) {
      for (; null !== a; ) {
        var d2 = a.alternate;
        (a.childLanes & b2) !== b2 ? (a.childLanes |= b2, null !== d2 && (d2.childLanes |= b2)) : null !== d2 && (d2.childLanes & b2) !== b2 && (d2.childLanes |= b2);
        if (a === c2)
          break;
        a = a.return;
      }
    }
    function Tg(a, b2) {
      Ng = a;
      Pg = Og = null;
      a = a.dependencies;
      null !== a && null !== a.firstContext && (0 !== (a.lanes & b2) && (Ug = true), a.firstContext = null);
    }
    function Vg(a) {
      var b2 = a._currentValue;
      if (Pg !== a)
        if (a = { context: a, memoizedValue: b2, next: null }, null === Og) {
          if (null === Ng)
            throw Error(p$1(308));
          Og = a;
          Ng.dependencies = { lanes: 0, firstContext: a };
        } else
          Og = Og.next = a;
      return b2;
    }
    var Wg = null;
    function Xg(a) {
      null === Wg ? Wg = [a] : Wg.push(a);
    }
    function Yg(a, b2, c2, d2) {
      var e2 = b2.interleaved;
      null === e2 ? (c2.next = c2, Xg(b2)) : (c2.next = e2.next, e2.next = c2);
      b2.interleaved = c2;
      return Zg(a, d2);
    }
    function Zg(a, b2) {
      a.lanes |= b2;
      var c2 = a.alternate;
      null !== c2 && (c2.lanes |= b2);
      c2 = a;
      for (a = a.return; null !== a; )
        a.childLanes |= b2, c2 = a.alternate, null !== c2 && (c2.childLanes |= b2), c2 = a, a = a.return;
      return 3 === c2.tag ? c2.stateNode : null;
    }
    var $g = false;
    function ah(a) {
      a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
    }
    function bh(a, b2) {
      a = a.updateQueue;
      b2.updateQueue === a && (b2.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
    }
    function ch(a, b2) {
      return { eventTime: a, lane: b2, tag: 0, payload: null, callback: null, next: null };
    }
    function dh(a, b2, c2) {
      var d2 = a.updateQueue;
      if (null === d2)
        return null;
      d2 = d2.shared;
      if (0 !== (K & 2)) {
        var e2 = d2.pending;
        null === e2 ? b2.next = b2 : (b2.next = e2.next, e2.next = b2);
        d2.pending = b2;
        return Zg(a, c2);
      }
      e2 = d2.interleaved;
      null === e2 ? (b2.next = b2, Xg(d2)) : (b2.next = e2.next, e2.next = b2);
      d2.interleaved = b2;
      return Zg(a, c2);
    }
    function eh(a, b2, c2) {
      b2 = b2.updateQueue;
      if (null !== b2 && (b2 = b2.shared, 0 !== (c2 & 4194240))) {
        var d2 = b2.lanes;
        d2 &= a.pendingLanes;
        c2 |= d2;
        b2.lanes = c2;
        Cc(a, c2);
      }
    }
    function fh(a, b2) {
      var c2 = a.updateQueue, d2 = a.alternate;
      if (null !== d2 && (d2 = d2.updateQueue, c2 === d2)) {
        var e2 = null, f2 = null;
        c2 = c2.firstBaseUpdate;
        if (null !== c2) {
          do {
            var g2 = { eventTime: c2.eventTime, lane: c2.lane, tag: c2.tag, payload: c2.payload, callback: c2.callback, next: null };
            null === f2 ? e2 = f2 = g2 : f2 = f2.next = g2;
            c2 = c2.next;
          } while (null !== c2);
          null === f2 ? e2 = f2 = b2 : f2 = f2.next = b2;
        } else
          e2 = f2 = b2;
        c2 = { baseState: d2.baseState, firstBaseUpdate: e2, lastBaseUpdate: f2, shared: d2.shared, effects: d2.effects };
        a.updateQueue = c2;
        return;
      }
      a = c2.lastBaseUpdate;
      null === a ? c2.firstBaseUpdate = b2 : a.next = b2;
      c2.lastBaseUpdate = b2;
    }
    function gh(a, b2, c2, d2) {
      var e2 = a.updateQueue;
      $g = false;
      var f2 = e2.firstBaseUpdate, g2 = e2.lastBaseUpdate, h2 = e2.shared.pending;
      if (null !== h2) {
        e2.shared.pending = null;
        var k2 = h2, l2 = k2.next;
        k2.next = null;
        null === g2 ? f2 = l2 : g2.next = l2;
        g2 = k2;
        var m2 = a.alternate;
        null !== m2 && (m2 = m2.updateQueue, h2 = m2.lastBaseUpdate, h2 !== g2 && (null === h2 ? m2.firstBaseUpdate = l2 : h2.next = l2, m2.lastBaseUpdate = k2));
      }
      if (null !== f2) {
        var q2 = e2.baseState;
        g2 = 0;
        m2 = l2 = k2 = null;
        h2 = f2;
        do {
          var r2 = h2.lane, y2 = h2.eventTime;
          if ((d2 & r2) === r2) {
            null !== m2 && (m2 = m2.next = {
              eventTime: y2,
              lane: 0,
              tag: h2.tag,
              payload: h2.payload,
              callback: h2.callback,
              next: null
            });
            a: {
              var n2 = a, t2 = h2;
              r2 = b2;
              y2 = c2;
              switch (t2.tag) {
                case 1:
                  n2 = t2.payload;
                  if ("function" === typeof n2) {
                    q2 = n2.call(y2, q2, r2);
                    break a;
                  }
                  q2 = n2;
                  break a;
                case 3:
                  n2.flags = n2.flags & -65537 | 128;
                case 0:
                  n2 = t2.payload;
                  r2 = "function" === typeof n2 ? n2.call(y2, q2, r2) : n2;
                  if (null === r2 || void 0 === r2)
                    break a;
                  q2 = A$1({}, q2, r2);
                  break a;
                case 2:
                  $g = true;
              }
            }
            null !== h2.callback && 0 !== h2.lane && (a.flags |= 64, r2 = e2.effects, null === r2 ? e2.effects = [h2] : r2.push(h2));
          } else
            y2 = { eventTime: y2, lane: r2, tag: h2.tag, payload: h2.payload, callback: h2.callback, next: null }, null === m2 ? (l2 = m2 = y2, k2 = q2) : m2 = m2.next = y2, g2 |= r2;
          h2 = h2.next;
          if (null === h2)
            if (h2 = e2.shared.pending, null === h2)
              break;
            else
              r2 = h2, h2 = r2.next, r2.next = null, e2.lastBaseUpdate = r2, e2.shared.pending = null;
        } while (1);
        null === m2 && (k2 = q2);
        e2.baseState = k2;
        e2.firstBaseUpdate = l2;
        e2.lastBaseUpdate = m2;
        b2 = e2.shared.interleaved;
        if (null !== b2) {
          e2 = b2;
          do
            g2 |= e2.lane, e2 = e2.next;
          while (e2 !== b2);
        } else
          null === f2 && (e2.shared.lanes = 0);
        hh |= g2;
        a.lanes = g2;
        a.memoizedState = q2;
      }
    }
    function ih(a, b2, c2) {
      a = b2.effects;
      b2.effects = null;
      if (null !== a)
        for (b2 = 0; b2 < a.length; b2++) {
          var d2 = a[b2], e2 = d2.callback;
          if (null !== e2) {
            d2.callback = null;
            d2 = c2;
            if ("function" !== typeof e2)
              throw Error(p$1(191, e2));
            e2.call(d2);
          }
        }
    }
    var jh = new aa.Component().refs;
    function kh(a, b2, c2, d2) {
      b2 = a.memoizedState;
      c2 = c2(d2, b2);
      c2 = null === c2 || void 0 === c2 ? b2 : A$1({}, b2, c2);
      a.memoizedState = c2;
      0 === a.lanes && (a.updateQueue.baseState = c2);
    }
    var nh = { isMounted: function(a) {
      return (a = a._reactInternals) ? Vb(a) === a : false;
    }, enqueueSetState: function(a, b2, c2) {
      a = a._reactInternals;
      var d2 = L(), e2 = lh(a), f2 = ch(d2, e2);
      f2.payload = b2;
      void 0 !== c2 && null !== c2 && (f2.callback = c2);
      b2 = dh(a, f2, e2);
      null !== b2 && (mh(b2, a, e2, d2), eh(b2, a, e2));
    }, enqueueReplaceState: function(a, b2, c2) {
      a = a._reactInternals;
      var d2 = L(), e2 = lh(a), f2 = ch(d2, e2);
      f2.tag = 1;
      f2.payload = b2;
      void 0 !== c2 && null !== c2 && (f2.callback = c2);
      b2 = dh(a, f2, e2);
      null !== b2 && (mh(b2, a, e2, d2), eh(b2, a, e2));
    }, enqueueForceUpdate: function(a, b2) {
      a = a._reactInternals;
      var c2 = L(), d2 = lh(a), e2 = ch(c2, d2);
      e2.tag = 2;
      void 0 !== b2 && null !== b2 && (e2.callback = b2);
      b2 = dh(a, e2, d2);
      null !== b2 && (mh(b2, a, d2, c2), eh(b2, a, d2));
    } };
    function oh(a, b2, c2, d2, e2, f2, g2) {
      a = a.stateNode;
      return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d2, f2, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !Ie(c2, d2) || !Ie(e2, f2) : true;
    }
    function ph(a, b2, c2) {
      var d2 = false, e2 = Vf;
      var f2 = b2.contextType;
      "object" === typeof f2 && null !== f2 ? f2 = Vg(f2) : (e2 = Zf(b2) ? Xf : H.current, d2 = b2.contextTypes, f2 = (d2 = null !== d2 && void 0 !== d2) ? Yf(a, e2) : Vf);
      b2 = new b2(c2, f2);
      a.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
      b2.updater = nh;
      a.stateNode = b2;
      b2._reactInternals = a;
      d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e2, a.__reactInternalMemoizedMaskedChildContext = f2);
      return b2;
    }
    function qh(a, b2, c2, d2) {
      a = b2.state;
      "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c2, d2);
      "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c2, d2);
      b2.state !== a && nh.enqueueReplaceState(b2, b2.state, null);
    }
    function rh(a, b2, c2, d2) {
      var e2 = a.stateNode;
      e2.props = c2;
      e2.state = a.memoizedState;
      e2.refs = jh;
      ah(a);
      var f2 = b2.contextType;
      "object" === typeof f2 && null !== f2 ? e2.context = Vg(f2) : (f2 = Zf(b2) ? Xf : H.current, e2.context = Yf(a, f2));
      e2.state = a.memoizedState;
      f2 = b2.getDerivedStateFromProps;
      "function" === typeof f2 && (kh(a, b2, f2, c2), e2.state = a.memoizedState);
      "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e2.getSnapshotBeforeUpdate || "function" !== typeof e2.UNSAFE_componentWillMount && "function" !== typeof e2.componentWillMount || (b2 = e2.state, "function" === typeof e2.componentWillMount && e2.componentWillMount(), "function" === typeof e2.UNSAFE_componentWillMount && e2.UNSAFE_componentWillMount(), b2 !== e2.state && nh.enqueueReplaceState(e2, e2.state, null), gh(a, c2, e2, d2), e2.state = a.memoizedState);
      "function" === typeof e2.componentDidMount && (a.flags |= 4194308);
    }
    function sh(a, b2, c2) {
      a = c2.ref;
      if (null !== a && "function" !== typeof a && "object" !== typeof a) {
        if (c2._owner) {
          c2 = c2._owner;
          if (c2) {
            if (1 !== c2.tag)
              throw Error(p$1(309));
            var d2 = c2.stateNode;
          }
          if (!d2)
            throw Error(p$1(147, a));
          var e2 = d2, f2 = "" + a;
          if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === f2)
            return b2.ref;
          b2 = function(a2) {
            var b3 = e2.refs;
            b3 === jh && (b3 = e2.refs = {});
            null === a2 ? delete b3[f2] : b3[f2] = a2;
          };
          b2._stringRef = f2;
          return b2;
        }
        if ("string" !== typeof a)
          throw Error(p$1(284));
        if (!c2._owner)
          throw Error(p$1(290, a));
      }
      return a;
    }
    function th(a, b2) {
      a = Object.prototype.toString.call(b2);
      throw Error(p$1(31, "[object Object]" === a ? "object with keys {" + Object.keys(b2).join(", ") + "}" : a));
    }
    function uh(a) {
      var b2 = a._init;
      return b2(a._payload);
    }
    function vh(a) {
      function b2(b3, c3) {
        if (a) {
          var d3 = b3.deletions;
          null === d3 ? (b3.deletions = [c3], b3.flags |= 16) : d3.push(c3);
        }
      }
      function c2(c3, d3) {
        if (!a)
          return null;
        for (; null !== d3; )
          b2(c3, d3), d3 = d3.sibling;
        return null;
      }
      function d2(a2, b3) {
        for (a2 = /* @__PURE__ */ new Map(); null !== b3; )
          null !== b3.key ? a2.set(b3.key, b3) : a2.set(b3.index, b3), b3 = b3.sibling;
        return a2;
      }
      function e2(a2, b3) {
        a2 = wh(a2, b3);
        a2.index = 0;
        a2.sibling = null;
        return a2;
      }
      function f2(b3, c3, d3) {
        b3.index = d3;
        if (!a)
          return b3.flags |= 1048576, c3;
        d3 = b3.alternate;
        if (null !== d3)
          return d3 = d3.index, d3 < c3 ? (b3.flags |= 2, c3) : d3;
        b3.flags |= 2;
        return c3;
      }
      function g2(b3) {
        a && null === b3.alternate && (b3.flags |= 2);
        return b3;
      }
      function h2(a2, b3, c3, d3) {
        if (null === b3 || 6 !== b3.tag)
          return b3 = xh(c3, a2.mode, d3), b3.return = a2, b3;
        b3 = e2(b3, c3);
        b3.return = a2;
        return b3;
      }
      function k2(a2, b3, c3, d3) {
        var f3 = c3.type;
        if (f3 === ya)
          return m2(a2, b3, c3.props.children, d3, c3.key);
        if (null !== b3 && (b3.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && uh(f3) === b3.type))
          return d3 = e2(b3, c3.props), d3.ref = sh(a2, b3, c3), d3.return = a2, d3;
        d3 = yh(c3.type, c3.key, c3.props, null, a2.mode, d3);
        d3.ref = sh(a2, b3, c3);
        d3.return = a2;
        return d3;
      }
      function l2(a2, b3, c3, d3) {
        if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c3.containerInfo || b3.stateNode.implementation !== c3.implementation)
          return b3 = zh(c3, a2.mode, d3), b3.return = a2, b3;
        b3 = e2(b3, c3.children || []);
        b3.return = a2;
        return b3;
      }
      function m2(a2, b3, c3, d3, f3) {
        if (null === b3 || 7 !== b3.tag)
          return b3 = Ah(c3, a2.mode, d3, f3), b3.return = a2, b3;
        b3 = e2(b3, c3);
        b3.return = a2;
        return b3;
      }
      function q2(a2, b3, c3) {
        if ("string" === typeof b3 && "" !== b3 || "number" === typeof b3)
          return b3 = xh("" + b3, a2.mode, c3), b3.return = a2, b3;
        if ("object" === typeof b3 && null !== b3) {
          switch (b3.$$typeof) {
            case va:
              return c3 = yh(b3.type, b3.key, b3.props, null, a2.mode, c3), c3.ref = sh(a2, null, b3), c3.return = a2, c3;
            case wa:
              return b3 = zh(b3, a2.mode, c3), b3.return = a2, b3;
            case Ha:
              var d3 = b3._init;
              return q2(a2, d3(b3._payload), c3);
          }
          if (eb(b3) || Ka(b3))
            return b3 = Ah(b3, a2.mode, c3, null), b3.return = a2, b3;
          th(a2, b3);
        }
        return null;
      }
      function r2(a2, b3, c3, d3) {
        var e3 = null !== b3 ? b3.key : null;
        if ("string" === typeof c3 && "" !== c3 || "number" === typeof c3)
          return null !== e3 ? null : h2(a2, b3, "" + c3, d3);
        if ("object" === typeof c3 && null !== c3) {
          switch (c3.$$typeof) {
            case va:
              return c3.key === e3 ? k2(a2, b3, c3, d3) : null;
            case wa:
              return c3.key === e3 ? l2(a2, b3, c3, d3) : null;
            case Ha:
              return e3 = c3._init, r2(
                a2,
                b3,
                e3(c3._payload),
                d3
              );
          }
          if (eb(c3) || Ka(c3))
            return null !== e3 ? null : m2(a2, b3, c3, d3, null);
          th(a2, c3);
        }
        return null;
      }
      function y2(a2, b3, c3, d3, e3) {
        if ("string" === typeof d3 && "" !== d3 || "number" === typeof d3)
          return a2 = a2.get(c3) || null, h2(b3, a2, "" + d3, e3);
        if ("object" === typeof d3 && null !== d3) {
          switch (d3.$$typeof) {
            case va:
              return a2 = a2.get(null === d3.key ? c3 : d3.key) || null, k2(b3, a2, d3, e3);
            case wa:
              return a2 = a2.get(null === d3.key ? c3 : d3.key) || null, l2(b3, a2, d3, e3);
            case Ha:
              var f3 = d3._init;
              return y2(a2, b3, c3, f3(d3._payload), e3);
          }
          if (eb(d3) || Ka(d3))
            return a2 = a2.get(c3) || null, m2(b3, a2, d3, e3, null);
          th(b3, d3);
        }
        return null;
      }
      function n2(e3, g3, h3, k3) {
        for (var l3 = null, m3 = null, u2 = g3, w2 = g3 = 0, x2 = null; null !== u2 && w2 < h3.length; w2++) {
          u2.index > w2 ? (x2 = u2, u2 = null) : x2 = u2.sibling;
          var n3 = r2(e3, u2, h3[w2], k3);
          if (null === n3) {
            null === u2 && (u2 = x2);
            break;
          }
          a && u2 && null === n3.alternate && b2(e3, u2);
          g3 = f2(n3, g3, w2);
          null === m3 ? l3 = n3 : m3.sibling = n3;
          m3 = n3;
          u2 = x2;
        }
        if (w2 === h3.length)
          return c2(e3, u2), I && tg(e3, w2), l3;
        if (null === u2) {
          for (; w2 < h3.length; w2++)
            u2 = q2(e3, h3[w2], k3), null !== u2 && (g3 = f2(u2, g3, w2), null === m3 ? l3 = u2 : m3.sibling = u2, m3 = u2);
          I && tg(e3, w2);
          return l3;
        }
        for (u2 = d2(e3, u2); w2 < h3.length; w2++)
          x2 = y2(u2, e3, w2, h3[w2], k3), null !== x2 && (a && null !== x2.alternate && u2.delete(null === x2.key ? w2 : x2.key), g3 = f2(x2, g3, w2), null === m3 ? l3 = x2 : m3.sibling = x2, m3 = x2);
        a && u2.forEach(function(a2) {
          return b2(e3, a2);
        });
        I && tg(e3, w2);
        return l3;
      }
      function t2(e3, g3, h3, k3) {
        var l3 = Ka(h3);
        if ("function" !== typeof l3)
          throw Error(p$1(150));
        h3 = l3.call(h3);
        if (null == h3)
          throw Error(p$1(151));
        for (var u2 = l3 = null, m3 = g3, w2 = g3 = 0, x2 = null, n3 = h3.next(); null !== m3 && !n3.done; w2++, n3 = h3.next()) {
          m3.index > w2 ? (x2 = m3, m3 = null) : x2 = m3.sibling;
          var t3 = r2(e3, m3, n3.value, k3);
          if (null === t3) {
            null === m3 && (m3 = x2);
            break;
          }
          a && m3 && null === t3.alternate && b2(e3, m3);
          g3 = f2(t3, g3, w2);
          null === u2 ? l3 = t3 : u2.sibling = t3;
          u2 = t3;
          m3 = x2;
        }
        if (n3.done)
          return c2(
            e3,
            m3
          ), I && tg(e3, w2), l3;
        if (null === m3) {
          for (; !n3.done; w2++, n3 = h3.next())
            n3 = q2(e3, n3.value, k3), null !== n3 && (g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
          I && tg(e3, w2);
          return l3;
        }
        for (m3 = d2(e3, m3); !n3.done; w2++, n3 = h3.next())
          n3 = y2(m3, e3, w2, n3.value, k3), null !== n3 && (a && null !== n3.alternate && m3.delete(null === n3.key ? w2 : n3.key), g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
        a && m3.forEach(function(a2) {
          return b2(e3, a2);
        });
        I && tg(e3, w2);
        return l3;
      }
      function J2(a2, d3, f3, h3) {
        "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
        if ("object" === typeof f3 && null !== f3) {
          switch (f3.$$typeof) {
            case va:
              a: {
                for (var k3 = f3.key, l3 = d3; null !== l3; ) {
                  if (l3.key === k3) {
                    k3 = f3.type;
                    if (k3 === ya) {
                      if (7 === l3.tag) {
                        c2(a2, l3.sibling);
                        d3 = e2(l3, f3.props.children);
                        d3.return = a2;
                        a2 = d3;
                        break a;
                      }
                    } else if (l3.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && uh(k3) === l3.type) {
                      c2(a2, l3.sibling);
                      d3 = e2(l3, f3.props);
                      d3.ref = sh(a2, l3, f3);
                      d3.return = a2;
                      a2 = d3;
                      break a;
                    }
                    c2(a2, l3);
                    break;
                  } else
                    b2(a2, l3);
                  l3 = l3.sibling;
                }
                f3.type === ya ? (d3 = Ah(f3.props.children, a2.mode, h3, f3.key), d3.return = a2, a2 = d3) : (h3 = yh(f3.type, f3.key, f3.props, null, a2.mode, h3), h3.ref = sh(a2, d3, f3), h3.return = a2, a2 = h3);
              }
              return g2(a2);
            case wa:
              a: {
                for (l3 = f3.key; null !== d3; ) {
                  if (d3.key === l3)
                    if (4 === d3.tag && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                      c2(a2, d3.sibling);
                      d3 = e2(d3, f3.children || []);
                      d3.return = a2;
                      a2 = d3;
                      break a;
                    } else {
                      c2(a2, d3);
                      break;
                    }
                  else
                    b2(a2, d3);
                  d3 = d3.sibling;
                }
                d3 = zh(f3, a2.mode, h3);
                d3.return = a2;
                a2 = d3;
              }
              return g2(a2);
            case Ha:
              return l3 = f3._init, J2(a2, d3, l3(f3._payload), h3);
          }
          if (eb(f3))
            return n2(a2, d3, f3, h3);
          if (Ka(f3))
            return t2(a2, d3, f3, h3);
          th(a2, f3);
        }
        return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d3 && 6 === d3.tag ? (c2(a2, d3.sibling), d3 = e2(d3, f3), d3.return = a2, a2 = d3) : (c2(a2, d3), d3 = xh(f3, a2.mode, h3), d3.return = a2, a2 = d3), g2(a2)) : c2(a2, d3);
      }
      return J2;
    }
    var Bh = vh(true), Ch = vh(false), Dh = {}, Eh = Uf(Dh), Fh = Uf(Dh), Gh = Uf(Dh);
    function Hh(a) {
      if (a === Dh)
        throw Error(p$1(174));
      return a;
    }
    function Ih(a, b2) {
      G(Gh, b2);
      G(Fh, a);
      G(Eh, Dh);
      a = b2.nodeType;
      switch (a) {
        case 9:
        case 11:
          b2 = (b2 = b2.documentElement) ? b2.namespaceURI : lb(null, "");
          break;
        default:
          a = 8 === a ? b2.parentNode : b2, b2 = a.namespaceURI || null, a = a.tagName, b2 = lb(b2, a);
      }
      E(Eh);
      G(Eh, b2);
    }
    function Jh() {
      E(Eh);
      E(Fh);
      E(Gh);
    }
    function Kh(a) {
      Hh(Gh.current);
      var b2 = Hh(Eh.current);
      var c2 = lb(b2, a.type);
      b2 !== c2 && (G(Fh, a), G(Eh, c2));
    }
    function Lh(a) {
      Fh.current === a && (E(Eh), E(Fh));
    }
    var M = Uf(0);
    function Mh(a) {
      for (var b2 = a; null !== b2; ) {
        if (13 === b2.tag) {
          var c2 = b2.memoizedState;
          if (null !== c2 && (c2 = c2.dehydrated, null === c2 || "$?" === c2.data || "$!" === c2.data))
            return b2;
        } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
          if (0 !== (b2.flags & 128))
            return b2;
        } else if (null !== b2.child) {
          b2.child.return = b2;
          b2 = b2.child;
          continue;
        }
        if (b2 === a)
          break;
        for (; null === b2.sibling; ) {
          if (null === b2.return || b2.return === a)
            return null;
          b2 = b2.return;
        }
        b2.sibling.return = b2.return;
        b2 = b2.sibling;
      }
      return null;
    }
    var Nh = [];
    function Oh() {
      for (var a = 0; a < Nh.length; a++)
        Nh[a]._workInProgressVersionPrimary = null;
      Nh.length = 0;
    }
    var Ph = ua.ReactCurrentDispatcher, Qh = ua.ReactCurrentBatchConfig, Rh = 0, N = null, O = null, P = null, Sh = false, Th = false, Uh = 0, Vh = 0;
    function Q() {
      throw Error(p$1(321));
    }
    function Wh(a, b2) {
      if (null === b2)
        return false;
      for (var c2 = 0; c2 < b2.length && c2 < a.length; c2++)
        if (!He(a[c2], b2[c2]))
          return false;
      return true;
    }
    function Xh(a, b2, c2, d2, e2, f2) {
      Rh = f2;
      N = b2;
      b2.memoizedState = null;
      b2.updateQueue = null;
      b2.lanes = 0;
      Ph.current = null === a || null === a.memoizedState ? Yh : Zh;
      a = c2(d2, e2);
      if (Th) {
        f2 = 0;
        do {
          Th = false;
          Uh = 0;
          if (25 <= f2)
            throw Error(p$1(301));
          f2 += 1;
          P = O = null;
          b2.updateQueue = null;
          Ph.current = $h;
          a = c2(d2, e2);
        } while (Th);
      }
      Ph.current = ai;
      b2 = null !== O && null !== O.next;
      Rh = 0;
      P = O = N = null;
      Sh = false;
      if (b2)
        throw Error(p$1(300));
      return a;
    }
    function bi() {
      var a = 0 !== Uh;
      Uh = 0;
      return a;
    }
    function ci() {
      var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      null === P ? N.memoizedState = P = a : P = P.next = a;
      return P;
    }
    function di() {
      if (null === O) {
        var a = N.alternate;
        a = null !== a ? a.memoizedState : null;
      } else
        a = O.next;
      var b2 = null === P ? N.memoizedState : P.next;
      if (null !== b2)
        P = b2, O = a;
      else {
        if (null === a)
          throw Error(p$1(310));
        O = a;
        a = { memoizedState: O.memoizedState, baseState: O.baseState, baseQueue: O.baseQueue, queue: O.queue, next: null };
        null === P ? N.memoizedState = P = a : P = P.next = a;
      }
      return P;
    }
    function ei(a, b2) {
      return "function" === typeof b2 ? b2(a) : b2;
    }
    function fi(a) {
      var b2 = di(), c2 = b2.queue;
      if (null === c2)
        throw Error(p$1(311));
      c2.lastRenderedReducer = a;
      var d2 = O, e2 = d2.baseQueue, f2 = c2.pending;
      if (null !== f2) {
        if (null !== e2) {
          var g2 = e2.next;
          e2.next = f2.next;
          f2.next = g2;
        }
        d2.baseQueue = e2 = f2;
        c2.pending = null;
      }
      if (null !== e2) {
        f2 = e2.next;
        d2 = d2.baseState;
        var h2 = g2 = null, k2 = null, l2 = f2;
        do {
          var m2 = l2.lane;
          if ((Rh & m2) === m2)
            null !== k2 && (k2 = k2.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d2 = l2.hasEagerState ? l2.eagerState : a(d2, l2.action);
          else {
            var q2 = {
              lane: m2,
              action: l2.action,
              hasEagerState: l2.hasEagerState,
              eagerState: l2.eagerState,
              next: null
            };
            null === k2 ? (h2 = k2 = q2, g2 = d2) : k2 = k2.next = q2;
            N.lanes |= m2;
            hh |= m2;
          }
          l2 = l2.next;
        } while (null !== l2 && l2 !== f2);
        null === k2 ? g2 = d2 : k2.next = h2;
        He(d2, b2.memoizedState) || (Ug = true);
        b2.memoizedState = d2;
        b2.baseState = g2;
        b2.baseQueue = k2;
        c2.lastRenderedState = d2;
      }
      a = c2.interleaved;
      if (null !== a) {
        e2 = a;
        do
          f2 = e2.lane, N.lanes |= f2, hh |= f2, e2 = e2.next;
        while (e2 !== a);
      } else
        null === e2 && (c2.lanes = 0);
      return [b2.memoizedState, c2.dispatch];
    }
    function gi(a) {
      var b2 = di(), c2 = b2.queue;
      if (null === c2)
        throw Error(p$1(311));
      c2.lastRenderedReducer = a;
      var d2 = c2.dispatch, e2 = c2.pending, f2 = b2.memoizedState;
      if (null !== e2) {
        c2.pending = null;
        var g2 = e2 = e2.next;
        do
          f2 = a(f2, g2.action), g2 = g2.next;
        while (g2 !== e2);
        He(f2, b2.memoizedState) || (Ug = true);
        b2.memoizedState = f2;
        null === b2.baseQueue && (b2.baseState = f2);
        c2.lastRenderedState = f2;
      }
      return [f2, d2];
    }
    function hi() {
    }
    function ii(a, b2) {
      var c2 = N, d2 = di(), e2 = b2(), f2 = !He(d2.memoizedState, e2);
      f2 && (d2.memoizedState = e2, Ug = true);
      d2 = d2.queue;
      ji(ki.bind(null, c2, d2, a), [a]);
      if (d2.getSnapshot !== b2 || f2 || null !== P && P.memoizedState.tag & 1) {
        c2.flags |= 2048;
        li(9, mi.bind(null, c2, d2, e2, b2), void 0, null);
        if (null === R)
          throw Error(p$1(349));
        0 !== (Rh & 30) || ni(c2, b2, e2);
      }
      return e2;
    }
    function ni(a, b2, c2) {
      a.flags |= 16384;
      a = { getSnapshot: b2, value: c2 };
      b2 = N.updateQueue;
      null === b2 ? (b2 = { lastEffect: null, stores: null }, N.updateQueue = b2, b2.stores = [a]) : (c2 = b2.stores, null === c2 ? b2.stores = [a] : c2.push(a));
    }
    function mi(a, b2, c2, d2) {
      b2.value = c2;
      b2.getSnapshot = d2;
      oi(b2) && pi(a);
    }
    function ki(a, b2, c2) {
      return c2(function() {
        oi(b2) && pi(a);
      });
    }
    function oi(a) {
      var b2 = a.getSnapshot;
      a = a.value;
      try {
        var c2 = b2();
        return !He(a, c2);
      } catch (d2) {
        return true;
      }
    }
    function pi(a) {
      var b2 = Zg(a, 1);
      null !== b2 && mh(b2, a, 1, -1);
    }
    function qi(a) {
      var b2 = ci();
      "function" === typeof a && (a = a());
      b2.memoizedState = b2.baseState = a;
      a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: ei, lastRenderedState: a };
      b2.queue = a;
      a = a.dispatch = ri.bind(null, N, a);
      return [b2.memoizedState, a];
    }
    function li(a, b2, c2, d2) {
      a = { tag: a, create: b2, destroy: c2, deps: d2, next: null };
      b2 = N.updateQueue;
      null === b2 ? (b2 = { lastEffect: null, stores: null }, N.updateQueue = b2, b2.lastEffect = a.next = a) : (c2 = b2.lastEffect, null === c2 ? b2.lastEffect = a.next = a : (d2 = c2.next, c2.next = a, a.next = d2, b2.lastEffect = a));
      return a;
    }
    function si() {
      return di().memoizedState;
    }
    function ti(a, b2, c2, d2) {
      var e2 = ci();
      N.flags |= a;
      e2.memoizedState = li(1 | b2, c2, void 0, void 0 === d2 ? null : d2);
    }
    function ui(a, b2, c2, d2) {
      var e2 = di();
      d2 = void 0 === d2 ? null : d2;
      var f2 = void 0;
      if (null !== O) {
        var g2 = O.memoizedState;
        f2 = g2.destroy;
        if (null !== d2 && Wh(d2, g2.deps)) {
          e2.memoizedState = li(b2, c2, f2, d2);
          return;
        }
      }
      N.flags |= a;
      e2.memoizedState = li(1 | b2, c2, f2, d2);
    }
    function vi(a, b2) {
      return ti(8390656, 8, a, b2);
    }
    function ji(a, b2) {
      return ui(2048, 8, a, b2);
    }
    function wi(a, b2) {
      return ui(4, 2, a, b2);
    }
    function xi(a, b2) {
      return ui(4, 4, a, b2);
    }
    function yi(a, b2) {
      if ("function" === typeof b2)
        return a = a(), b2(a), function() {
          b2(null);
        };
      if (null !== b2 && void 0 !== b2)
        return a = a(), b2.current = a, function() {
          b2.current = null;
        };
    }
    function zi(a, b2, c2) {
      c2 = null !== c2 && void 0 !== c2 ? c2.concat([a]) : null;
      return ui(4, 4, yi.bind(null, b2, a), c2);
    }
    function Ai() {
    }
    function Bi(a, b2) {
      var c2 = di();
      b2 = void 0 === b2 ? null : b2;
      var d2 = c2.memoizedState;
      if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
        return d2[0];
      c2.memoizedState = [a, b2];
      return a;
    }
    function Ci(a, b2) {
      var c2 = di();
      b2 = void 0 === b2 ? null : b2;
      var d2 = c2.memoizedState;
      if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
        return d2[0];
      a = a();
      c2.memoizedState = [a, b2];
      return a;
    }
    function Di(a, b2, c2) {
      if (0 === (Rh & 21))
        return a.baseState && (a.baseState = false, Ug = true), a.memoizedState = c2;
      He(c2, b2) || (c2 = yc(), N.lanes |= c2, hh |= c2, a.baseState = true);
      return b2;
    }
    function Ei(a, b2) {
      var c2 = C;
      C = 0 !== c2 && 4 > c2 ? c2 : 4;
      a(true);
      var d2 = Qh.transition;
      Qh.transition = {};
      try {
        a(false), b2();
      } finally {
        C = c2, Qh.transition = d2;
      }
    }
    function Fi() {
      return di().memoizedState;
    }
    function Gi(a, b2, c2) {
      var d2 = lh(a);
      c2 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
      if (Hi(a))
        Ii(b2, c2);
      else if (c2 = Yg(a, b2, c2, d2), null !== c2) {
        var e2 = L();
        mh(c2, a, d2, e2);
        Ji(c2, b2, d2);
      }
    }
    function ri(a, b2, c2) {
      var d2 = lh(a), e2 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
      if (Hi(a))
        Ii(b2, e2);
      else {
        var f2 = a.alternate;
        if (0 === a.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b2.lastRenderedReducer, null !== f2))
          try {
            var g2 = b2.lastRenderedState, h2 = f2(g2, c2);
            e2.hasEagerState = true;
            e2.eagerState = h2;
            if (He(h2, g2)) {
              var k2 = b2.interleaved;
              null === k2 ? (e2.next = e2, Xg(b2)) : (e2.next = k2.next, k2.next = e2);
              b2.interleaved = e2;
              return;
            }
          } catch (l2) {
          } finally {
          }
        c2 = Yg(a, b2, e2, d2);
        null !== c2 && (e2 = L(), mh(c2, a, d2, e2), Ji(c2, b2, d2));
      }
    }
    function Hi(a) {
      var b2 = a.alternate;
      return a === N || null !== b2 && b2 === N;
    }
    function Ii(a, b2) {
      Th = Sh = true;
      var c2 = a.pending;
      null === c2 ? b2.next = b2 : (b2.next = c2.next, c2.next = b2);
      a.pending = b2;
    }
    function Ji(a, b2, c2) {
      if (0 !== (c2 & 4194240)) {
        var d2 = b2.lanes;
        d2 &= a.pendingLanes;
        c2 |= d2;
        b2.lanes = c2;
        Cc(a, c2);
      }
    }
    var ai = { readContext: Vg, useCallback: Q, useContext: Q, useEffect: Q, useImperativeHandle: Q, useInsertionEffect: Q, useLayoutEffect: Q, useMemo: Q, useReducer: Q, useRef: Q, useState: Q, useDebugValue: Q, useDeferredValue: Q, useTransition: Q, useMutableSource: Q, useSyncExternalStore: Q, useId: Q, unstable_isNewReconciler: false }, Yh = { readContext: Vg, useCallback: function(a, b2) {
      ci().memoizedState = [a, void 0 === b2 ? null : b2];
      return a;
    }, useContext: Vg, useEffect: vi, useImperativeHandle: function(a, b2, c2) {
      c2 = null !== c2 && void 0 !== c2 ? c2.concat([a]) : null;
      return ti(
        4194308,
        4,
        yi.bind(null, b2, a),
        c2
      );
    }, useLayoutEffect: function(a, b2) {
      return ti(4194308, 4, a, b2);
    }, useInsertionEffect: function(a, b2) {
      return ti(4, 2, a, b2);
    }, useMemo: function(a, b2) {
      var c2 = ci();
      b2 = void 0 === b2 ? null : b2;
      a = a();
      c2.memoizedState = [a, b2];
      return a;
    }, useReducer: function(a, b2, c2) {
      var d2 = ci();
      b2 = void 0 !== c2 ? c2(b2) : b2;
      d2.memoizedState = d2.baseState = b2;
      a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b2 };
      d2.queue = a;
      a = a.dispatch = Gi.bind(null, N, a);
      return [d2.memoizedState, a];
    }, useRef: function(a) {
      var b2 = ci();
      a = { current: a };
      return b2.memoizedState = a;
    }, useState: qi, useDebugValue: Ai, useDeferredValue: function(a) {
      return ci().memoizedState = a;
    }, useTransition: function() {
      var a = qi(false), b2 = a[0];
      a = Ei.bind(null, a[1]);
      ci().memoizedState = a;
      return [b2, a];
    }, useMutableSource: function() {
    }, useSyncExternalStore: function(a, b2, c2) {
      var d2 = N, e2 = ci();
      if (I) {
        if (void 0 === c2)
          throw Error(p$1(407));
        c2 = c2();
      } else {
        c2 = b2();
        if (null === R)
          throw Error(p$1(349));
        0 !== (Rh & 30) || ni(d2, b2, c2);
      }
      e2.memoizedState = c2;
      var f2 = { value: c2, getSnapshot: b2 };
      e2.queue = f2;
      vi(ki.bind(
        null,
        d2,
        f2,
        a
      ), [a]);
      d2.flags |= 2048;
      li(9, mi.bind(null, d2, f2, c2, b2), void 0, null);
      return c2;
    }, useId: function() {
      var a = ci(), b2 = R.identifierPrefix;
      if (I) {
        var c2 = sg;
        var d2 = rg;
        c2 = (d2 & ~(1 << 32 - oc(d2) - 1)).toString(32) + c2;
        b2 = ":" + b2 + "R" + c2;
        c2 = Uh++;
        0 < c2 && (b2 += "H" + c2.toString(32));
        b2 += ":";
      } else
        c2 = Vh++, b2 = ":" + b2 + "r" + c2.toString(32) + ":";
      return a.memoizedState = b2;
    }, unstable_isNewReconciler: false }, Zh = {
      readContext: Vg,
      useCallback: Bi,
      useContext: Vg,
      useEffect: ji,
      useImperativeHandle: zi,
      useInsertionEffect: wi,
      useLayoutEffect: xi,
      useMemo: Ci,
      useReducer: fi,
      useRef: si,
      useState: function() {
        return fi(ei);
      },
      useDebugValue: Ai,
      useDeferredValue: function(a) {
        var b2 = di();
        return Di(b2, O.memoizedState, a);
      },
      useTransition: function() {
        var a = fi(ei)[0], b2 = di().memoizedState;
        return [a, b2];
      },
      useMutableSource: hi,
      useSyncExternalStore: ii,
      useId: Fi,
      unstable_isNewReconciler: false
    }, $h = { readContext: Vg, useCallback: Bi, useContext: Vg, useEffect: ji, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi, useMemo: Ci, useReducer: gi, useRef: si, useState: function() {
      return gi(ei);
    }, useDebugValue: Ai, useDeferredValue: function(a) {
      var b2 = di();
      return null === O ? b2.memoizedState = a : Di(b2, O.memoizedState, a);
    }, useTransition: function() {
      var a = gi(ei)[0], b2 = di().memoizedState;
      return [a, b2];
    }, useMutableSource: hi, useSyncExternalStore: ii, useId: Fi, unstable_isNewReconciler: false };
    function Ki(a, b2) {
      try {
        var c2 = "", d2 = b2;
        do
          c2 += Pa(d2), d2 = d2.return;
        while (d2);
        var e2 = c2;
      } catch (f2) {
        e2 = "\nError generating stack: " + f2.message + "\n" + f2.stack;
      }
      return { value: a, source: b2, stack: e2, digest: null };
    }
    function Li(a, b2, c2) {
      return { value: a, source: null, stack: null != c2 ? c2 : null, digest: null != b2 ? b2 : null };
    }
    function Mi(a, b2) {
      try {
        console.error(b2.value);
      } catch (c2) {
        setTimeout(function() {
          throw c2;
        });
      }
    }
    var Ni = "function" === typeof WeakMap ? WeakMap : Map;
    function Oi(a, b2, c2) {
      c2 = ch(-1, c2);
      c2.tag = 3;
      c2.payload = { element: null };
      var d2 = b2.value;
      c2.callback = function() {
        Pi || (Pi = true, Qi = d2);
        Mi(a, b2);
      };
      return c2;
    }
    function Ri(a, b2, c2) {
      c2 = ch(-1, c2);
      c2.tag = 3;
      var d2 = a.type.getDerivedStateFromError;
      if ("function" === typeof d2) {
        var e2 = b2.value;
        c2.payload = function() {
          return d2(e2);
        };
        c2.callback = function() {
          Mi(a, b2);
        };
      }
      var f2 = a.stateNode;
      null !== f2 && "function" === typeof f2.componentDidCatch && (c2.callback = function() {
        Mi(a, b2);
        "function" !== typeof d2 && (null === Si ? Si = /* @__PURE__ */ new Set([this]) : Si.add(this));
        var c3 = b2.stack;
        this.componentDidCatch(b2.value, { componentStack: null !== c3 ? c3 : "" });
      });
      return c2;
    }
    function Ti(a, b2, c2) {
      var d2 = a.pingCache;
      if (null === d2) {
        d2 = a.pingCache = new Ni();
        var e2 = /* @__PURE__ */ new Set();
        d2.set(b2, e2);
      } else
        e2 = d2.get(b2), void 0 === e2 && (e2 = /* @__PURE__ */ new Set(), d2.set(b2, e2));
      e2.has(c2) || (e2.add(c2), a = Ui.bind(null, a, b2, c2), b2.then(a, a));
    }
    function Vi(a) {
      do {
        var b2;
        if (b2 = 13 === a.tag)
          b2 = a.memoizedState, b2 = null !== b2 ? null !== b2.dehydrated ? true : false : true;
        if (b2)
          return a;
        a = a.return;
      } while (null !== a);
      return null;
    }
    function Wi(a, b2, c2, d2, e2) {
      if (0 === (a.mode & 1))
        return a === b2 ? a.flags |= 65536 : (a.flags |= 128, c2.flags |= 131072, c2.flags &= -52805, 1 === c2.tag && (null === c2.alternate ? c2.tag = 17 : (b2 = ch(-1, 1), b2.tag = 2, dh(c2, b2, 1))), c2.lanes |= 1), a;
      a.flags |= 65536;
      a.lanes = e2;
      return a;
    }
    var Xi = ua.ReactCurrentOwner, Ug = false;
    function Yi(a, b2, c2, d2) {
      b2.child = null === a ? Ch(b2, null, c2, d2) : Bh(b2, a.child, c2, d2);
    }
    function Zi(a, b2, c2, d2, e2) {
      c2 = c2.render;
      var f2 = b2.ref;
      Tg(b2, e2);
      d2 = Xh(a, b2, c2, d2, f2, e2);
      c2 = bi();
      if (null !== a && !Ug)
        return b2.updateQueue = a.updateQueue, b2.flags &= -2053, a.lanes &= ~e2, $i(a, b2, e2);
      I && c2 && vg(b2);
      b2.flags |= 1;
      Yi(a, b2, d2, e2);
      return b2.child;
    }
    function aj(a, b2, c2, d2, e2) {
      if (null === a) {
        var f2 = c2.type;
        if ("function" === typeof f2 && !bj(f2) && void 0 === f2.defaultProps && null === c2.compare && void 0 === c2.defaultProps)
          return b2.tag = 15, b2.type = f2, cj(a, b2, f2, d2, e2);
        a = yh(c2.type, null, d2, b2, b2.mode, e2);
        a.ref = b2.ref;
        a.return = b2;
        return b2.child = a;
      }
      f2 = a.child;
      if (0 === (a.lanes & e2)) {
        var g2 = f2.memoizedProps;
        c2 = c2.compare;
        c2 = null !== c2 ? c2 : Ie;
        if (c2(g2, d2) && a.ref === b2.ref)
          return $i(a, b2, e2);
      }
      b2.flags |= 1;
      a = wh(f2, d2);
      a.ref = b2.ref;
      a.return = b2;
      return b2.child = a;
    }
    function cj(a, b2, c2, d2, e2) {
      if (null !== a) {
        var f2 = a.memoizedProps;
        if (Ie(f2, d2) && a.ref === b2.ref)
          if (Ug = false, b2.pendingProps = d2 = f2, 0 !== (a.lanes & e2))
            0 !== (a.flags & 131072) && (Ug = true);
          else
            return b2.lanes = a.lanes, $i(a, b2, e2);
      }
      return dj(a, b2, c2, d2, e2);
    }
    function ej(a, b2, c2) {
      var d2 = b2.pendingProps, e2 = d2.children, f2 = null !== a ? a.memoizedState : null;
      if ("hidden" === d2.mode)
        if (0 === (b2.mode & 1))
          b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(fj, gj), gj |= c2;
        else {
          if (0 === (c2 & 1073741824))
            return a = null !== f2 ? f2.baseLanes | c2 : c2, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b2.updateQueue = null, G(fj, gj), gj |= a, null;
          b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
          d2 = null !== f2 ? f2.baseLanes : c2;
          G(fj, gj);
          gj |= d2;
        }
      else
        null !== f2 ? (d2 = f2.baseLanes | c2, b2.memoizedState = null) : d2 = c2, G(fj, gj), gj |= d2;
      Yi(a, b2, e2, c2);
      return b2.child;
    }
    function hj(a, b2) {
      var c2 = b2.ref;
      if (null === a && null !== c2 || null !== a && a.ref !== c2)
        b2.flags |= 512, b2.flags |= 2097152;
    }
    function dj(a, b2, c2, d2, e2) {
      var f2 = Zf(c2) ? Xf : H.current;
      f2 = Yf(b2, f2);
      Tg(b2, e2);
      c2 = Xh(a, b2, c2, d2, f2, e2);
      d2 = bi();
      if (null !== a && !Ug)
        return b2.updateQueue = a.updateQueue, b2.flags &= -2053, a.lanes &= ~e2, $i(a, b2, e2);
      I && d2 && vg(b2);
      b2.flags |= 1;
      Yi(a, b2, c2, e2);
      return b2.child;
    }
    function ij(a, b2, c2, d2, e2) {
      if (Zf(c2)) {
        var f2 = true;
        cg(b2);
      } else
        f2 = false;
      Tg(b2, e2);
      if (null === b2.stateNode)
        jj(a, b2), ph(b2, c2, d2), rh(b2, c2, d2, e2), d2 = true;
      else if (null === a) {
        var g2 = b2.stateNode, h2 = b2.memoizedProps;
        g2.props = h2;
        var k2 = g2.context, l2 = c2.contextType;
        "object" === typeof l2 && null !== l2 ? l2 = Vg(l2) : (l2 = Zf(c2) ? Xf : H.current, l2 = Yf(b2, l2));
        var m2 = c2.getDerivedStateFromProps, q2 = "function" === typeof m2 || "function" === typeof g2.getSnapshotBeforeUpdate;
        q2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== d2 || k2 !== l2) && qh(b2, g2, d2, l2);
        $g = false;
        var r2 = b2.memoizedState;
        g2.state = r2;
        gh(b2, d2, g2, e2);
        k2 = b2.memoizedState;
        h2 !== d2 || r2 !== k2 || Wf.current || $g ? ("function" === typeof m2 && (kh(b2, c2, m2, d2), k2 = b2.memoizedState), (h2 = $g || oh(b2, c2, h2, d2, r2, k2, l2)) ? (q2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b2.flags |= 4194308)) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), b2.memoizedProps = d2, b2.memoizedState = k2), g2.props = d2, g2.state = k2, g2.context = l2, d2 = h2) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), d2 = false);
      } else {
        g2 = b2.stateNode;
        bh(a, b2);
        h2 = b2.memoizedProps;
        l2 = b2.type === b2.elementType ? h2 : Lg(b2.type, h2);
        g2.props = l2;
        q2 = b2.pendingProps;
        r2 = g2.context;
        k2 = c2.contextType;
        "object" === typeof k2 && null !== k2 ? k2 = Vg(k2) : (k2 = Zf(c2) ? Xf : H.current, k2 = Yf(b2, k2));
        var y2 = c2.getDerivedStateFromProps;
        (m2 = "function" === typeof y2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== q2 || r2 !== k2) && qh(b2, g2, d2, k2);
        $g = false;
        r2 = b2.memoizedState;
        g2.state = r2;
        gh(b2, d2, g2, e2);
        var n2 = b2.memoizedState;
        h2 !== q2 || r2 !== n2 || Wf.current || $g ? ("function" === typeof y2 && (kh(b2, c2, y2, d2), n2 = b2.memoizedState), (l2 = $g || oh(b2, c2, l2, d2, r2, n2, k2) || false) ? (m2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(d2, n2, k2), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d2, n2, k2)), "function" === typeof g2.componentDidUpdate && (b2.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b2.flags |= 1024)) : ("function" !== typeof g2.componentDidUpdate || h2 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 1024), b2.memoizedProps = d2, b2.memoizedState = n2), g2.props = d2, g2.state = n2, g2.context = k2, d2 = l2) : ("function" !== typeof g2.componentDidUpdate || h2 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 1024), d2 = false);
      }
      return kj(a, b2, c2, d2, f2, e2);
    }
    function kj(a, b2, c2, d2, e2, f2) {
      hj(a, b2);
      var g2 = 0 !== (b2.flags & 128);
      if (!d2 && !g2)
        return e2 && dg(b2, c2, false), $i(a, b2, f2);
      d2 = b2.stateNode;
      Xi.current = b2;
      var h2 = g2 && "function" !== typeof c2.getDerivedStateFromError ? null : d2.render();
      b2.flags |= 1;
      null !== a && g2 ? (b2.child = Bh(b2, a.child, null, f2), b2.child = Bh(b2, null, h2, f2)) : Yi(a, b2, h2, f2);
      b2.memoizedState = d2.state;
      e2 && dg(b2, c2, true);
      return b2.child;
    }
    function lj(a) {
      var b2 = a.stateNode;
      b2.pendingContext ? ag(a, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && ag(a, b2.context, false);
      Ih(a, b2.containerInfo);
    }
    function mj(a, b2, c2, d2, e2) {
      Ig();
      Jg(e2);
      b2.flags |= 256;
      Yi(a, b2, c2, d2);
      return b2.child;
    }
    var nj = { dehydrated: null, treeContext: null, retryLane: 0 };
    function oj(a) {
      return { baseLanes: a, cachePool: null, transitions: null };
    }
    function pj(a, b2, c2) {
      var d2 = b2.pendingProps, e2 = M.current, f2 = false, g2 = 0 !== (b2.flags & 128), h2;
      (h2 = g2) || (h2 = null !== a && null === a.memoizedState ? false : 0 !== (e2 & 2));
      if (h2)
        f2 = true, b2.flags &= -129;
      else if (null === a || null !== a.memoizedState)
        e2 |= 1;
      G(M, e2 & 1);
      if (null === a) {
        Eg(b2);
        a = b2.memoizedState;
        if (null !== a && (a = a.dehydrated, null !== a))
          return 0 === (b2.mode & 1) ? b2.lanes = 1 : "$!" === a.data ? b2.lanes = 8 : b2.lanes = 1073741824, null;
        g2 = d2.children;
        a = d2.fallback;
        return f2 ? (d2 = b2.mode, f2 = b2.child, g2 = { mode: "hidden", children: g2 }, 0 === (d2 & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g2) : f2 = qj(g2, d2, 0, null), a = Ah(a, d2, c2, null), f2.return = b2, a.return = b2, f2.sibling = a, b2.child = f2, b2.child.memoizedState = oj(c2), b2.memoizedState = nj, a) : rj(b2, g2);
      }
      e2 = a.memoizedState;
      if (null !== e2 && (h2 = e2.dehydrated, null !== h2))
        return sj(a, b2, g2, d2, h2, e2, c2);
      if (f2) {
        f2 = d2.fallback;
        g2 = b2.mode;
        e2 = a.child;
        h2 = e2.sibling;
        var k2 = { mode: "hidden", children: d2.children };
        0 === (g2 & 1) && b2.child !== e2 ? (d2 = b2.child, d2.childLanes = 0, d2.pendingProps = k2, b2.deletions = null) : (d2 = wh(e2, k2), d2.subtreeFlags = e2.subtreeFlags & 14680064);
        null !== h2 ? f2 = wh(h2, f2) : (f2 = Ah(f2, g2, c2, null), f2.flags |= 2);
        f2.return = b2;
        d2.return = b2;
        d2.sibling = f2;
        b2.child = d2;
        d2 = f2;
        f2 = b2.child;
        g2 = a.child.memoizedState;
        g2 = null === g2 ? oj(c2) : { baseLanes: g2.baseLanes | c2, cachePool: null, transitions: g2.transitions };
        f2.memoizedState = g2;
        f2.childLanes = a.childLanes & ~c2;
        b2.memoizedState = nj;
        return d2;
      }
      f2 = a.child;
      a = f2.sibling;
      d2 = wh(f2, { mode: "visible", children: d2.children });
      0 === (b2.mode & 1) && (d2.lanes = c2);
      d2.return = b2;
      d2.sibling = null;
      null !== a && (c2 = b2.deletions, null === c2 ? (b2.deletions = [a], b2.flags |= 16) : c2.push(a));
      b2.child = d2;
      b2.memoizedState = null;
      return d2;
    }
    function rj(a, b2) {
      b2 = qj({ mode: "visible", children: b2 }, a.mode, 0, null);
      b2.return = a;
      return a.child = b2;
    }
    function tj(a, b2, c2, d2) {
      null !== d2 && Jg(d2);
      Bh(b2, a.child, null, c2);
      a = rj(b2, b2.pendingProps.children);
      a.flags |= 2;
      b2.memoizedState = null;
      return a;
    }
    function sj(a, b2, c2, d2, e2, f2, g2) {
      if (c2) {
        if (b2.flags & 256)
          return b2.flags &= -257, d2 = Li(Error(p$1(422))), tj(a, b2, g2, d2);
        if (null !== b2.memoizedState)
          return b2.child = a.child, b2.flags |= 128, null;
        f2 = d2.fallback;
        e2 = b2.mode;
        d2 = qj({ mode: "visible", children: d2.children }, e2, 0, null);
        f2 = Ah(f2, e2, g2, null);
        f2.flags |= 2;
        d2.return = b2;
        f2.return = b2;
        d2.sibling = f2;
        b2.child = d2;
        0 !== (b2.mode & 1) && Bh(b2, a.child, null, g2);
        b2.child.memoizedState = oj(g2);
        b2.memoizedState = nj;
        return f2;
      }
      if (0 === (b2.mode & 1))
        return tj(a, b2, g2, null);
      if ("$!" === e2.data) {
        d2 = e2.nextSibling && e2.nextSibling.dataset;
        if (d2)
          var h2 = d2.dgst;
        d2 = h2;
        f2 = Error(p$1(419));
        d2 = Li(f2, d2, void 0);
        return tj(a, b2, g2, d2);
      }
      h2 = 0 !== (g2 & a.childLanes);
      if (Ug || h2) {
        d2 = R;
        if (null !== d2) {
          switch (g2 & -g2) {
            case 4:
              e2 = 2;
              break;
            case 16:
              e2 = 8;
              break;
            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
              e2 = 32;
              break;
            case 536870912:
              e2 = 268435456;
              break;
            default:
              e2 = 0;
          }
          e2 = 0 !== (e2 & (d2.suspendedLanes | g2)) ? 0 : e2;
          0 !== e2 && e2 !== f2.retryLane && (f2.retryLane = e2, Zg(a, e2), mh(d2, a, e2, -1));
        }
        uj();
        d2 = Li(Error(p$1(421)));
        return tj(a, b2, g2, d2);
      }
      if ("$?" === e2.data)
        return b2.flags |= 128, b2.child = a.child, b2 = vj.bind(null, a), e2._reactRetry = b2, null;
      a = f2.treeContext;
      yg = Lf(e2.nextSibling);
      xg = b2;
      I = true;
      zg = null;
      null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b2);
      b2 = rj(b2, d2.children);
      b2.flags |= 4096;
      return b2;
    }
    function wj(a, b2, c2) {
      a.lanes |= b2;
      var d2 = a.alternate;
      null !== d2 && (d2.lanes |= b2);
      Sg(a.return, b2, c2);
    }
    function xj(a, b2, c2, d2, e2) {
      var f2 = a.memoizedState;
      null === f2 ? a.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d2, tail: c2, tailMode: e2 } : (f2.isBackwards = b2, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d2, f2.tail = c2, f2.tailMode = e2);
    }
    function yj(a, b2, c2) {
      var d2 = b2.pendingProps, e2 = d2.revealOrder, f2 = d2.tail;
      Yi(a, b2, d2.children, c2);
      d2 = M.current;
      if (0 !== (d2 & 2))
        d2 = d2 & 1 | 2, b2.flags |= 128;
      else {
        if (null !== a && 0 !== (a.flags & 128))
          a:
            for (a = b2.child; null !== a; ) {
              if (13 === a.tag)
                null !== a.memoizedState && wj(a, c2, b2);
              else if (19 === a.tag)
                wj(a, c2, b2);
              else if (null !== a.child) {
                a.child.return = a;
                a = a.child;
                continue;
              }
              if (a === b2)
                break a;
              for (; null === a.sibling; ) {
                if (null === a.return || a.return === b2)
                  break a;
                a = a.return;
              }
              a.sibling.return = a.return;
              a = a.sibling;
            }
        d2 &= 1;
      }
      G(M, d2);
      if (0 === (b2.mode & 1))
        b2.memoizedState = null;
      else
        switch (e2) {
          case "forwards":
            c2 = b2.child;
            for (e2 = null; null !== c2; )
              a = c2.alternate, null !== a && null === Mh(a) && (e2 = c2), c2 = c2.sibling;
            c2 = e2;
            null === c2 ? (e2 = b2.child, b2.child = null) : (e2 = c2.sibling, c2.sibling = null);
            xj(b2, false, e2, c2, f2);
            break;
          case "backwards":
            c2 = null;
            e2 = b2.child;
            for (b2.child = null; null !== e2; ) {
              a = e2.alternate;
              if (null !== a && null === Mh(a)) {
                b2.child = e2;
                break;
              }
              a = e2.sibling;
              e2.sibling = c2;
              c2 = e2;
              e2 = a;
            }
            xj(b2, true, c2, null, f2);
            break;
          case "together":
            xj(b2, false, null, null, void 0);
            break;
          default:
            b2.memoizedState = null;
        }
      return b2.child;
    }
    function jj(a, b2) {
      0 === (b2.mode & 1) && null !== a && (a.alternate = null, b2.alternate = null, b2.flags |= 2);
    }
    function $i(a, b2, c2) {
      null !== a && (b2.dependencies = a.dependencies);
      hh |= b2.lanes;
      if (0 === (c2 & b2.childLanes))
        return null;
      if (null !== a && b2.child !== a.child)
        throw Error(p$1(153));
      if (null !== b2.child) {
        a = b2.child;
        c2 = wh(a, a.pendingProps);
        b2.child = c2;
        for (c2.return = b2; null !== a.sibling; )
          a = a.sibling, c2 = c2.sibling = wh(a, a.pendingProps), c2.return = b2;
        c2.sibling = null;
      }
      return b2.child;
    }
    function zj(a, b2, c2) {
      switch (b2.tag) {
        case 3:
          lj(b2);
          Ig();
          break;
        case 5:
          Kh(b2);
          break;
        case 1:
          Zf(b2.type) && cg(b2);
          break;
        case 4:
          Ih(b2, b2.stateNode.containerInfo);
          break;
        case 10:
          var d2 = b2.type._context, e2 = b2.memoizedProps.value;
          G(Mg, d2._currentValue);
          d2._currentValue = e2;
          break;
        case 13:
          d2 = b2.memoizedState;
          if (null !== d2) {
            if (null !== d2.dehydrated)
              return G(M, M.current & 1), b2.flags |= 128, null;
            if (0 !== (c2 & b2.child.childLanes))
              return pj(a, b2, c2);
            G(M, M.current & 1);
            a = $i(a, b2, c2);
            return null !== a ? a.sibling : null;
          }
          G(M, M.current & 1);
          break;
        case 19:
          d2 = 0 !== (c2 & b2.childLanes);
          if (0 !== (a.flags & 128)) {
            if (d2)
              return yj(a, b2, c2);
            b2.flags |= 128;
          }
          e2 = b2.memoizedState;
          null !== e2 && (e2.rendering = null, e2.tail = null, e2.lastEffect = null);
          G(M, M.current);
          if (d2)
            break;
          else
            return null;
        case 22:
        case 23:
          return b2.lanes = 0, ej(a, b2, c2);
      }
      return $i(a, b2, c2);
    }
    var Aj, Bj, Cj, Dj;
    Aj = function(a, b2) {
      for (var c2 = b2.child; null !== c2; ) {
        if (5 === c2.tag || 6 === c2.tag)
          a.appendChild(c2.stateNode);
        else if (4 !== c2.tag && null !== c2.child) {
          c2.child.return = c2;
          c2 = c2.child;
          continue;
        }
        if (c2 === b2)
          break;
        for (; null === c2.sibling; ) {
          if (null === c2.return || c2.return === b2)
            return;
          c2 = c2.return;
        }
        c2.sibling.return = c2.return;
        c2 = c2.sibling;
      }
    };
    Bj = function() {
    };
    Cj = function(a, b2, c2, d2) {
      var e2 = a.memoizedProps;
      if (e2 !== d2) {
        a = b2.stateNode;
        Hh(Eh.current);
        var f2 = null;
        switch (c2) {
          case "input":
            e2 = Ya(a, e2);
            d2 = Ya(a, d2);
            f2 = [];
            break;
          case "select":
            e2 = A$1({}, e2, { value: void 0 });
            d2 = A$1({}, d2, { value: void 0 });
            f2 = [];
            break;
          case "textarea":
            e2 = gb(a, e2);
            d2 = gb(a, d2);
            f2 = [];
            break;
          default:
            "function" !== typeof e2.onClick && "function" === typeof d2.onClick && (a.onclick = Bf);
        }
        ub(c2, d2);
        var g2;
        c2 = null;
        for (l2 in e2)
          if (!d2.hasOwnProperty(l2) && e2.hasOwnProperty(l2) && null != e2[l2])
            if ("style" === l2) {
              var h2 = e2[l2];
              for (g2 in h2)
                h2.hasOwnProperty(g2) && (c2 || (c2 = {}), c2[g2] = "");
            } else
              "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
        for (l2 in d2) {
          var k2 = d2[l2];
          h2 = null != e2 ? e2[l2] : void 0;
          if (d2.hasOwnProperty(l2) && k2 !== h2 && (null != k2 || null != h2))
            if ("style" === l2)
              if (h2) {
                for (g2 in h2)
                  !h2.hasOwnProperty(g2) || k2 && k2.hasOwnProperty(g2) || (c2 || (c2 = {}), c2[g2] = "");
                for (g2 in k2)
                  k2.hasOwnProperty(g2) && h2[g2] !== k2[g2] && (c2 || (c2 = {}), c2[g2] = k2[g2]);
              } else
                c2 || (f2 || (f2 = []), f2.push(
                  l2,
                  c2
                )), c2 = k2;
            else
              "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h2 = h2 ? h2.__html : void 0, null != k2 && h2 !== k2 && (f2 = f2 || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f2 = f2 || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && D("scroll", a), f2 || h2 === k2 || (f2 = [])) : (f2 = f2 || []).push(l2, k2));
        }
        c2 && (f2 = f2 || []).push("style", c2);
        var l2 = f2;
        if (b2.updateQueue = l2)
          b2.flags |= 4;
      }
    };
    Dj = function(a, b2, c2, d2) {
      c2 !== d2 && (b2.flags |= 4);
    };
    function Ej(a, b2) {
      if (!I)
        switch (a.tailMode) {
          case "hidden":
            b2 = a.tail;
            for (var c2 = null; null !== b2; )
              null !== b2.alternate && (c2 = b2), b2 = b2.sibling;
            null === c2 ? a.tail = null : c2.sibling = null;
            break;
          case "collapsed":
            c2 = a.tail;
            for (var d2 = null; null !== c2; )
              null !== c2.alternate && (d2 = c2), c2 = c2.sibling;
            null === d2 ? b2 || null === a.tail ? a.tail = null : a.tail.sibling = null : d2.sibling = null;
        }
    }
    function S(a) {
      var b2 = null !== a.alternate && a.alternate.child === a.child, c2 = 0, d2 = 0;
      if (b2)
        for (var e2 = a.child; null !== e2; )
          c2 |= e2.lanes | e2.childLanes, d2 |= e2.subtreeFlags & 14680064, d2 |= e2.flags & 14680064, e2.return = a, e2 = e2.sibling;
      else
        for (e2 = a.child; null !== e2; )
          c2 |= e2.lanes | e2.childLanes, d2 |= e2.subtreeFlags, d2 |= e2.flags, e2.return = a, e2 = e2.sibling;
      a.subtreeFlags |= d2;
      a.childLanes = c2;
      return b2;
    }
    function Fj(a, b2, c2) {
      var d2 = b2.pendingProps;
      wg(b2);
      switch (b2.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return S(b2), null;
        case 1:
          return Zf(b2.type) && $f(), S(b2), null;
        case 3:
          d2 = b2.stateNode;
          Jh();
          E(Wf);
          E(H);
          Oh();
          d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
          if (null === a || null === a.child)
            Gg(b2) ? b2.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b2.flags & 256) || (b2.flags |= 1024, null !== zg && (Gj(zg), zg = null));
          Bj(a, b2);
          S(b2);
          return null;
        case 5:
          Lh(b2);
          var e2 = Hh(Gh.current);
          c2 = b2.type;
          if (null !== a && null != b2.stateNode)
            Cj(a, b2, c2, d2, e2), a.ref !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
          else {
            if (!d2) {
              if (null === b2.stateNode)
                throw Error(p$1(166));
              S(b2);
              return null;
            }
            a = Hh(Eh.current);
            if (Gg(b2)) {
              d2 = b2.stateNode;
              c2 = b2.type;
              var f2 = b2.memoizedProps;
              d2[Of] = b2;
              d2[Pf] = f2;
              a = 0 !== (b2.mode & 1);
              switch (c2) {
                case "dialog":
                  D("cancel", d2);
                  D("close", d2);
                  break;
                case "iframe":
                case "object":
                case "embed":
                  D("load", d2);
                  break;
                case "video":
                case "audio":
                  for (e2 = 0; e2 < lf.length; e2++)
                    D(lf[e2], d2);
                  break;
                case "source":
                  D("error", d2);
                  break;
                case "img":
                case "image":
                case "link":
                  D(
                    "error",
                    d2
                  );
                  D("load", d2);
                  break;
                case "details":
                  D("toggle", d2);
                  break;
                case "input":
                  Za(d2, f2);
                  D("invalid", d2);
                  break;
                case "select":
                  d2._wrapperState = { wasMultiple: !!f2.multiple };
                  D("invalid", d2);
                  break;
                case "textarea":
                  hb(d2, f2), D("invalid", d2);
              }
              ub(c2, f2);
              e2 = null;
              for (var g2 in f2)
                if (f2.hasOwnProperty(g2)) {
                  var h2 = f2[g2];
                  "children" === g2 ? "string" === typeof h2 ? d2.textContent !== h2 && (true !== f2.suppressHydrationWarning && Af(d2.textContent, h2, a), e2 = ["children", h2]) : "number" === typeof h2 && d2.textContent !== "" + h2 && (true !== f2.suppressHydrationWarning && Af(
                    d2.textContent,
                    h2,
                    a
                  ), e2 = ["children", "" + h2]) : ea.hasOwnProperty(g2) && null != h2 && "onScroll" === g2 && D("scroll", d2);
                }
              switch (c2) {
                case "input":
                  Va(d2);
                  db(d2, f2, true);
                  break;
                case "textarea":
                  Va(d2);
                  jb(d2);
                  break;
                case "select":
                case "option":
                  break;
                default:
                  "function" === typeof f2.onClick && (d2.onclick = Bf);
              }
              d2 = e2;
              b2.updateQueue = d2;
              null !== d2 && (b2.flags |= 4);
            } else {
              g2 = 9 === e2.nodeType ? e2 : e2.ownerDocument;
              "http://www.w3.org/1999/xhtml" === a && (a = kb(c2));
              "http://www.w3.org/1999/xhtml" === a ? "script" === c2 ? (a = g2.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d2.is ? a = g2.createElement(c2, { is: d2.is }) : (a = g2.createElement(c2), "select" === c2 && (g2 = a, d2.multiple ? g2.multiple = true : d2.size && (g2.size = d2.size))) : a = g2.createElementNS(a, c2);
              a[Of] = b2;
              a[Pf] = d2;
              Aj(a, b2, false, false);
              b2.stateNode = a;
              a: {
                g2 = vb(c2, d2);
                switch (c2) {
                  case "dialog":
                    D("cancel", a);
                    D("close", a);
                    e2 = d2;
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    D("load", a);
                    e2 = d2;
                    break;
                  case "video":
                  case "audio":
                    for (e2 = 0; e2 < lf.length; e2++)
                      D(lf[e2], a);
                    e2 = d2;
                    break;
                  case "source":
                    D("error", a);
                    e2 = d2;
                    break;
                  case "img":
                  case "image":
                  case "link":
                    D(
                      "error",
                      a
                    );
                    D("load", a);
                    e2 = d2;
                    break;
                  case "details":
                    D("toggle", a);
                    e2 = d2;
                    break;
                  case "input":
                    Za(a, d2);
                    e2 = Ya(a, d2);
                    D("invalid", a);
                    break;
                  case "option":
                    e2 = d2;
                    break;
                  case "select":
                    a._wrapperState = { wasMultiple: !!d2.multiple };
                    e2 = A$1({}, d2, { value: void 0 });
                    D("invalid", a);
                    break;
                  case "textarea":
                    hb(a, d2);
                    e2 = gb(a, d2);
                    D("invalid", a);
                    break;
                  default:
                    e2 = d2;
                }
                ub(c2, e2);
                h2 = e2;
                for (f2 in h2)
                  if (h2.hasOwnProperty(f2)) {
                    var k2 = h2[f2];
                    "style" === f2 ? sb(a, k2) : "dangerouslySetInnerHTML" === f2 ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a, k2)) : "children" === f2 ? "string" === typeof k2 ? ("textarea" !== c2 || "" !== k2) && ob(a, k2) : "number" === typeof k2 && ob(a, "" + k2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k2 && "onScroll" === f2 && D("scroll", a) : null != k2 && ta(a, f2, k2, g2));
                  }
                switch (c2) {
                  case "input":
                    Va(a);
                    db(a, d2, false);
                    break;
                  case "textarea":
                    Va(a);
                    jb(a);
                    break;
                  case "option":
                    null != d2.value && a.setAttribute("value", "" + Sa(d2.value));
                    break;
                  case "select":
                    a.multiple = !!d2.multiple;
                    f2 = d2.value;
                    null != f2 ? fb(a, !!d2.multiple, f2, false) : null != d2.defaultValue && fb(
                      a,
                      !!d2.multiple,
                      d2.defaultValue,
                      true
                    );
                    break;
                  default:
                    "function" === typeof e2.onClick && (a.onclick = Bf);
                }
                switch (c2) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    d2 = !!d2.autoFocus;
                    break a;
                  case "img":
                    d2 = true;
                    break a;
                  default:
                    d2 = false;
                }
              }
              d2 && (b2.flags |= 4);
            }
            null !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
          }
          S(b2);
          return null;
        case 6:
          if (a && null != b2.stateNode)
            Dj(a, b2, a.memoizedProps, d2);
          else {
            if ("string" !== typeof d2 && null === b2.stateNode)
              throw Error(p$1(166));
            c2 = Hh(Gh.current);
            Hh(Eh.current);
            if (Gg(b2)) {
              d2 = b2.stateNode;
              c2 = b2.memoizedProps;
              d2[Of] = b2;
              if (f2 = d2.nodeValue !== c2) {
                if (a = xg, null !== a)
                  switch (a.tag) {
                    case 3:
                      Af(d2.nodeValue, c2, 0 !== (a.mode & 1));
                      break;
                    case 5:
                      true !== a.memoizedProps.suppressHydrationWarning && Af(d2.nodeValue, c2, 0 !== (a.mode & 1));
                  }
              }
              f2 && (b2.flags |= 4);
            } else
              d2 = (9 === c2.nodeType ? c2 : c2.ownerDocument).createTextNode(d2), d2[Of] = b2, b2.stateNode = d2;
          }
          S(b2);
          return null;
        case 13:
          E(M);
          d2 = b2.memoizedState;
          if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
            if (I && null !== yg && 0 !== (b2.mode & 1) && 0 === (b2.flags & 128))
              Hg(), Ig(), b2.flags |= 98560, f2 = false;
            else if (f2 = Gg(b2), null !== d2 && null !== d2.dehydrated) {
              if (null === a) {
                if (!f2)
                  throw Error(p$1(318));
                f2 = b2.memoizedState;
                f2 = null !== f2 ? f2.dehydrated : null;
                if (!f2)
                  throw Error(p$1(317));
                f2[Of] = b2;
              } else
                Ig(), 0 === (b2.flags & 128) && (b2.memoizedState = null), b2.flags |= 4;
              S(b2);
              f2 = false;
            } else
              null !== zg && (Gj(zg), zg = null), f2 = true;
            if (!f2)
              return b2.flags & 65536 ? b2 : null;
          }
          if (0 !== (b2.flags & 128))
            return b2.lanes = c2, b2;
          d2 = null !== d2;
          d2 !== (null !== a && null !== a.memoizedState) && d2 && (b2.child.flags |= 8192, 0 !== (b2.mode & 1) && (null === a || 0 !== (M.current & 1) ? 0 === T && (T = 3) : uj()));
          null !== b2.updateQueue && (b2.flags |= 4);
          S(b2);
          return null;
        case 4:
          return Jh(), Bj(a, b2), null === a && sf(b2.stateNode.containerInfo), S(b2), null;
        case 10:
          return Rg(b2.type._context), S(b2), null;
        case 17:
          return Zf(b2.type) && $f(), S(b2), null;
        case 19:
          E(M);
          f2 = b2.memoizedState;
          if (null === f2)
            return S(b2), null;
          d2 = 0 !== (b2.flags & 128);
          g2 = f2.rendering;
          if (null === g2)
            if (d2)
              Ej(f2, false);
            else {
              if (0 !== T || null !== a && 0 !== (a.flags & 128))
                for (a = b2.child; null !== a; ) {
                  g2 = Mh(a);
                  if (null !== g2) {
                    b2.flags |= 128;
                    Ej(f2, false);
                    d2 = g2.updateQueue;
                    null !== d2 && (b2.updateQueue = d2, b2.flags |= 4);
                    b2.subtreeFlags = 0;
                    d2 = c2;
                    for (c2 = b2.child; null !== c2; )
                      f2 = c2, a = d2, f2.flags &= 14680066, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a = g2.dependencies, f2.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c2 = c2.sibling;
                    G(M, M.current & 1 | 2);
                    return b2.child;
                  }
                  a = a.sibling;
                }
              null !== f2.tail && B() > Hj && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
            }
          else {
            if (!d2)
              if (a = Mh(g2), null !== a) {
                if (b2.flags |= 128, d2 = true, c2 = a.updateQueue, null !== c2 && (b2.updateQueue = c2, b2.flags |= 4), Ej(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g2.alternate && !I)
                  return S(b2), null;
              } else
                2 * B() - f2.renderingStartTime > Hj && 1073741824 !== c2 && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
            f2.isBackwards ? (g2.sibling = b2.child, b2.child = g2) : (c2 = f2.last, null !== c2 ? c2.sibling = g2 : b2.child = g2, f2.last = g2);
          }
          if (null !== f2.tail)
            return b2 = f2.tail, f2.rendering = b2, f2.tail = b2.sibling, f2.renderingStartTime = B(), b2.sibling = null, c2 = M.current, G(M, d2 ? c2 & 1 | 2 : c2 & 1), b2;
          S(b2);
          return null;
        case 22:
        case 23:
          return Ij(), d2 = null !== b2.memoizedState, null !== a && null !== a.memoizedState !== d2 && (b2.flags |= 8192), d2 && 0 !== (b2.mode & 1) ? 0 !== (gj & 1073741824) && (S(b2), b2.subtreeFlags & 6 && (b2.flags |= 8192)) : S(b2), null;
        case 24:
          return null;
        case 25:
          return null;
      }
      throw Error(p$1(156, b2.tag));
    }
    function Jj(a, b2) {
      wg(b2);
      switch (b2.tag) {
        case 1:
          return Zf(b2.type) && $f(), a = b2.flags, a & 65536 ? (b2.flags = a & -65537 | 128, b2) : null;
        case 3:
          return Jh(), E(Wf), E(H), Oh(), a = b2.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b2.flags = a & -65537 | 128, b2) : null;
        case 5:
          return Lh(b2), null;
        case 13:
          E(M);
          a = b2.memoizedState;
          if (null !== a && null !== a.dehydrated) {
            if (null === b2.alternate)
              throw Error(p$1(340));
            Ig();
          }
          a = b2.flags;
          return a & 65536 ? (b2.flags = a & -65537 | 128, b2) : null;
        case 19:
          return E(M), null;
        case 4:
          return Jh(), null;
        case 10:
          return Rg(b2.type._context), null;
        case 22:
        case 23:
          return Ij(), null;
        case 24:
          return null;
        default:
          return null;
      }
    }
    var Kj = false, U = false, Lj = "function" === typeof WeakSet ? WeakSet : Set, V = null;
    function Mj(a, b2) {
      var c2 = a.ref;
      if (null !== c2)
        if ("function" === typeof c2)
          try {
            c2(null);
          } catch (d2) {
            W(a, b2, d2);
          }
        else
          c2.current = null;
    }
    function Nj(a, b2, c2) {
      try {
        c2();
      } catch (d2) {
        W(a, b2, d2);
      }
    }
    var Oj = false;
    function Pj(a, b2) {
      Cf = dd;
      a = Me();
      if (Ne(a)) {
        if ("selectionStart" in a)
          var c2 = { start: a.selectionStart, end: a.selectionEnd };
        else
          a: {
            c2 = (c2 = a.ownerDocument) && c2.defaultView || window;
            var d2 = c2.getSelection && c2.getSelection();
            if (d2 && 0 !== d2.rangeCount) {
              c2 = d2.anchorNode;
              var e2 = d2.anchorOffset, f2 = d2.focusNode;
              d2 = d2.focusOffset;
              try {
                c2.nodeType, f2.nodeType;
              } catch (F2) {
                c2 = null;
                break a;
              }
              var g2 = 0, h2 = -1, k2 = -1, l2 = 0, m2 = 0, q2 = a, r2 = null;
              b:
                for (; ; ) {
                  for (var y2; ; ) {
                    q2 !== c2 || 0 !== e2 && 3 !== q2.nodeType || (h2 = g2 + e2);
                    q2 !== f2 || 0 !== d2 && 3 !== q2.nodeType || (k2 = g2 + d2);
                    3 === q2.nodeType && (g2 += q2.nodeValue.length);
                    if (null === (y2 = q2.firstChild))
                      break;
                    r2 = q2;
                    q2 = y2;
                  }
                  for (; ; ) {
                    if (q2 === a)
                      break b;
                    r2 === c2 && ++l2 === e2 && (h2 = g2);
                    r2 === f2 && ++m2 === d2 && (k2 = g2);
                    if (null !== (y2 = q2.nextSibling))
                      break;
                    q2 = r2;
                    r2 = q2.parentNode;
                  }
                  q2 = y2;
                }
              c2 = -1 === h2 || -1 === k2 ? null : { start: h2, end: k2 };
            } else
              c2 = null;
          }
        c2 = c2 || { start: 0, end: 0 };
      } else
        c2 = null;
      Df = { focusedElem: a, selectionRange: c2 };
      dd = false;
      for (V = b2; null !== V; )
        if (b2 = V, a = b2.child, 0 !== (b2.subtreeFlags & 1028) && null !== a)
          a.return = b2, V = a;
        else
          for (; null !== V; ) {
            b2 = V;
            try {
              var n2 = b2.alternate;
              if (0 !== (b2.flags & 1024))
                switch (b2.tag) {
                  case 0:
                  case 11:
                  case 15:
                    break;
                  case 1:
                    if (null !== n2) {
                      var t2 = n2.memoizedProps, J2 = n2.memoizedState, x2 = b2.stateNode, w2 = x2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? t2 : Lg(b2.type, t2), J2);
                      x2.__reactInternalSnapshotBeforeUpdate = w2;
                    }
                    break;
                  case 3:
                    var u2 = b2.stateNode.containerInfo;
                    1 === u2.nodeType ? u2.textContent = "" : 9 === u2.nodeType && u2.documentElement && u2.removeChild(u2.documentElement);
                    break;
                  case 5:
                  case 6:
                  case 4:
                  case 17:
                    break;
                  default:
                    throw Error(p$1(163));
                }
            } catch (F2) {
              W(b2, b2.return, F2);
            }
            a = b2.sibling;
            if (null !== a) {
              a.return = b2.return;
              V = a;
              break;
            }
            V = b2.return;
          }
      n2 = Oj;
      Oj = false;
      return n2;
    }
    function Qj(a, b2, c2) {
      var d2 = b2.updateQueue;
      d2 = null !== d2 ? d2.lastEffect : null;
      if (null !== d2) {
        var e2 = d2 = d2.next;
        do {
          if ((e2.tag & a) === a) {
            var f2 = e2.destroy;
            e2.destroy = void 0;
            void 0 !== f2 && Nj(b2, c2, f2);
          }
          e2 = e2.next;
        } while (e2 !== d2);
      }
    }
    function Rj(a, b2) {
      b2 = b2.updateQueue;
      b2 = null !== b2 ? b2.lastEffect : null;
      if (null !== b2) {
        var c2 = b2 = b2.next;
        do {
          if ((c2.tag & a) === a) {
            var d2 = c2.create;
            c2.destroy = d2();
          }
          c2 = c2.next;
        } while (c2 !== b2);
      }
    }
    function Sj(a) {
      var b2 = a.ref;
      if (null !== b2) {
        var c2 = a.stateNode;
        switch (a.tag) {
          case 5:
            a = c2;
            break;
          default:
            a = c2;
        }
        "function" === typeof b2 ? b2(a) : b2.current = a;
      }
    }
    function Tj(a) {
      var b2 = a.alternate;
      null !== b2 && (a.alternate = null, Tj(b2));
      a.child = null;
      a.deletions = null;
      a.sibling = null;
      5 === a.tag && (b2 = a.stateNode, null !== b2 && (delete b2[Of], delete b2[Pf], delete b2[of], delete b2[Qf], delete b2[Rf]));
      a.stateNode = null;
      a.return = null;
      a.dependencies = null;
      a.memoizedProps = null;
      a.memoizedState = null;
      a.pendingProps = null;
      a.stateNode = null;
      a.updateQueue = null;
    }
    function Uj(a) {
      return 5 === a.tag || 3 === a.tag || 4 === a.tag;
    }
    function Vj(a) {
      a:
        for (; ; ) {
          for (; null === a.sibling; ) {
            if (null === a.return || Uj(a.return))
              return null;
            a = a.return;
          }
          a.sibling.return = a.return;
          for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
            if (a.flags & 2)
              continue a;
            if (null === a.child || 4 === a.tag)
              continue a;
            else
              a.child.return = a, a = a.child;
          }
          if (!(a.flags & 2))
            return a.stateNode;
        }
    }
    function Wj(a, b2, c2) {
      var d2 = a.tag;
      if (5 === d2 || 6 === d2)
        a = a.stateNode, b2 ? 8 === c2.nodeType ? c2.parentNode.insertBefore(a, b2) : c2.insertBefore(a, b2) : (8 === c2.nodeType ? (b2 = c2.parentNode, b2.insertBefore(a, c2)) : (b2 = c2, b2.appendChild(a)), c2 = c2._reactRootContainer, null !== c2 && void 0 !== c2 || null !== b2.onclick || (b2.onclick = Bf));
      else if (4 !== d2 && (a = a.child, null !== a))
        for (Wj(a, b2, c2), a = a.sibling; null !== a; )
          Wj(a, b2, c2), a = a.sibling;
    }
    function Xj(a, b2, c2) {
      var d2 = a.tag;
      if (5 === d2 || 6 === d2)
        a = a.stateNode, b2 ? c2.insertBefore(a, b2) : c2.appendChild(a);
      else if (4 !== d2 && (a = a.child, null !== a))
        for (Xj(a, b2, c2), a = a.sibling; null !== a; )
          Xj(a, b2, c2), a = a.sibling;
    }
    var X$1 = null, Yj = false;
    function Zj(a, b2, c2) {
      for (c2 = c2.child; null !== c2; )
        ak(a, b2, c2), c2 = c2.sibling;
    }
    function ak(a, b2, c2) {
      if (lc && "function" === typeof lc.onCommitFiberUnmount)
        try {
          lc.onCommitFiberUnmount(kc, c2);
        } catch (h2) {
        }
      switch (c2.tag) {
        case 5:
          U || Mj(c2, b2);
        case 6:
          var d2 = X$1, e2 = Yj;
          X$1 = null;
          Zj(a, b2, c2);
          X$1 = d2;
          Yj = e2;
          null !== X$1 && (Yj ? (a = X$1, c2 = c2.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c2) : a.removeChild(c2)) : X$1.removeChild(c2.stateNode));
          break;
        case 18:
          null !== X$1 && (Yj ? (a = X$1, c2 = c2.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c2) : 1 === a.nodeType && Kf(a, c2), bd(a)) : Kf(X$1, c2.stateNode));
          break;
        case 4:
          d2 = X$1;
          e2 = Yj;
          X$1 = c2.stateNode.containerInfo;
          Yj = true;
          Zj(a, b2, c2);
          X$1 = d2;
          Yj = e2;
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          if (!U && (d2 = c2.updateQueue, null !== d2 && (d2 = d2.lastEffect, null !== d2))) {
            e2 = d2 = d2.next;
            do {
              var f2 = e2, g2 = f2.destroy;
              f2 = f2.tag;
              void 0 !== g2 && (0 !== (f2 & 2) ? Nj(c2, b2, g2) : 0 !== (f2 & 4) && Nj(c2, b2, g2));
              e2 = e2.next;
            } while (e2 !== d2);
          }
          Zj(a, b2, c2);
          break;
        case 1:
          if (!U && (Mj(c2, b2), d2 = c2.stateNode, "function" === typeof d2.componentWillUnmount))
            try {
              d2.props = c2.memoizedProps, d2.state = c2.memoizedState, d2.componentWillUnmount();
            } catch (h2) {
              W(c2, b2, h2);
            }
          Zj(a, b2, c2);
          break;
        case 21:
          Zj(a, b2, c2);
          break;
        case 22:
          c2.mode & 1 ? (U = (d2 = U) || null !== c2.memoizedState, Zj(a, b2, c2), U = d2) : Zj(a, b2, c2);
          break;
        default:
          Zj(a, b2, c2);
      }
    }
    function bk(a) {
      var b2 = a.updateQueue;
      if (null !== b2) {
        a.updateQueue = null;
        var c2 = a.stateNode;
        null === c2 && (c2 = a.stateNode = new Lj());
        b2.forEach(function(b3) {
          var d2 = ck.bind(null, a, b3);
          c2.has(b3) || (c2.add(b3), b3.then(d2, d2));
        });
      }
    }
    function dk(a, b2) {
      var c2 = b2.deletions;
      if (null !== c2)
        for (var d2 = 0; d2 < c2.length; d2++) {
          var e2 = c2[d2];
          try {
            var f2 = a, g2 = b2, h2 = g2;
            a:
              for (; null !== h2; ) {
                switch (h2.tag) {
                  case 5:
                    X$1 = h2.stateNode;
                    Yj = false;
                    break a;
                  case 3:
                    X$1 = h2.stateNode.containerInfo;
                    Yj = true;
                    break a;
                  case 4:
                    X$1 = h2.stateNode.containerInfo;
                    Yj = true;
                    break a;
                }
                h2 = h2.return;
              }
            if (null === X$1)
              throw Error(p$1(160));
            ak(f2, g2, e2);
            X$1 = null;
            Yj = false;
            var k2 = e2.alternate;
            null !== k2 && (k2.return = null);
            e2.return = null;
          } catch (l2) {
            W(e2, b2, l2);
          }
        }
      if (b2.subtreeFlags & 12854)
        for (b2 = b2.child; null !== b2; )
          ek(b2, a), b2 = b2.sibling;
    }
    function ek(a, b2) {
      var c2 = a.alternate, d2 = a.flags;
      switch (a.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          dk(b2, a);
          fk(a);
          if (d2 & 4) {
            try {
              Qj(3, a, a.return), Rj(3, a);
            } catch (t2) {
              W(a, a.return, t2);
            }
            try {
              Qj(5, a, a.return);
            } catch (t2) {
              W(a, a.return, t2);
            }
          }
          break;
        case 1:
          dk(b2, a);
          fk(a);
          d2 & 512 && null !== c2 && Mj(c2, c2.return);
          break;
        case 5:
          dk(b2, a);
          fk(a);
          d2 & 512 && null !== c2 && Mj(c2, c2.return);
          if (a.flags & 32) {
            var e2 = a.stateNode;
            try {
              ob(e2, "");
            } catch (t2) {
              W(a, a.return, t2);
            }
          }
          if (d2 & 4 && (e2 = a.stateNode, null != e2)) {
            var f2 = a.memoizedProps, g2 = null !== c2 ? c2.memoizedProps : f2, h2 = a.type, k2 = a.updateQueue;
            a.updateQueue = null;
            if (null !== k2)
              try {
                "input" === h2 && "radio" === f2.type && null != f2.name && ab(e2, f2);
                vb(h2, g2);
                var l2 = vb(h2, f2);
                for (g2 = 0; g2 < k2.length; g2 += 2) {
                  var m2 = k2[g2], q2 = k2[g2 + 1];
                  "style" === m2 ? sb(e2, q2) : "dangerouslySetInnerHTML" === m2 ? nb(e2, q2) : "children" === m2 ? ob(e2, q2) : ta(e2, m2, q2, l2);
                }
                switch (h2) {
                  case "input":
                    bb(e2, f2);
                    break;
                  case "textarea":
                    ib(e2, f2);
                    break;
                  case "select":
                    var r2 = e2._wrapperState.wasMultiple;
                    e2._wrapperState.wasMultiple = !!f2.multiple;
                    var y2 = f2.value;
                    null != y2 ? fb(e2, !!f2.multiple, y2, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                      e2,
                      !!f2.multiple,
                      f2.defaultValue,
                      true
                    ) : fb(e2, !!f2.multiple, f2.multiple ? [] : "", false));
                }
                e2[Pf] = f2;
              } catch (t2) {
                W(a, a.return, t2);
              }
          }
          break;
        case 6:
          dk(b2, a);
          fk(a);
          if (d2 & 4) {
            if (null === a.stateNode)
              throw Error(p$1(162));
            e2 = a.stateNode;
            f2 = a.memoizedProps;
            try {
              e2.nodeValue = f2;
            } catch (t2) {
              W(a, a.return, t2);
            }
          }
          break;
        case 3:
          dk(b2, a);
          fk(a);
          if (d2 & 4 && null !== c2 && c2.memoizedState.isDehydrated)
            try {
              bd(b2.containerInfo);
            } catch (t2) {
              W(a, a.return, t2);
            }
          break;
        case 4:
          dk(b2, a);
          fk(a);
          break;
        case 13:
          dk(b2, a);
          fk(a);
          e2 = a.child;
          e2.flags & 8192 && (f2 = null !== e2.memoizedState, e2.stateNode.isHidden = f2, !f2 || null !== e2.alternate && null !== e2.alternate.memoizedState || (gk = B()));
          d2 & 4 && bk(a);
          break;
        case 22:
          m2 = null !== c2 && null !== c2.memoizedState;
          a.mode & 1 ? (U = (l2 = U) || m2, dk(b2, a), U = l2) : dk(b2, a);
          fk(a);
          if (d2 & 8192) {
            l2 = null !== a.memoizedState;
            if ((a.stateNode.isHidden = l2) && !m2 && 0 !== (a.mode & 1))
              for (V = a, m2 = a.child; null !== m2; ) {
                for (q2 = V = m2; null !== V; ) {
                  r2 = V;
                  y2 = r2.child;
                  switch (r2.tag) {
                    case 0:
                    case 11:
                    case 14:
                    case 15:
                      Qj(4, r2, r2.return);
                      break;
                    case 1:
                      Mj(r2, r2.return);
                      var n2 = r2.stateNode;
                      if ("function" === typeof n2.componentWillUnmount) {
                        d2 = r2;
                        c2 = r2.return;
                        try {
                          b2 = d2, n2.props = b2.memoizedProps, n2.state = b2.memoizedState, n2.componentWillUnmount();
                        } catch (t2) {
                          W(d2, c2, t2);
                        }
                      }
                      break;
                    case 5:
                      Mj(r2, r2.return);
                      break;
                    case 22:
                      if (null !== r2.memoizedState) {
                        hk(q2);
                        continue;
                      }
                  }
                  null !== y2 ? (y2.return = r2, V = y2) : hk(q2);
                }
                m2 = m2.sibling;
              }
            a:
              for (m2 = null, q2 = a; ; ) {
                if (5 === q2.tag) {
                  if (null === m2) {
                    m2 = q2;
                    try {
                      e2 = q2.stateNode, l2 ? (f2 = e2.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h2 = q2.stateNode, k2 = q2.memoizedProps.style, g2 = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h2.style.display = rb("display", g2));
                    } catch (t2) {
                      W(a, a.return, t2);
                    }
                  }
                } else if (6 === q2.tag) {
                  if (null === m2)
                    try {
                      q2.stateNode.nodeValue = l2 ? "" : q2.memoizedProps;
                    } catch (t2) {
                      W(a, a.return, t2);
                    }
                } else if ((22 !== q2.tag && 23 !== q2.tag || null === q2.memoizedState || q2 === a) && null !== q2.child) {
                  q2.child.return = q2;
                  q2 = q2.child;
                  continue;
                }
                if (q2 === a)
                  break a;
                for (; null === q2.sibling; ) {
                  if (null === q2.return || q2.return === a)
                    break a;
                  m2 === q2 && (m2 = null);
                  q2 = q2.return;
                }
                m2 === q2 && (m2 = null);
                q2.sibling.return = q2.return;
                q2 = q2.sibling;
              }
          }
          break;
        case 19:
          dk(b2, a);
          fk(a);
          d2 & 4 && bk(a);
          break;
        case 21:
          break;
        default:
          dk(
            b2,
            a
          ), fk(a);
      }
    }
    function fk(a) {
      var b2 = a.flags;
      if (b2 & 2) {
        try {
          a: {
            for (var c2 = a.return; null !== c2; ) {
              if (Uj(c2)) {
                var d2 = c2;
                break a;
              }
              c2 = c2.return;
            }
            throw Error(p$1(160));
          }
          switch (d2.tag) {
            case 5:
              var e2 = d2.stateNode;
              d2.flags & 32 && (ob(e2, ""), d2.flags &= -33);
              var f2 = Vj(a);
              Xj(a, f2, e2);
              break;
            case 3:
            case 4:
              var g2 = d2.stateNode.containerInfo, h2 = Vj(a);
              Wj(a, h2, g2);
              break;
            default:
              throw Error(p$1(161));
          }
        } catch (k2) {
          W(a, a.return, k2);
        }
        a.flags &= -3;
      }
      b2 & 4096 && (a.flags &= -4097);
    }
    function ik(a, b2, c2) {
      V = a;
      jk(a);
    }
    function jk(a, b2, c2) {
      for (var d2 = 0 !== (a.mode & 1); null !== V; ) {
        var e2 = V, f2 = e2.child;
        if (22 === e2.tag && d2) {
          var g2 = null !== e2.memoizedState || Kj;
          if (!g2) {
            var h2 = e2.alternate, k2 = null !== h2 && null !== h2.memoizedState || U;
            h2 = Kj;
            var l2 = U;
            Kj = g2;
            if ((U = k2) && !l2)
              for (V = e2; null !== V; )
                g2 = V, k2 = g2.child, 22 === g2.tag && null !== g2.memoizedState ? kk(e2) : null !== k2 ? (k2.return = g2, V = k2) : kk(e2);
            for (; null !== f2; )
              V = f2, jk(f2), f2 = f2.sibling;
            V = e2;
            Kj = h2;
            U = l2;
          }
          lk(a);
        } else
          0 !== (e2.subtreeFlags & 8772) && null !== f2 ? (f2.return = e2, V = f2) : lk(a);
      }
    }
    function lk(a) {
      for (; null !== V; ) {
        var b2 = V;
        if (0 !== (b2.flags & 8772)) {
          var c2 = b2.alternate;
          try {
            if (0 !== (b2.flags & 8772))
              switch (b2.tag) {
                case 0:
                case 11:
                case 15:
                  U || Rj(5, b2);
                  break;
                case 1:
                  var d2 = b2.stateNode;
                  if (b2.flags & 4 && !U)
                    if (null === c2)
                      d2.componentDidMount();
                    else {
                      var e2 = b2.elementType === b2.type ? c2.memoizedProps : Lg(b2.type, c2.memoizedProps);
                      d2.componentDidUpdate(e2, c2.memoizedState, d2.__reactInternalSnapshotBeforeUpdate);
                    }
                  var f2 = b2.updateQueue;
                  null !== f2 && ih(b2, f2, d2);
                  break;
                case 3:
                  var g2 = b2.updateQueue;
                  if (null !== g2) {
                    c2 = null;
                    if (null !== b2.child)
                      switch (b2.child.tag) {
                        case 5:
                          c2 = b2.child.stateNode;
                          break;
                        case 1:
                          c2 = b2.child.stateNode;
                      }
                    ih(b2, g2, c2);
                  }
                  break;
                case 5:
                  var h2 = b2.stateNode;
                  if (null === c2 && b2.flags & 4) {
                    c2 = h2;
                    var k2 = b2.memoizedProps;
                    switch (b2.type) {
                      case "button":
                      case "input":
                      case "select":
                      case "textarea":
                        k2.autoFocus && c2.focus();
                        break;
                      case "img":
                        k2.src && (c2.src = k2.src);
                    }
                  }
                  break;
                case 6:
                  break;
                case 4:
                  break;
                case 12:
                  break;
                case 13:
                  if (null === b2.memoizedState) {
                    var l2 = b2.alternate;
                    if (null !== l2) {
                      var m2 = l2.memoizedState;
                      if (null !== m2) {
                        var q2 = m2.dehydrated;
                        null !== q2 && bd(q2);
                      }
                    }
                  }
                  break;
                case 19:
                case 17:
                case 21:
                case 22:
                case 23:
                case 25:
                  break;
                default:
                  throw Error(p$1(163));
              }
            U || b2.flags & 512 && Sj(b2);
          } catch (r2) {
            W(b2, b2.return, r2);
          }
        }
        if (b2 === a) {
          V = null;
          break;
        }
        c2 = b2.sibling;
        if (null !== c2) {
          c2.return = b2.return;
          V = c2;
          break;
        }
        V = b2.return;
      }
    }
    function hk(a) {
      for (; null !== V; ) {
        var b2 = V;
        if (b2 === a) {
          V = null;
          break;
        }
        var c2 = b2.sibling;
        if (null !== c2) {
          c2.return = b2.return;
          V = c2;
          break;
        }
        V = b2.return;
      }
    }
    function kk(a) {
      for (; null !== V; ) {
        var b2 = V;
        try {
          switch (b2.tag) {
            case 0:
            case 11:
            case 15:
              var c2 = b2.return;
              try {
                Rj(4, b2);
              } catch (k2) {
                W(b2, c2, k2);
              }
              break;
            case 1:
              var d2 = b2.stateNode;
              if ("function" === typeof d2.componentDidMount) {
                var e2 = b2.return;
                try {
                  d2.componentDidMount();
                } catch (k2) {
                  W(b2, e2, k2);
                }
              }
              var f2 = b2.return;
              try {
                Sj(b2);
              } catch (k2) {
                W(b2, f2, k2);
              }
              break;
            case 5:
              var g2 = b2.return;
              try {
                Sj(b2);
              } catch (k2) {
                W(b2, g2, k2);
              }
          }
        } catch (k2) {
          W(b2, b2.return, k2);
        }
        if (b2 === a) {
          V = null;
          break;
        }
        var h2 = b2.sibling;
        if (null !== h2) {
          h2.return = b2.return;
          V = h2;
          break;
        }
        V = b2.return;
      }
    }
    var mk = Math.ceil, nk = ua.ReactCurrentDispatcher, ok = ua.ReactCurrentOwner, pk = ua.ReactCurrentBatchConfig, K = 0, R = null, Y = null, Z = 0, gj = 0, fj = Uf(0), T = 0, qk = null, hh = 0, rk = 0, sk = 0, tk = null, uk = null, gk = 0, Hj = Infinity, vk = null, Pi = false, Qi = null, Si = null, wk = false, xk = null, yk = 0, zk = 0, Ak = null, Bk = -1, Ck = 0;
    function L() {
      return 0 !== (K & 6) ? B() : -1 !== Bk ? Bk : Bk = B();
    }
    function lh(a) {
      if (0 === (a.mode & 1))
        return 1;
      if (0 !== (K & 2) && 0 !== Z)
        return Z & -Z;
      if (null !== Kg.transition)
        return 0 === Ck && (Ck = yc()), Ck;
      a = C;
      if (0 !== a)
        return a;
      a = window.event;
      a = void 0 === a ? 16 : jd(a.type);
      return a;
    }
    function mh(a, b2, c2, d2) {
      if (50 < zk)
        throw zk = 0, Ak = null, Error(p$1(185));
      Ac(a, c2, d2);
      if (0 === (K & 2) || a !== R)
        a === R && (0 === (K & 2) && (rk |= c2), 4 === T && Dk(a, Z)), Ek(a, d2), 1 === c2 && 0 === K && 0 === (b2.mode & 1) && (Hj = B() + 500, fg && jg());
    }
    function Ek(a, b2) {
      var c2 = a.callbackNode;
      wc(a, b2);
      var d2 = uc(a, a === R ? Z : 0);
      if (0 === d2)
        null !== c2 && bc(c2), a.callbackNode = null, a.callbackPriority = 0;
      else if (b2 = d2 & -d2, a.callbackPriority !== b2) {
        null != c2 && bc(c2);
        if (1 === b2)
          0 === a.tag ? ig(Fk.bind(null, a)) : hg(Fk.bind(null, a)), Jf(function() {
            0 === (K & 6) && jg();
          }), c2 = null;
        else {
          switch (Dc(d2)) {
            case 1:
              c2 = fc;
              break;
            case 4:
              c2 = gc;
              break;
            case 16:
              c2 = hc;
              break;
            case 536870912:
              c2 = jc;
              break;
            default:
              c2 = hc;
          }
          c2 = Gk(c2, Hk.bind(null, a));
        }
        a.callbackPriority = b2;
        a.callbackNode = c2;
      }
    }
    function Hk(a, b2) {
      Bk = -1;
      Ck = 0;
      if (0 !== (K & 6))
        throw Error(p$1(327));
      var c2 = a.callbackNode;
      if (Ik() && a.callbackNode !== c2)
        return null;
      var d2 = uc(a, a === R ? Z : 0);
      if (0 === d2)
        return null;
      if (0 !== (d2 & 30) || 0 !== (d2 & a.expiredLanes) || b2)
        b2 = Jk(a, d2);
      else {
        b2 = d2;
        var e2 = K;
        K |= 2;
        var f2 = Kk();
        if (R !== a || Z !== b2)
          vk = null, Hj = B() + 500, Lk(a, b2);
        do
          try {
            Mk();
            break;
          } catch (h2) {
            Nk(a, h2);
          }
        while (1);
        Qg();
        nk.current = f2;
        K = e2;
        null !== Y ? b2 = 0 : (R = null, Z = 0, b2 = T);
      }
      if (0 !== b2) {
        2 === b2 && (e2 = xc(a), 0 !== e2 && (d2 = e2, b2 = Ok(a, e2)));
        if (1 === b2)
          throw c2 = qk, Lk(a, 0), Dk(a, d2), Ek(a, B()), c2;
        if (6 === b2)
          Dk(a, d2);
        else {
          e2 = a.current.alternate;
          if (0 === (d2 & 30) && !Pk(e2) && (b2 = Jk(a, d2), 2 === b2 && (f2 = xc(a), 0 !== f2 && (d2 = f2, b2 = Ok(a, f2))), 1 === b2))
            throw c2 = qk, Lk(a, 0), Dk(a, d2), Ek(a, B()), c2;
          a.finishedWork = e2;
          a.finishedLanes = d2;
          switch (b2) {
            case 0:
            case 1:
              throw Error(p$1(345));
            case 2:
              Qk(a, uk, vk);
              break;
            case 3:
              Dk(a, d2);
              if ((d2 & 130023424) === d2 && (b2 = gk + 500 - B(), 10 < b2)) {
                if (0 !== uc(a, 0))
                  break;
                e2 = a.suspendedLanes;
                if ((e2 & d2) !== d2) {
                  L();
                  a.pingedLanes |= a.suspendedLanes & e2;
                  break;
                }
                a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), b2);
                break;
              }
              Qk(a, uk, vk);
              break;
            case 4:
              Dk(a, d2);
              if ((d2 & 4194240) === d2)
                break;
              b2 = a.eventTimes;
              for (e2 = -1; 0 < d2; ) {
                var g2 = 31 - oc(d2);
                f2 = 1 << g2;
                g2 = b2[g2];
                g2 > e2 && (e2 = g2);
                d2 &= ~f2;
              }
              d2 = e2;
              d2 = B() - d2;
              d2 = (120 > d2 ? 120 : 480 > d2 ? 480 : 1080 > d2 ? 1080 : 1920 > d2 ? 1920 : 3e3 > d2 ? 3e3 : 4320 > d2 ? 4320 : 1960 * mk(d2 / 1960)) - d2;
              if (10 < d2) {
                a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), d2);
                break;
              }
              Qk(a, uk, vk);
              break;
            case 5:
              Qk(a, uk, vk);
              break;
            default:
              throw Error(p$1(329));
          }
        }
      }
      Ek(a, B());
      return a.callbackNode === c2 ? Hk.bind(null, a) : null;
    }
    function Ok(a, b2) {
      var c2 = tk;
      a.current.memoizedState.isDehydrated && (Lk(a, b2).flags |= 256);
      a = Jk(a, b2);
      2 !== a && (b2 = uk, uk = c2, null !== b2 && Gj(b2));
      return a;
    }
    function Gj(a) {
      null === uk ? uk = a : uk.push.apply(uk, a);
    }
    function Pk(a) {
      for (var b2 = a; ; ) {
        if (b2.flags & 16384) {
          var c2 = b2.updateQueue;
          if (null !== c2 && (c2 = c2.stores, null !== c2))
            for (var d2 = 0; d2 < c2.length; d2++) {
              var e2 = c2[d2], f2 = e2.getSnapshot;
              e2 = e2.value;
              try {
                if (!He(f2(), e2))
                  return false;
              } catch (g2) {
                return false;
              }
            }
        }
        c2 = b2.child;
        if (b2.subtreeFlags & 16384 && null !== c2)
          c2.return = b2, b2 = c2;
        else {
          if (b2 === a)
            break;
          for (; null === b2.sibling; ) {
            if (null === b2.return || b2.return === a)
              return true;
            b2 = b2.return;
          }
          b2.sibling.return = b2.return;
          b2 = b2.sibling;
        }
      }
      return true;
    }
    function Dk(a, b2) {
      b2 &= ~sk;
      b2 &= ~rk;
      a.suspendedLanes |= b2;
      a.pingedLanes &= ~b2;
      for (a = a.expirationTimes; 0 < b2; ) {
        var c2 = 31 - oc(b2), d2 = 1 << c2;
        a[c2] = -1;
        b2 &= ~d2;
      }
    }
    function Fk(a) {
      if (0 !== (K & 6))
        throw Error(p$1(327));
      Ik();
      var b2 = uc(a, 0);
      if (0 === (b2 & 1))
        return Ek(a, B()), null;
      var c2 = Jk(a, b2);
      if (0 !== a.tag && 2 === c2) {
        var d2 = xc(a);
        0 !== d2 && (b2 = d2, c2 = Ok(a, d2));
      }
      if (1 === c2)
        throw c2 = qk, Lk(a, 0), Dk(a, b2), Ek(a, B()), c2;
      if (6 === c2)
        throw Error(p$1(345));
      a.finishedWork = a.current.alternate;
      a.finishedLanes = b2;
      Qk(a, uk, vk);
      Ek(a, B());
      return null;
    }
    function Rk(a, b2) {
      var c2 = K;
      K |= 1;
      try {
        return a(b2);
      } finally {
        K = c2, 0 === K && (Hj = B() + 500, fg && jg());
      }
    }
    function Sk(a) {
      null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();
      var b2 = K;
      K |= 1;
      var c2 = pk.transition, d2 = C;
      try {
        if (pk.transition = null, C = 1, a)
          return a();
      } finally {
        C = d2, pk.transition = c2, K = b2, 0 === (K & 6) && jg();
      }
    }
    function Ij() {
      gj = fj.current;
      E(fj);
    }
    function Lk(a, b2) {
      a.finishedWork = null;
      a.finishedLanes = 0;
      var c2 = a.timeoutHandle;
      -1 !== c2 && (a.timeoutHandle = -1, Gf(c2));
      if (null !== Y)
        for (c2 = Y.return; null !== c2; ) {
          var d2 = c2;
          wg(d2);
          switch (d2.tag) {
            case 1:
              d2 = d2.type.childContextTypes;
              null !== d2 && void 0 !== d2 && $f();
              break;
            case 3:
              Jh();
              E(Wf);
              E(H);
              Oh();
              break;
            case 5:
              Lh(d2);
              break;
            case 4:
              Jh();
              break;
            case 13:
              E(M);
              break;
            case 19:
              E(M);
              break;
            case 10:
              Rg(d2.type._context);
              break;
            case 22:
            case 23:
              Ij();
          }
          c2 = c2.return;
        }
      R = a;
      Y = a = wh(a.current, null);
      Z = gj = b2;
      T = 0;
      qk = null;
      sk = rk = hh = 0;
      uk = tk = null;
      if (null !== Wg) {
        for (b2 = 0; b2 < Wg.length; b2++)
          if (c2 = Wg[b2], d2 = c2.interleaved, null !== d2) {
            c2.interleaved = null;
            var e2 = d2.next, f2 = c2.pending;
            if (null !== f2) {
              var g2 = f2.next;
              f2.next = e2;
              d2.next = g2;
            }
            c2.pending = d2;
          }
        Wg = null;
      }
      return a;
    }
    function Nk(a, b2) {
      do {
        var c2 = Y;
        try {
          Qg();
          Ph.current = ai;
          if (Sh) {
            for (var d2 = N.memoizedState; null !== d2; ) {
              var e2 = d2.queue;
              null !== e2 && (e2.pending = null);
              d2 = d2.next;
            }
            Sh = false;
          }
          Rh = 0;
          P = O = N = null;
          Th = false;
          Uh = 0;
          ok.current = null;
          if (null === c2 || null === c2.return) {
            T = 1;
            qk = b2;
            Y = null;
            break;
          }
          a: {
            var f2 = a, g2 = c2.return, h2 = c2, k2 = b2;
            b2 = Z;
            h2.flags |= 32768;
            if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
              var l2 = k2, m2 = h2, q2 = m2.tag;
              if (0 === (m2.mode & 1) && (0 === q2 || 11 === q2 || 15 === q2)) {
                var r2 = m2.alternate;
                r2 ? (m2.updateQueue = r2.updateQueue, m2.memoizedState = r2.memoizedState, m2.lanes = r2.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
              }
              var y2 = Vi(g2);
              if (null !== y2) {
                y2.flags &= -257;
                Wi(y2, g2, h2, f2, b2);
                y2.mode & 1 && Ti(f2, l2, b2);
                b2 = y2;
                k2 = l2;
                var n2 = b2.updateQueue;
                if (null === n2) {
                  var t2 = /* @__PURE__ */ new Set();
                  t2.add(k2);
                  b2.updateQueue = t2;
                } else
                  n2.add(k2);
                break a;
              } else {
                if (0 === (b2 & 1)) {
                  Ti(f2, l2, b2);
                  uj();
                  break a;
                }
                k2 = Error(p$1(426));
              }
            } else if (I && h2.mode & 1) {
              var J2 = Vi(g2);
              if (null !== J2) {
                0 === (J2.flags & 65536) && (J2.flags |= 256);
                Wi(J2, g2, h2, f2, b2);
                Jg(Ki(k2, h2));
                break a;
              }
            }
            f2 = k2 = Ki(k2, h2);
            4 !== T && (T = 2);
            null === tk ? tk = [f2] : tk.push(f2);
            f2 = g2;
            do {
              switch (f2.tag) {
                case 3:
                  f2.flags |= 65536;
                  b2 &= -b2;
                  f2.lanes |= b2;
                  var x2 = Oi(f2, k2, b2);
                  fh(f2, x2);
                  break a;
                case 1:
                  h2 = k2;
                  var w2 = f2.type, u2 = f2.stateNode;
                  if (0 === (f2.flags & 128) && ("function" === typeof w2.getDerivedStateFromError || null !== u2 && "function" === typeof u2.componentDidCatch && (null === Si || !Si.has(u2)))) {
                    f2.flags |= 65536;
                    b2 &= -b2;
                    f2.lanes |= b2;
                    var F2 = Ri(f2, h2, b2);
                    fh(f2, F2);
                    break a;
                  }
              }
              f2 = f2.return;
            } while (null !== f2);
          }
          Tk(c2);
        } catch (na) {
          b2 = na;
          Y === c2 && null !== c2 && (Y = c2 = c2.return);
          continue;
        }
        break;
      } while (1);
    }
    function Kk() {
      var a = nk.current;
      nk.current = ai;
      return null === a ? ai : a;
    }
    function uj() {
      if (0 === T || 3 === T || 2 === T)
        T = 4;
      null === R || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R, Z);
    }
    function Jk(a, b2) {
      var c2 = K;
      K |= 2;
      var d2 = Kk();
      if (R !== a || Z !== b2)
        vk = null, Lk(a, b2);
      do
        try {
          Uk();
          break;
        } catch (e2) {
          Nk(a, e2);
        }
      while (1);
      Qg();
      K = c2;
      nk.current = d2;
      if (null !== Y)
        throw Error(p$1(261));
      R = null;
      Z = 0;
      return T;
    }
    function Uk() {
      for (; null !== Y; )
        Vk(Y);
    }
    function Mk() {
      for (; null !== Y && !cc(); )
        Vk(Y);
    }
    function Vk(a) {
      var b2 = Wk(a.alternate, a, gj);
      a.memoizedProps = a.pendingProps;
      null === b2 ? Tk(a) : Y = b2;
      ok.current = null;
    }
    function Tk(a) {
      var b2 = a;
      do {
        var c2 = b2.alternate;
        a = b2.return;
        if (0 === (b2.flags & 32768)) {
          if (c2 = Fj(c2, b2, gj), null !== c2) {
            Y = c2;
            return;
          }
        } else {
          c2 = Jj(c2, b2);
          if (null !== c2) {
            c2.flags &= 32767;
            Y = c2;
            return;
          }
          if (null !== a)
            a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
          else {
            T = 6;
            Y = null;
            return;
          }
        }
        b2 = b2.sibling;
        if (null !== b2) {
          Y = b2;
          return;
        }
        Y = b2 = a;
      } while (null !== b2);
      0 === T && (T = 5);
    }
    function Qk(a, b2, c2) {
      var d2 = C, e2 = pk.transition;
      try {
        pk.transition = null, C = 1, Xk(a, b2, c2, d2);
      } finally {
        pk.transition = e2, C = d2;
      }
      return null;
    }
    function Xk(a, b2, c2, d2) {
      do
        Ik();
      while (null !== xk);
      if (0 !== (K & 6))
        throw Error(p$1(327));
      c2 = a.finishedWork;
      var e2 = a.finishedLanes;
      if (null === c2)
        return null;
      a.finishedWork = null;
      a.finishedLanes = 0;
      if (c2 === a.current)
        throw Error(p$1(177));
      a.callbackNode = null;
      a.callbackPriority = 0;
      var f2 = c2.lanes | c2.childLanes;
      Bc(a, f2);
      a === R && (Y = R = null, Z = 0);
      0 === (c2.subtreeFlags & 2064) && 0 === (c2.flags & 2064) || wk || (wk = true, Gk(hc, function() {
        Ik();
        return null;
      }));
      f2 = 0 !== (c2.flags & 15990);
      if (0 !== (c2.subtreeFlags & 15990) || f2) {
        f2 = pk.transition;
        pk.transition = null;
        var g2 = C;
        C = 1;
        var h2 = K;
        K |= 4;
        ok.current = null;
        Pj(a, c2);
        ek(c2, a);
        Oe(Df);
        dd = !!Cf;
        Df = Cf = null;
        a.current = c2;
        ik(c2);
        dc();
        K = h2;
        C = g2;
        pk.transition = f2;
      } else
        a.current = c2;
      wk && (wk = false, xk = a, yk = e2);
      f2 = a.pendingLanes;
      0 === f2 && (Si = null);
      mc(c2.stateNode);
      Ek(a, B());
      if (null !== b2)
        for (d2 = a.onRecoverableError, c2 = 0; c2 < b2.length; c2++)
          e2 = b2[c2], d2(e2.value, { componentStack: e2.stack, digest: e2.digest });
      if (Pi)
        throw Pi = false, a = Qi, Qi = null, a;
      0 !== (yk & 1) && 0 !== a.tag && Ik();
      f2 = a.pendingLanes;
      0 !== (f2 & 1) ? a === Ak ? zk++ : (zk = 0, Ak = a) : zk = 0;
      jg();
      return null;
    }
    function Ik() {
      if (null !== xk) {
        var a = Dc(yk), b2 = pk.transition, c2 = C;
        try {
          pk.transition = null;
          C = 16 > a ? 16 : a;
          if (null === xk)
            var d2 = false;
          else {
            a = xk;
            xk = null;
            yk = 0;
            if (0 !== (K & 6))
              throw Error(p$1(331));
            var e2 = K;
            K |= 4;
            for (V = a.current; null !== V; ) {
              var f2 = V, g2 = f2.child;
              if (0 !== (V.flags & 16)) {
                var h2 = f2.deletions;
                if (null !== h2) {
                  for (var k2 = 0; k2 < h2.length; k2++) {
                    var l2 = h2[k2];
                    for (V = l2; null !== V; ) {
                      var m2 = V;
                      switch (m2.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Qj(8, m2, f2);
                      }
                      var q2 = m2.child;
                      if (null !== q2)
                        q2.return = m2, V = q2;
                      else
                        for (; null !== V; ) {
                          m2 = V;
                          var r2 = m2.sibling, y2 = m2.return;
                          Tj(m2);
                          if (m2 === l2) {
                            V = null;
                            break;
                          }
                          if (null !== r2) {
                            r2.return = y2;
                            V = r2;
                            break;
                          }
                          V = y2;
                        }
                    }
                  }
                  var n2 = f2.alternate;
                  if (null !== n2) {
                    var t2 = n2.child;
                    if (null !== t2) {
                      n2.child = null;
                      do {
                        var J2 = t2.sibling;
                        t2.sibling = null;
                        t2 = J2;
                      } while (null !== t2);
                    }
                  }
                  V = f2;
                }
              }
              if (0 !== (f2.subtreeFlags & 2064) && null !== g2)
                g2.return = f2, V = g2;
              else
                b:
                  for (; null !== V; ) {
                    f2 = V;
                    if (0 !== (f2.flags & 2048))
                      switch (f2.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Qj(9, f2, f2.return);
                      }
                    var x2 = f2.sibling;
                    if (null !== x2) {
                      x2.return = f2.return;
                      V = x2;
                      break b;
                    }
                    V = f2.return;
                  }
            }
            var w2 = a.current;
            for (V = w2; null !== V; ) {
              g2 = V;
              var u2 = g2.child;
              if (0 !== (g2.subtreeFlags & 2064) && null !== u2)
                u2.return = g2, V = u2;
              else
                b:
                  for (g2 = w2; null !== V; ) {
                    h2 = V;
                    if (0 !== (h2.flags & 2048))
                      try {
                        switch (h2.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Rj(9, h2);
                        }
                      } catch (na) {
                        W(h2, h2.return, na);
                      }
                    if (h2 === g2) {
                      V = null;
                      break b;
                    }
                    var F2 = h2.sibling;
                    if (null !== F2) {
                      F2.return = h2.return;
                      V = F2;
                      break b;
                    }
                    V = h2.return;
                  }
            }
            K = e2;
            jg();
            if (lc && "function" === typeof lc.onPostCommitFiberRoot)
              try {
                lc.onPostCommitFiberRoot(kc, a);
              } catch (na) {
              }
            d2 = true;
          }
          return d2;
        } finally {
          C = c2, pk.transition = b2;
        }
      }
      return false;
    }
    function Yk(a, b2, c2) {
      b2 = Ki(c2, b2);
      b2 = Oi(a, b2, 1);
      a = dh(a, b2, 1);
      b2 = L();
      null !== a && (Ac(a, 1, b2), Ek(a, b2));
    }
    function W(a, b2, c2) {
      if (3 === a.tag)
        Yk(a, a, c2);
      else
        for (; null !== b2; ) {
          if (3 === b2.tag) {
            Yk(b2, a, c2);
            break;
          } else if (1 === b2.tag) {
            var d2 = b2.stateNode;
            if ("function" === typeof b2.type.getDerivedStateFromError || "function" === typeof d2.componentDidCatch && (null === Si || !Si.has(d2))) {
              a = Ki(c2, a);
              a = Ri(b2, a, 1);
              b2 = dh(b2, a, 1);
              a = L();
              null !== b2 && (Ac(b2, 1, a), Ek(b2, a));
              break;
            }
          }
          b2 = b2.return;
        }
    }
    function Ui(a, b2, c2) {
      var d2 = a.pingCache;
      null !== d2 && d2.delete(b2);
      b2 = L();
      a.pingedLanes |= a.suspendedLanes & c2;
      R === a && (Z & c2) === c2 && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - gk ? Lk(a, 0) : sk |= c2);
      Ek(a, b2);
    }
    function Zk(a, b2) {
      0 === b2 && (0 === (a.mode & 1) ? b2 = 1 : (b2 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
      var c2 = L();
      a = Zg(a, b2);
      null !== a && (Ac(a, b2, c2), Ek(a, c2));
    }
    function vj(a) {
      var b2 = a.memoizedState, c2 = 0;
      null !== b2 && (c2 = b2.retryLane);
      Zk(a, c2);
    }
    function ck(a, b2) {
      var c2 = 0;
      switch (a.tag) {
        case 13:
          var d2 = a.stateNode;
          var e2 = a.memoizedState;
          null !== e2 && (c2 = e2.retryLane);
          break;
        case 19:
          d2 = a.stateNode;
          break;
        default:
          throw Error(p$1(314));
      }
      null !== d2 && d2.delete(b2);
      Zk(a, c2);
    }
    var Wk;
    Wk = function(a, b2, c2) {
      if (null !== a)
        if (a.memoizedProps !== b2.pendingProps || Wf.current)
          Ug = true;
        else {
          if (0 === (a.lanes & c2) && 0 === (b2.flags & 128))
            return Ug = false, zj(a, b2, c2);
          Ug = 0 !== (a.flags & 131072) ? true : false;
        }
      else
        Ug = false, I && 0 !== (b2.flags & 1048576) && ug(b2, ng, b2.index);
      b2.lanes = 0;
      switch (b2.tag) {
        case 2:
          var d2 = b2.type;
          jj(a, b2);
          a = b2.pendingProps;
          var e2 = Yf(b2, H.current);
          Tg(b2, c2);
          e2 = Xh(null, b2, d2, a, e2, c2);
          var f2 = bi();
          b2.flags |= 1;
          "object" === typeof e2 && null !== e2 && "function" === typeof e2.render && void 0 === e2.$$typeof ? (b2.tag = 1, b2.memoizedState = null, b2.updateQueue = null, Zf(d2) ? (f2 = true, cg(b2)) : f2 = false, b2.memoizedState = null !== e2.state && void 0 !== e2.state ? e2.state : null, ah(b2), e2.updater = nh, b2.stateNode = e2, e2._reactInternals = b2, rh(b2, d2, a, c2), b2 = kj(null, b2, d2, true, f2, c2)) : (b2.tag = 0, I && f2 && vg(b2), Yi(null, b2, e2, c2), b2 = b2.child);
          return b2;
        case 16:
          d2 = b2.elementType;
          a: {
            jj(a, b2);
            a = b2.pendingProps;
            e2 = d2._init;
            d2 = e2(d2._payload);
            b2.type = d2;
            e2 = b2.tag = $k(d2);
            a = Lg(d2, a);
            switch (e2) {
              case 0:
                b2 = dj(null, b2, d2, a, c2);
                break a;
              case 1:
                b2 = ij(null, b2, d2, a, c2);
                break a;
              case 11:
                b2 = Zi(null, b2, d2, a, c2);
                break a;
              case 14:
                b2 = aj(null, b2, d2, Lg(d2.type, a), c2);
                break a;
            }
            throw Error(p$1(
              306,
              d2,
              ""
            ));
          }
          return b2;
        case 0:
          return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), dj(a, b2, d2, e2, c2);
        case 1:
          return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), ij(a, b2, d2, e2, c2);
        case 3:
          a: {
            lj(b2);
            if (null === a)
              throw Error(p$1(387));
            d2 = b2.pendingProps;
            f2 = b2.memoizedState;
            e2 = f2.element;
            bh(a, b2);
            gh(b2, d2, null, c2);
            var g2 = b2.memoizedState;
            d2 = g2.element;
            if (f2.isDehydrated)
              if (f2 = { element: d2, isDehydrated: false, cache: g2.cache, pendingSuspenseBoundaries: g2.pendingSuspenseBoundaries, transitions: g2.transitions }, b2.updateQueue.baseState = f2, b2.memoizedState = f2, b2.flags & 256) {
                e2 = Ki(Error(p$1(423)), b2);
                b2 = mj(a, b2, d2, c2, e2);
                break a;
              } else if (d2 !== e2) {
                e2 = Ki(Error(p$1(424)), b2);
                b2 = mj(a, b2, d2, c2, e2);
                break a;
              } else
                for (yg = Lf(b2.stateNode.containerInfo.firstChild), xg = b2, I = true, zg = null, c2 = Ch(b2, null, d2, c2), b2.child = c2; c2; )
                  c2.flags = c2.flags & -3 | 4096, c2 = c2.sibling;
            else {
              Ig();
              if (d2 === e2) {
                b2 = $i(a, b2, c2);
                break a;
              }
              Yi(a, b2, d2, c2);
            }
            b2 = b2.child;
          }
          return b2;
        case 5:
          return Kh(b2), null === a && Eg(b2), d2 = b2.type, e2 = b2.pendingProps, f2 = null !== a ? a.memoizedProps : null, g2 = e2.children, Ef(d2, e2) ? g2 = null : null !== f2 && Ef(d2, f2) && (b2.flags |= 32), hj(a, b2), Yi(a, b2, g2, c2), b2.child;
        case 6:
          return null === a && Eg(b2), null;
        case 13:
          return pj(a, b2, c2);
        case 4:
          return Ih(b2, b2.stateNode.containerInfo), d2 = b2.pendingProps, null === a ? b2.child = Bh(b2, null, d2, c2) : Yi(a, b2, d2, c2), b2.child;
        case 11:
          return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), Zi(a, b2, d2, e2, c2);
        case 7:
          return Yi(a, b2, b2.pendingProps, c2), b2.child;
        case 8:
          return Yi(a, b2, b2.pendingProps.children, c2), b2.child;
        case 12:
          return Yi(a, b2, b2.pendingProps.children, c2), b2.child;
        case 10:
          a: {
            d2 = b2.type._context;
            e2 = b2.pendingProps;
            f2 = b2.memoizedProps;
            g2 = e2.value;
            G(Mg, d2._currentValue);
            d2._currentValue = g2;
            if (null !== f2)
              if (He(f2.value, g2)) {
                if (f2.children === e2.children && !Wf.current) {
                  b2 = $i(a, b2, c2);
                  break a;
                }
              } else
                for (f2 = b2.child, null !== f2 && (f2.return = b2); null !== f2; ) {
                  var h2 = f2.dependencies;
                  if (null !== h2) {
                    g2 = f2.child;
                    for (var k2 = h2.firstContext; null !== k2; ) {
                      if (k2.context === d2) {
                        if (1 === f2.tag) {
                          k2 = ch(-1, c2 & -c2);
                          k2.tag = 2;
                          var l2 = f2.updateQueue;
                          if (null !== l2) {
                            l2 = l2.shared;
                            var m2 = l2.pending;
                            null === m2 ? k2.next = k2 : (k2.next = m2.next, m2.next = k2);
                            l2.pending = k2;
                          }
                        }
                        f2.lanes |= c2;
                        k2 = f2.alternate;
                        null !== k2 && (k2.lanes |= c2);
                        Sg(
                          f2.return,
                          c2,
                          b2
                        );
                        h2.lanes |= c2;
                        break;
                      }
                      k2 = k2.next;
                    }
                  } else if (10 === f2.tag)
                    g2 = f2.type === b2.type ? null : f2.child;
                  else if (18 === f2.tag) {
                    g2 = f2.return;
                    if (null === g2)
                      throw Error(p$1(341));
                    g2.lanes |= c2;
                    h2 = g2.alternate;
                    null !== h2 && (h2.lanes |= c2);
                    Sg(g2, c2, b2);
                    g2 = f2.sibling;
                  } else
                    g2 = f2.child;
                  if (null !== g2)
                    g2.return = f2;
                  else
                    for (g2 = f2; null !== g2; ) {
                      if (g2 === b2) {
                        g2 = null;
                        break;
                      }
                      f2 = g2.sibling;
                      if (null !== f2) {
                        f2.return = g2.return;
                        g2 = f2;
                        break;
                      }
                      g2 = g2.return;
                    }
                  f2 = g2;
                }
            Yi(a, b2, e2.children, c2);
            b2 = b2.child;
          }
          return b2;
        case 9:
          return e2 = b2.type, d2 = b2.pendingProps.children, Tg(b2, c2), e2 = Vg(e2), d2 = d2(e2), b2.flags |= 1, Yi(a, b2, d2, c2), b2.child;
        case 14:
          return d2 = b2.type, e2 = Lg(d2, b2.pendingProps), e2 = Lg(d2.type, e2), aj(a, b2, d2, e2, c2);
        case 15:
          return cj(a, b2, b2.type, b2.pendingProps, c2);
        case 17:
          return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), jj(a, b2), b2.tag = 1, Zf(d2) ? (a = true, cg(b2)) : a = false, Tg(b2, c2), ph(b2, d2, e2), rh(b2, d2, e2, c2), kj(null, b2, d2, true, a, c2);
        case 19:
          return yj(a, b2, c2);
        case 22:
          return ej(a, b2, c2);
      }
      throw Error(p$1(156, b2.tag));
    };
    function Gk(a, b2) {
      return ac(a, b2);
    }
    function al(a, b2, c2, d2) {
      this.tag = a;
      this.key = c2;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = b2;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = d2;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
    }
    function Bg(a, b2, c2, d2) {
      return new al(a, b2, c2, d2);
    }
    function bj(a) {
      a = a.prototype;
      return !(!a || !a.isReactComponent);
    }
    function $k(a) {
      if ("function" === typeof a)
        return bj(a) ? 1 : 0;
      if (void 0 !== a && null !== a) {
        a = a.$$typeof;
        if (a === Da)
          return 11;
        if (a === Ga)
          return 14;
      }
      return 2;
    }
    function wh(a, b2) {
      var c2 = a.alternate;
      null === c2 ? (c2 = Bg(a.tag, b2, a.key, a.mode), c2.elementType = a.elementType, c2.type = a.type, c2.stateNode = a.stateNode, c2.alternate = a, a.alternate = c2) : (c2.pendingProps = b2, c2.type = a.type, c2.flags = 0, c2.subtreeFlags = 0, c2.deletions = null);
      c2.flags = a.flags & 14680064;
      c2.childLanes = a.childLanes;
      c2.lanes = a.lanes;
      c2.child = a.child;
      c2.memoizedProps = a.memoizedProps;
      c2.memoizedState = a.memoizedState;
      c2.updateQueue = a.updateQueue;
      b2 = a.dependencies;
      c2.dependencies = null === b2 ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
      c2.sibling = a.sibling;
      c2.index = a.index;
      c2.ref = a.ref;
      return c2;
    }
    function yh(a, b2, c2, d2, e2, f2) {
      var g2 = 2;
      d2 = a;
      if ("function" === typeof a)
        bj(a) && (g2 = 1);
      else if ("string" === typeof a)
        g2 = 5;
      else
        a:
          switch (a) {
            case ya:
              return Ah(c2.children, e2, f2, b2);
            case za:
              g2 = 8;
              e2 |= 8;
              break;
            case Aa:
              return a = Bg(12, c2, b2, e2 | 2), a.elementType = Aa, a.lanes = f2, a;
            case Ea:
              return a = Bg(13, c2, b2, e2), a.elementType = Ea, a.lanes = f2, a;
            case Fa:
              return a = Bg(19, c2, b2, e2), a.elementType = Fa, a.lanes = f2, a;
            case Ia:
              return qj(c2, e2, f2, b2);
            default:
              if ("object" === typeof a && null !== a)
                switch (a.$$typeof) {
                  case Ba:
                    g2 = 10;
                    break a;
                  case Ca:
                    g2 = 9;
                    break a;
                  case Da:
                    g2 = 11;
                    break a;
                  case Ga:
                    g2 = 14;
                    break a;
                  case Ha:
                    g2 = 16;
                    d2 = null;
                    break a;
                }
              throw Error(p$1(130, null == a ? a : typeof a, ""));
          }
      b2 = Bg(g2, c2, b2, e2);
      b2.elementType = a;
      b2.type = d2;
      b2.lanes = f2;
      return b2;
    }
    function Ah(a, b2, c2, d2) {
      a = Bg(7, a, d2, b2);
      a.lanes = c2;
      return a;
    }
    function qj(a, b2, c2, d2) {
      a = Bg(22, a, d2, b2);
      a.elementType = Ia;
      a.lanes = c2;
      a.stateNode = { isHidden: false };
      return a;
    }
    function xh(a, b2, c2) {
      a = Bg(6, a, null, b2);
      a.lanes = c2;
      return a;
    }
    function zh(a, b2, c2) {
      b2 = Bg(4, null !== a.children ? a.children : [], a.key, b2);
      b2.lanes = c2;
      b2.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
      return b2;
    }
    function bl(a, b2, c2, d2, e2) {
      this.tag = b2;
      this.containerInfo = a;
      this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = -1;
      this.callbackNode = this.pendingContext = this.context = null;
      this.callbackPriority = 0;
      this.eventTimes = zc(0);
      this.expirationTimes = zc(-1);
      this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
      this.entanglements = zc(0);
      this.identifierPrefix = d2;
      this.onRecoverableError = e2;
      this.mutableSourceEagerHydrationData = null;
    }
    function cl(a, b2, c2, d2, e2, f2, g2, h2, k2) {
      a = new bl(a, b2, c2, h2, k2);
      1 === b2 ? (b2 = 1, true === f2 && (b2 |= 8)) : b2 = 0;
      f2 = Bg(3, null, null, b2);
      a.current = f2;
      f2.stateNode = a;
      f2.memoizedState = { element: d2, isDehydrated: c2, cache: null, transitions: null, pendingSuspenseBoundaries: null };
      ah(f2);
      return a;
    }
    function dl(a, b2, c2) {
      var d2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return { $$typeof: wa, key: null == d2 ? null : "" + d2, children: a, containerInfo: b2, implementation: c2 };
    }
    function el(a) {
      if (!a)
        return Vf;
      a = a._reactInternals;
      a: {
        if (Vb(a) !== a || 1 !== a.tag)
          throw Error(p$1(170));
        var b2 = a;
        do {
          switch (b2.tag) {
            case 3:
              b2 = b2.stateNode.context;
              break a;
            case 1:
              if (Zf(b2.type)) {
                b2 = b2.stateNode.__reactInternalMemoizedMergedChildContext;
                break a;
              }
          }
          b2 = b2.return;
        } while (null !== b2);
        throw Error(p$1(171));
      }
      if (1 === a.tag) {
        var c2 = a.type;
        if (Zf(c2))
          return bg(a, c2, b2);
      }
      return b2;
    }
    function fl(a, b2, c2, d2, e2, f2, g2, h2, k2) {
      a = cl(c2, d2, true, a, e2, f2, g2, h2, k2);
      a.context = el(null);
      c2 = a.current;
      d2 = L();
      e2 = lh(c2);
      f2 = ch(d2, e2);
      f2.callback = void 0 !== b2 && null !== b2 ? b2 : null;
      dh(c2, f2, e2);
      a.current.lanes = e2;
      Ac(a, e2, d2);
      Ek(a, d2);
      return a;
    }
    function gl(a, b2, c2, d2) {
      var e2 = b2.current, f2 = L(), g2 = lh(e2);
      c2 = el(c2);
      null === b2.context ? b2.context = c2 : b2.pendingContext = c2;
      b2 = ch(f2, g2);
      b2.payload = { element: a };
      d2 = void 0 === d2 ? null : d2;
      null !== d2 && (b2.callback = d2);
      a = dh(e2, b2, g2);
      null !== a && (mh(a, e2, g2, f2), eh(a, e2, g2));
      return g2;
    }
    function hl(a) {
      a = a.current;
      if (!a.child)
        return null;
      switch (a.child.tag) {
        case 5:
          return a.child.stateNode;
        default:
          return a.child.stateNode;
      }
    }
    function il(a, b2) {
      a = a.memoizedState;
      if (null !== a && null !== a.dehydrated) {
        var c2 = a.retryLane;
        a.retryLane = 0 !== c2 && c2 < b2 ? c2 : b2;
      }
    }
    function jl(a, b2) {
      il(a, b2);
      (a = a.alternate) && il(a, b2);
    }
    function kl() {
      return null;
    }
    var ll = "function" === typeof reportError ? reportError : function(a) {
      console.error(a);
    };
    function ml(a) {
      this._internalRoot = a;
    }
    nl.prototype.render = ml.prototype.render = function(a) {
      var b2 = this._internalRoot;
      if (null === b2)
        throw Error(p$1(409));
      gl(a, b2, null, null);
    };
    nl.prototype.unmount = ml.prototype.unmount = function() {
      var a = this._internalRoot;
      if (null !== a) {
        this._internalRoot = null;
        var b2 = a.containerInfo;
        Sk(function() {
          gl(null, a, null, null);
        });
        b2[uf] = null;
      }
    };
    function nl(a) {
      this._internalRoot = a;
    }
    nl.prototype.unstable_scheduleHydration = function(a) {
      if (a) {
        var b2 = Hc();
        a = { blockedOn: null, target: a, priority: b2 };
        for (var c2 = 0; c2 < Qc.length && 0 !== b2 && b2 < Qc[c2].priority; c2++)
          ;
        Qc.splice(c2, 0, a);
        0 === c2 && Vc(a);
      }
    };
    function ol(a) {
      return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
    }
    function pl(a) {
      return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
    }
    function ql() {
    }
    function rl(a, b2, c2, d2, e2) {
      if (e2) {
        if ("function" === typeof d2) {
          var f2 = d2;
          d2 = function() {
            var a2 = hl(g2);
            f2.call(a2);
          };
        }
        var g2 = fl(b2, d2, a, 0, null, false, false, "", ql);
        a._reactRootContainer = g2;
        a[uf] = g2.current;
        sf(8 === a.nodeType ? a.parentNode : a);
        Sk();
        return g2;
      }
      for (; e2 = a.lastChild; )
        a.removeChild(e2);
      if ("function" === typeof d2) {
        var h2 = d2;
        d2 = function() {
          var a2 = hl(k2);
          h2.call(a2);
        };
      }
      var k2 = cl(a, 0, false, null, null, false, false, "", ql);
      a._reactRootContainer = k2;
      a[uf] = k2.current;
      sf(8 === a.nodeType ? a.parentNode : a);
      Sk(function() {
        gl(b2, k2, c2, d2);
      });
      return k2;
    }
    function sl(a, b2, c2, d2, e2) {
      var f2 = c2._reactRootContainer;
      if (f2) {
        var g2 = f2;
        if ("function" === typeof e2) {
          var h2 = e2;
          e2 = function() {
            var a2 = hl(g2);
            h2.call(a2);
          };
        }
        gl(b2, g2, a, e2);
      } else
        g2 = rl(c2, b2, a, e2, d2);
      return hl(g2);
    }
    Ec = function(a) {
      switch (a.tag) {
        case 3:
          var b2 = a.stateNode;
          if (b2.current.memoizedState.isDehydrated) {
            var c2 = tc(b2.pendingLanes);
            0 !== c2 && (Cc(b2, c2 | 1), Ek(b2, B()), 0 === (K & 6) && (Hj = B() + 500, jg()));
          }
          break;
        case 13:
          Sk(function() {
            var b3 = Zg(a, 1);
            if (null !== b3) {
              var c3 = L();
              mh(b3, a, 1, c3);
            }
          }), jl(a, 1);
      }
    };
    Fc = function(a) {
      if (13 === a.tag) {
        var b2 = Zg(a, 134217728);
        if (null !== b2) {
          var c2 = L();
          mh(b2, a, 134217728, c2);
        }
        jl(a, 134217728);
      }
    };
    Gc = function(a) {
      if (13 === a.tag) {
        var b2 = lh(a), c2 = Zg(a, b2);
        if (null !== c2) {
          var d2 = L();
          mh(c2, a, b2, d2);
        }
        jl(a, b2);
      }
    };
    Hc = function() {
      return C;
    };
    Ic = function(a, b2) {
      var c2 = C;
      try {
        return C = a, b2();
      } finally {
        C = c2;
      }
    };
    yb = function(a, b2, c2) {
      switch (b2) {
        case "input":
          bb(a, c2);
          b2 = c2.name;
          if ("radio" === c2.type && null != b2) {
            for (c2 = a; c2.parentNode; )
              c2 = c2.parentNode;
            c2 = c2.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
            for (b2 = 0; b2 < c2.length; b2++) {
              var d2 = c2[b2];
              if (d2 !== a && d2.form === a.form) {
                var e2 = Db(d2);
                if (!e2)
                  throw Error(p$1(90));
                Wa(d2);
                bb(d2, e2);
              }
            }
          }
          break;
        case "textarea":
          ib(a, c2);
          break;
        case "select":
          b2 = c2.value, null != b2 && fb(a, !!c2.multiple, b2, false);
      }
    };
    Gb = Rk;
    Hb = Sk;
    var tl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Rk] }, ul = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" };
    var vl = { bundleType: ul.bundleType, version: ul.version, rendererPackageName: ul.rendererPackageName, rendererConfig: ul.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
      a = Zb(a);
      return null === a ? null : a.stateNode;
    }, findFiberByHostInstance: ul.findFiberByHostInstance || kl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
    if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
      var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (!wl.isDisabled && wl.supportsFiber)
        try {
          kc = wl.inject(vl), lc = wl;
        } catch (a) {
        }
    }
    reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
    reactDom_production_min.createPortal = function(a, b2) {
      var c2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
      if (!ol(b2))
        throw Error(p$1(200));
      return dl(a, b2, null, c2);
    };
    reactDom_production_min.createRoot = function(a, b2) {
      if (!ol(a))
        throw Error(p$1(299));
      var c2 = false, d2 = "", e2 = ll;
      null !== b2 && void 0 !== b2 && (true === b2.unstable_strictMode && (c2 = true), void 0 !== b2.identifierPrefix && (d2 = b2.identifierPrefix), void 0 !== b2.onRecoverableError && (e2 = b2.onRecoverableError));
      b2 = cl(a, 1, false, null, null, c2, false, d2, e2);
      a[uf] = b2.current;
      sf(8 === a.nodeType ? a.parentNode : a);
      return new ml(b2);
    };
    reactDom_production_min.findDOMNode = function(a) {
      if (null == a)
        return null;
      if (1 === a.nodeType)
        return a;
      var b2 = a._reactInternals;
      if (void 0 === b2) {
        if ("function" === typeof a.render)
          throw Error(p$1(188));
        a = Object.keys(a).join(",");
        throw Error(p$1(268, a));
      }
      a = Zb(b2);
      a = null === a ? null : a.stateNode;
      return a;
    };
    reactDom_production_min.flushSync = function(a) {
      return Sk(a);
    };
    reactDom_production_min.hydrate = function(a, b2, c2) {
      if (!pl(b2))
        throw Error(p$1(200));
      return sl(null, a, b2, true, c2);
    };
    reactDom_production_min.hydrateRoot = function(a, b2, c2) {
      if (!ol(a))
        throw Error(p$1(405));
      var d2 = null != c2 && c2.hydratedSources || null, e2 = false, f2 = "", g2 = ll;
      null !== c2 && void 0 !== c2 && (true === c2.unstable_strictMode && (e2 = true), void 0 !== c2.identifierPrefix && (f2 = c2.identifierPrefix), void 0 !== c2.onRecoverableError && (g2 = c2.onRecoverableError));
      b2 = fl(b2, null, a, 1, null != c2 ? c2 : null, e2, false, f2, g2);
      a[uf] = b2.current;
      sf(a);
      if (d2)
        for (a = 0; a < d2.length; a++)
          c2 = d2[a], e2 = c2._getVersion, e2 = e2(c2._source), null == b2.mutableSourceEagerHydrationData ? b2.mutableSourceEagerHydrationData = [c2, e2] : b2.mutableSourceEagerHydrationData.push(
            c2,
            e2
          );
      return new nl(b2);
    };
    reactDom_production_min.render = function(a, b2, c2) {
      if (!pl(b2))
        throw Error(p$1(200));
      return sl(null, a, b2, false, c2);
    };
    reactDom_production_min.unmountComponentAtNode = function(a) {
      if (!pl(a))
        throw Error(p$1(40));
      return a._reactRootContainer ? (Sk(function() {
        sl(null, null, a, false, function() {
          a._reactRootContainer = null;
          a[uf] = null;
        });
      }), true) : false;
    };
    reactDom_production_min.unstable_batchedUpdates = Rk;
    reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a, b2, c2, d2) {
      if (!pl(c2))
        throw Error(p$1(200));
      if (null == a || void 0 === a._reactInternals)
        throw Error(p$1(38));
      return sl(a, b2, c2, false, d2);
    };
    reactDom_production_min.version = "18.2.0-next-9e3b772b8-20220608";
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    {
      checkDCE();
      reactDom.exports = reactDom_production_min;
    }
    var reactDomExports = reactDom.exports;
    var createRoot;
    var m$1 = reactDomExports;
    {
      createRoot = m$1.createRoot;
      m$1.hydrateRoot;
    }
    const isDefined = (v2) => v2 !== void 0 && v2 !== null;
    const isObject$3 = (v2) => typeof v2 === "object" && v2 !== null;
    const isArray$3 = (v2) => Array.isArray(v2);
    const isString$2 = (v2) => typeof v2 === "string";
    const isEmptyString = (v2) => v2.length === 0;
    const isEmptyObject = (v2) => Object.keys(v2).length === 0;
    const $global = function() {
      if (typeof globalThis !== "undefined") {
        return globalThis;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      try {
        return new Function("return this")();
      } catch (_a) {
        return {};
      }
    }();
    if ($global.trustedTypes === void 0) {
      $global.trustedTypes = { createPolicy: (n2, r2) => r2 };
    }
    const propConfig = {
      configurable: false,
      enumerable: false,
      writable: false
    };
    if ($global.FAST === void 0) {
      Reflect.defineProperty($global, "FAST", Object.assign({ value: /* @__PURE__ */ Object.create(null) }, propConfig));
    }
    const FAST = $global.FAST;
    if (FAST.getById === void 0) {
      const storage = /* @__PURE__ */ Object.create(null);
      Reflect.defineProperty(FAST, "getById", Object.assign({ value(id2, initialize) {
        let found = storage[id2];
        if (found === void 0) {
          found = initialize ? storage[id2] = initialize() : null;
        }
        return found;
      } }, propConfig));
    }
    const emptyArray = Object.freeze([]);
    function createMetadataLocator() {
      const metadataLookup = /* @__PURE__ */ new WeakMap();
      return function(target) {
        let metadata = metadataLookup.get(target);
        if (metadata === void 0) {
          let currentTarget = Reflect.getPrototypeOf(target);
          while (metadata === void 0 && currentTarget !== null) {
            metadata = metadataLookup.get(currentTarget);
            currentTarget = Reflect.getPrototypeOf(currentTarget);
          }
          metadata = metadata === void 0 ? [] : metadata.slice(0);
          metadataLookup.set(target, metadata);
        }
        return metadata;
      };
    }
    const updateQueue = $global.FAST.getById(1, () => {
      const tasks = [];
      const pendingErrors = [];
      function throwFirstError() {
        if (pendingErrors.length) {
          throw pendingErrors.shift();
        }
      }
      function tryRunTask(task) {
        try {
          task.call();
        } catch (error) {
          pendingErrors.push(error);
          setTimeout(throwFirstError, 0);
        }
      }
      function process() {
        const capacity = 1024;
        let index = 0;
        while (index < tasks.length) {
          tryRunTask(tasks[index]);
          index++;
          if (index > capacity) {
            for (let scan = 0, newLength = tasks.length - index; scan < newLength; scan++) {
              tasks[scan] = tasks[scan + index];
            }
            tasks.length -= index;
            index = 0;
          }
        }
        tasks.length = 0;
      }
      function enqueue(callable) {
        if (tasks.length < 1) {
          $global.requestAnimationFrame(process);
        }
        tasks.push(callable);
      }
      return Object.freeze({
        enqueue,
        process
      });
    });
    const fastHTMLPolicy = $global.trustedTypes.createPolicy("fast-html", {
      createHTML: (html2) => html2
    });
    let htmlPolicy = fastHTMLPolicy;
    const marker = `fast-${Math.random().toString(36).substring(2, 8)}`;
    const _interpolationStart = `${marker}{`;
    const _interpolationEnd = `}${marker}`;
    const DOM = Object.freeze({
      /**
       * Indicates whether the DOM supports the adoptedStyleSheets feature.
       */
      supportsAdoptedStyleSheets: Array.isArray(document.adoptedStyleSheets) && "replace" in CSSStyleSheet.prototype,
      /**
       * Sets the HTML trusted types policy used by the templating engine.
       * @param policy - The policy to set for HTML.
       * @remarks
       * This API can only be called once, for security reasons. It should be
       * called by the application developer at the start of their program.
       */
      setHTMLPolicy(policy) {
        if (htmlPolicy !== fastHTMLPolicy) {
          throw new Error("The HTML policy can only be set once.");
        }
        htmlPolicy = policy;
      },
      /**
       * Turns a string into trusted HTML using the configured trusted types policy.
       * @param html - The string to turn into trusted HTML.
       * @remarks
       * Used internally by the template engine when creating templates
       * and setting innerHTML.
       */
      createHTML(html2) {
        return htmlPolicy.createHTML(html2);
      },
      /**
       * Determines if the provided node is a template marker used by the runtime.
       * @param node - The node to test.
       */
      isMarker(node) {
        return node && node.nodeType === 8 && node.data.startsWith(marker);
      },
      /**
       * Given a marker node, extract the {@link HTMLDirective} index from the placeholder.
       * @param node - The marker node to extract the index from.
       */
      extractDirectiveIndexFromMarker(node) {
        return parseInt(node.data.replace(`${marker}:`, ""));
      },
      /**
       * Creates a placeholder string suitable for marking out a location *within*
       * an attribute value or HTML content.
       * @param index - The directive index to create the placeholder for.
       * @remarks
       * Used internally by binding directives.
       */
      createInterpolationPlaceholder(index) {
        return `${_interpolationStart}${index}${_interpolationEnd}`;
      },
      /**
       * Creates a placeholder that manifests itself as an attribute on an
       * element.
       * @param attributeName - The name of the custom attribute.
       * @param index - The directive index to create the placeholder for.
       * @remarks
       * Used internally by attribute directives such as `ref`, `slotted`, and `children`.
       */
      createCustomAttributePlaceholder(attributeName, index) {
        return `${attributeName}="${this.createInterpolationPlaceholder(index)}"`;
      },
      /**
       * Creates a placeholder that manifests itself as a marker within the DOM structure.
       * @param index - The directive index to create the placeholder for.
       * @remarks
       * Used internally by structural directives such as `repeat`.
       */
      createBlockPlaceholder(index) {
        return `<!--${marker}:${index}-->`;
      },
      /**
       * Schedules DOM update work in the next async batch.
       * @param callable - The callable function or object to queue.
       */
      queueUpdate: updateQueue.enqueue,
      /**
       * Immediately processes all work previously scheduled
       * through queueUpdate.
       * @remarks
       * This also forces nextUpdate promises
       * to resolve.
       */
      processUpdates: updateQueue.process,
      /**
       * Resolves with the next DOM update.
       */
      nextUpdate() {
        return new Promise(updateQueue.enqueue);
      },
      /**
       * Sets an attribute value on an element.
       * @param element - The element to set the attribute value on.
       * @param attributeName - The attribute name to set.
       * @param value - The value of the attribute to set.
       * @remarks
       * If the value is `null` or `undefined`, the attribute is removed, otherwise
       * it is set to the provided value using the standard `setAttribute` API.
       */
      setAttribute(element, attributeName, value) {
        if (value === null || value === void 0) {
          element.removeAttribute(attributeName);
        } else {
          element.setAttribute(attributeName, value);
        }
      },
      /**
       * Sets a boolean attribute value.
       * @param element - The element to set the boolean attribute value on.
       * @param attributeName - The attribute name to set.
       * @param value - The value of the attribute to set.
       * @remarks
       * If the value is true, the attribute is added; otherwise it is removed.
       */
      setBooleanAttribute(element, attributeName, value) {
        value ? element.setAttribute(attributeName, "") : element.removeAttribute(attributeName);
      },
      /**
       * Removes all the child nodes of the provided parent node.
       * @param parent - The node to remove the children from.
       */
      removeChildNodes(parent) {
        for (let child = parent.firstChild; child !== null; child = parent.firstChild) {
          parent.removeChild(child);
        }
      },
      /**
       * Creates a TreeWalker configured to walk a template fragment.
       * @param fragment - The fragment to walk.
       */
      createTemplateWalker(fragment) {
        return document.createTreeWalker(
          fragment,
          133,
          // element, text, comment
          null,
          false
        );
      }
    });
    class SubscriberSet {
      /**
       * Creates an instance of SubscriberSet for the specified source.
       * @param source - The object source that subscribers will receive notifications from.
       * @param initialSubscriber - An initial subscriber to changes.
       */
      constructor(source, initialSubscriber) {
        this.sub1 = void 0;
        this.sub2 = void 0;
        this.spillover = void 0;
        this.source = source;
        this.sub1 = initialSubscriber;
      }
      /**
       * Checks whether the provided subscriber has been added to this set.
       * @param subscriber - The subscriber to test for inclusion in this set.
       */
      has(subscriber) {
        return this.spillover === void 0 ? this.sub1 === subscriber || this.sub2 === subscriber : this.spillover.indexOf(subscriber) !== -1;
      }
      /**
       * Subscribes to notification of changes in an object's state.
       * @param subscriber - The object that is subscribing for change notification.
       */
      subscribe(subscriber) {
        const spillover = this.spillover;
        if (spillover === void 0) {
          if (this.has(subscriber)) {
            return;
          }
          if (this.sub1 === void 0) {
            this.sub1 = subscriber;
            return;
          }
          if (this.sub2 === void 0) {
            this.sub2 = subscriber;
            return;
          }
          this.spillover = [this.sub1, this.sub2, subscriber];
          this.sub1 = void 0;
          this.sub2 = void 0;
        } else {
          const index = spillover.indexOf(subscriber);
          if (index === -1) {
            spillover.push(subscriber);
          }
        }
      }
      /**
       * Unsubscribes from notification of changes in an object's state.
       * @param subscriber - The object that is unsubscribing from change notification.
       */
      unsubscribe(subscriber) {
        const spillover = this.spillover;
        if (spillover === void 0) {
          if (this.sub1 === subscriber) {
            this.sub1 = void 0;
          } else if (this.sub2 === subscriber) {
            this.sub2 = void 0;
          }
        } else {
          const index = spillover.indexOf(subscriber);
          if (index !== -1) {
            spillover.splice(index, 1);
          }
        }
      }
      /**
       * Notifies all subscribers.
       * @param args - Data passed along to subscribers during notification.
       */
      notify(args) {
        const spillover = this.spillover;
        const source = this.source;
        if (spillover === void 0) {
          const sub1 = this.sub1;
          const sub2 = this.sub2;
          if (sub1 !== void 0) {
            sub1.handleChange(source, args);
          }
          if (sub2 !== void 0) {
            sub2.handleChange(source, args);
          }
        } else {
          for (let i = 0, ii2 = spillover.length; i < ii2; ++i) {
            spillover[i].handleChange(source, args);
          }
        }
      }
    }
    class PropertyChangeNotifier {
      /**
       * Creates an instance of PropertyChangeNotifier for the specified source.
       * @param source - The object source that subscribers will receive notifications from.
       */
      constructor(source) {
        this.subscribers = {};
        this.sourceSubscribers = null;
        this.source = source;
      }
      /**
       * Notifies all subscribers, based on the specified property.
       * @param propertyName - The property name, passed along to subscribers during notification.
       */
      notify(propertyName) {
        var _a;
        const subscribers = this.subscribers[propertyName];
        if (subscribers !== void 0) {
          subscribers.notify(propertyName);
        }
        (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.notify(propertyName);
      }
      /**
       * Subscribes to notification of changes in an object's state.
       * @param subscriber - The object that is subscribing for change notification.
       * @param propertyToWatch - The name of the property that the subscriber is interested in watching for changes.
       */
      subscribe(subscriber, propertyToWatch) {
        var _a;
        if (propertyToWatch) {
          let subscribers = this.subscribers[propertyToWatch];
          if (subscribers === void 0) {
            this.subscribers[propertyToWatch] = subscribers = new SubscriberSet(this.source);
          }
          subscribers.subscribe(subscriber);
        } else {
          this.sourceSubscribers = (_a = this.sourceSubscribers) !== null && _a !== void 0 ? _a : new SubscriberSet(this.source);
          this.sourceSubscribers.subscribe(subscriber);
        }
      }
      /**
       * Unsubscribes from notification of changes in an object's state.
       * @param subscriber - The object that is unsubscribing from change notification.
       * @param propertyToUnwatch - The name of the property that the subscriber is no longer interested in watching.
       */
      unsubscribe(subscriber, propertyToUnwatch) {
        var _a;
        if (propertyToUnwatch) {
          const subscribers = this.subscribers[propertyToUnwatch];
          if (subscribers !== void 0) {
            subscribers.unsubscribe(subscriber);
          }
        } else {
          (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.unsubscribe(subscriber);
        }
      }
    }
    const Observable = FAST.getById(2, () => {
      const volatileRegex = /(:|&&|\|\||if)/;
      const notifierLookup = /* @__PURE__ */ new WeakMap();
      const queueUpdate = DOM.queueUpdate;
      let watcher = void 0;
      let createArrayObserver = (array) => {
        throw new Error("Must call enableArrayObservation before observing arrays.");
      };
      function getNotifier(source) {
        let found = source.$fastController || notifierLookup.get(source);
        if (found === void 0) {
          if (Array.isArray(source)) {
            found = createArrayObserver(source);
          } else {
            notifierLookup.set(source, found = new PropertyChangeNotifier(source));
          }
        }
        return found;
      }
      const getAccessors = createMetadataLocator();
      class DefaultObservableAccessor {
        constructor(name) {
          this.name = name;
          this.field = `_${name}`;
          this.callback = `${name}Changed`;
        }
        getValue(source) {
          if (watcher !== void 0) {
            watcher.watch(source, this.name);
          }
          return source[this.field];
        }
        setValue(source, newValue) {
          const field = this.field;
          const oldValue = source[field];
          if (oldValue !== newValue) {
            source[field] = newValue;
            const callback = source[this.callback];
            if (typeof callback === "function") {
              callback.call(source, oldValue, newValue);
            }
            getNotifier(source).notify(this.name);
          }
        }
      }
      class BindingObserverImplementation extends SubscriberSet {
        constructor(binding, initialSubscriber, isVolatileBinding = false) {
          super(binding, initialSubscriber);
          this.binding = binding;
          this.isVolatileBinding = isVolatileBinding;
          this.needsRefresh = true;
          this.needsQueue = true;
          this.first = this;
          this.last = null;
          this.propertySource = void 0;
          this.propertyName = void 0;
          this.notifier = void 0;
          this.next = void 0;
        }
        observe(source, context) {
          if (this.needsRefresh && this.last !== null) {
            this.disconnect();
          }
          const previousWatcher = watcher;
          watcher = this.needsRefresh ? this : void 0;
          this.needsRefresh = this.isVolatileBinding;
          const result = this.binding(source, context);
          watcher = previousWatcher;
          return result;
        }
        disconnect() {
          if (this.last !== null) {
            let current = this.first;
            while (current !== void 0) {
              current.notifier.unsubscribe(this, current.propertyName);
              current = current.next;
            }
            this.last = null;
            this.needsRefresh = this.needsQueue = true;
          }
        }
        watch(propertySource, propertyName) {
          const prev = this.last;
          const notifier = getNotifier(propertySource);
          const current = prev === null ? this.first : {};
          current.propertySource = propertySource;
          current.propertyName = propertyName;
          current.notifier = notifier;
          notifier.subscribe(this, propertyName);
          if (prev !== null) {
            if (!this.needsRefresh) {
              let prevValue;
              watcher = void 0;
              prevValue = prev.propertySource[prev.propertyName];
              watcher = this;
              if (propertySource === prevValue) {
                this.needsRefresh = true;
              }
            }
            prev.next = current;
          }
          this.last = current;
        }
        handleChange() {
          if (this.needsQueue) {
            this.needsQueue = false;
            queueUpdate(this);
          }
        }
        call() {
          if (this.last !== null) {
            this.needsQueue = true;
            this.notify(this);
          }
        }
        records() {
          let next = this.first;
          return {
            next: () => {
              const current = next;
              if (current === void 0) {
                return { value: void 0, done: true };
              } else {
                next = next.next;
                return {
                  value: current,
                  done: false
                };
              }
            },
            [Symbol.iterator]: function() {
              return this;
            }
          };
        }
      }
      return Object.freeze({
        /**
         * @internal
         * @param factory - The factory used to create array observers.
         */
        setArrayObserverFactory(factory) {
          createArrayObserver = factory;
        },
        /**
         * Gets a notifier for an object or Array.
         * @param source - The object or Array to get the notifier for.
         */
        getNotifier,
        /**
         * Records a property change for a source object.
         * @param source - The object to record the change against.
         * @param propertyName - The property to track as changed.
         */
        track(source, propertyName) {
          if (watcher !== void 0) {
            watcher.watch(source, propertyName);
          }
        },
        /**
         * Notifies watchers that the currently executing property getter or function is volatile
         * with respect to its observable dependencies.
         */
        trackVolatile() {
          if (watcher !== void 0) {
            watcher.needsRefresh = true;
          }
        },
        /**
         * Notifies subscribers of a source object of changes.
         * @param source - the object to notify of changes.
         * @param args - The change args to pass to subscribers.
         */
        notify(source, args) {
          getNotifier(source).notify(args);
        },
        /**
         * Defines an observable property on an object or prototype.
         * @param target - The target object to define the observable on.
         * @param nameOrAccessor - The name of the property to define as observable;
         * or a custom accessor that specifies the property name and accessor implementation.
         */
        defineProperty(target, nameOrAccessor) {
          if (typeof nameOrAccessor === "string") {
            nameOrAccessor = new DefaultObservableAccessor(nameOrAccessor);
          }
          getAccessors(target).push(nameOrAccessor);
          Reflect.defineProperty(target, nameOrAccessor.name, {
            enumerable: true,
            get: function() {
              return nameOrAccessor.getValue(this);
            },
            set: function(newValue) {
              nameOrAccessor.setValue(this, newValue);
            }
          });
        },
        /**
         * Finds all the observable accessors defined on the target,
         * including its prototype chain.
         * @param target - The target object to search for accessor on.
         */
        getAccessors,
        /**
         * Creates a {@link BindingObserver} that can watch the
         * provided {@link Binding} for changes.
         * @param binding - The binding to observe.
         * @param initialSubscriber - An initial subscriber to changes in the binding value.
         * @param isVolatileBinding - Indicates whether the binding's dependency list must be re-evaluated on every value evaluation.
         */
        binding(binding, initialSubscriber, isVolatileBinding = this.isVolatileBinding(binding)) {
          return new BindingObserverImplementation(binding, initialSubscriber, isVolatileBinding);
        },
        /**
         * Determines whether a binding expression is volatile and needs to have its dependency list re-evaluated
         * on every evaluation of the value.
         * @param binding - The binding to inspect.
         */
        isVolatileBinding(binding) {
          return volatileRegex.test(binding.toString());
        }
      });
    });
    function observable(target, nameOrAccessor) {
      Observable.defineProperty(target, nameOrAccessor);
    }
    function volatile(target, name, descriptor) {
      return Object.assign({}, descriptor, {
        get: function() {
          Observable.trackVolatile();
          return descriptor.get.apply(this);
        }
      });
    }
    const contextEvent = FAST.getById(3, () => {
      let current = null;
      return {
        get() {
          return current;
        },
        set(event) {
          current = event;
        }
      };
    });
    class ExecutionContext {
      constructor() {
        this.index = 0;
        this.length = 0;
        this.parent = null;
        this.parentContext = null;
      }
      /**
       * The current event within an event handler.
       */
      get event() {
        return contextEvent.get();
      }
      /**
       * Indicates whether the current item within a repeat context
       * has an even index.
       */
      get isEven() {
        return this.index % 2 === 0;
      }
      /**
       * Indicates whether the current item within a repeat context
       * has an odd index.
       */
      get isOdd() {
        return this.index % 2 !== 0;
      }
      /**
       * Indicates whether the current item within a repeat context
       * is the first item in the collection.
       */
      get isFirst() {
        return this.index === 0;
      }
      /**
       * Indicates whether the current item within a repeat context
       * is somewhere in the middle of the collection.
       */
      get isInMiddle() {
        return !this.isFirst && !this.isLast;
      }
      /**
       * Indicates whether the current item within a repeat context
       * is the last item in the collection.
       */
      get isLast() {
        return this.index === this.length - 1;
      }
      /**
       * Sets the event for the current execution context.
       * @param event - The event to set.
       * @internal
       */
      static setEvent(event) {
        contextEvent.set(event);
      }
    }
    Observable.defineProperty(ExecutionContext.prototype, "index");
    Observable.defineProperty(ExecutionContext.prototype, "length");
    const defaultExecutionContext = Object.seal(new ExecutionContext());
    class HTMLDirective {
      constructor() {
        this.targetIndex = 0;
      }
    }
    class TargetedHTMLDirective extends HTMLDirective {
      constructor() {
        super(...arguments);
        this.createPlaceholder = DOM.createInterpolationPlaceholder;
      }
    }
    class AttachedBehaviorHTMLDirective extends HTMLDirective {
      /**
       *
       * @param name - The name of the behavior; used as a custom attribute on the element.
       * @param behavior - The behavior to instantiate and attach to the element.
       * @param options - Options to pass to the behavior during creation.
       */
      constructor(name, behavior, options) {
        super();
        this.name = name;
        this.behavior = behavior;
        this.options = options;
      }
      /**
       * Creates a placeholder string based on the directive's index within the template.
       * @param index - The index of the directive within the template.
       * @remarks
       * Creates a custom attribute placeholder.
       */
      createPlaceholder(index) {
        return DOM.createCustomAttributePlaceholder(this.name, index);
      }
      /**
       * Creates a behavior for the provided target node.
       * @param target - The node instance to create the behavior for.
       * @remarks
       * Creates an instance of the `behavior` type this directive was constructed with
       * and passes the target and options to that `behavior`'s constructor.
       */
      createBehavior(target) {
        return new this.behavior(target, this.options);
      }
    }
    function normalBind(source, context) {
      this.source = source;
      this.context = context;
      if (this.bindingObserver === null) {
        this.bindingObserver = Observable.binding(this.binding, this, this.isBindingVolatile);
      }
      this.updateTarget(this.bindingObserver.observe(source, context));
    }
    function triggerBind(source, context) {
      this.source = source;
      this.context = context;
      this.target.addEventListener(this.targetName, this);
    }
    function normalUnbind() {
      this.bindingObserver.disconnect();
      this.source = null;
      this.context = null;
    }
    function contentUnbind() {
      this.bindingObserver.disconnect();
      this.source = null;
      this.context = null;
      const view = this.target.$fastView;
      if (view !== void 0 && view.isComposed) {
        view.unbind();
        view.needsBindOnly = true;
      }
    }
    function triggerUnbind() {
      this.target.removeEventListener(this.targetName, this);
      this.source = null;
      this.context = null;
    }
    function updateAttributeTarget(value) {
      DOM.setAttribute(this.target, this.targetName, value);
    }
    function updateBooleanAttributeTarget(value) {
      DOM.setBooleanAttribute(this.target, this.targetName, value);
    }
    function updateContentTarget(value) {
      if (value === null || value === void 0) {
        value = "";
      }
      if (value.create) {
        this.target.textContent = "";
        let view = this.target.$fastView;
        if (view === void 0) {
          view = value.create();
        } else {
          if (this.target.$fastTemplate !== value) {
            if (view.isComposed) {
              view.remove();
              view.unbind();
            }
            view = value.create();
          }
        }
        if (!view.isComposed) {
          view.isComposed = true;
          view.bind(this.source, this.context);
          view.insertBefore(this.target);
          this.target.$fastView = view;
          this.target.$fastTemplate = value;
        } else if (view.needsBindOnly) {
          view.needsBindOnly = false;
          view.bind(this.source, this.context);
        }
      } else {
        const view = this.target.$fastView;
        if (view !== void 0 && view.isComposed) {
          view.isComposed = false;
          view.remove();
          if (view.needsBindOnly) {
            view.needsBindOnly = false;
          } else {
            view.unbind();
          }
        }
        this.target.textContent = value;
      }
    }
    function updatePropertyTarget(value) {
      this.target[this.targetName] = value;
    }
    function updateClassTarget(value) {
      const classVersions = this.classVersions || /* @__PURE__ */ Object.create(null);
      const target = this.target;
      let version = this.version || 0;
      if (value !== null && value !== void 0 && value.length) {
        const names = value.split(/\s+/);
        for (let i = 0, ii2 = names.length; i < ii2; ++i) {
          const currentName = names[i];
          if (currentName === "") {
            continue;
          }
          classVersions[currentName] = version;
          target.classList.add(currentName);
        }
      }
      this.classVersions = classVersions;
      this.version = version + 1;
      if (version === 0) {
        return;
      }
      version -= 1;
      for (const name in classVersions) {
        if (classVersions[name] === version) {
          target.classList.remove(name);
        }
      }
    }
    class HTMLBindingDirective extends TargetedHTMLDirective {
      /**
       * Creates an instance of BindingDirective.
       * @param binding - A binding that returns the data used to update the DOM.
       */
      constructor(binding) {
        super();
        this.binding = binding;
        this.bind = normalBind;
        this.unbind = normalUnbind;
        this.updateTarget = updateAttributeTarget;
        this.isBindingVolatile = Observable.isVolatileBinding(this.binding);
      }
      /**
       * Gets/sets the name of the attribute or property that this
       * binding is targeting.
       */
      get targetName() {
        return this.originalTargetName;
      }
      set targetName(value) {
        this.originalTargetName = value;
        if (value === void 0) {
          return;
        }
        switch (value[0]) {
          case ":":
            this.cleanedTargetName = value.substr(1);
            this.updateTarget = updatePropertyTarget;
            if (this.cleanedTargetName === "innerHTML") {
              const binding = this.binding;
              this.binding = (s, c2) => DOM.createHTML(binding(s, c2));
            }
            break;
          case "?":
            this.cleanedTargetName = value.substr(1);
            this.updateTarget = updateBooleanAttributeTarget;
            break;
          case "@":
            this.cleanedTargetName = value.substr(1);
            this.bind = triggerBind;
            this.unbind = triggerUnbind;
            break;
          default:
            this.cleanedTargetName = value;
            if (value === "class") {
              this.updateTarget = updateClassTarget;
            }
            break;
        }
      }
      /**
       * Makes this binding target the content of an element rather than
       * a particular attribute or property.
       */
      targetAtContent() {
        this.updateTarget = updateContentTarget;
        this.unbind = contentUnbind;
      }
      /**
       * Creates the runtime BindingBehavior instance based on the configuration
       * information stored in the BindingDirective.
       * @param target - The target node that the binding behavior should attach to.
       */
      createBehavior(target) {
        return new BindingBehavior(target, this.binding, this.isBindingVolatile, this.bind, this.unbind, this.updateTarget, this.cleanedTargetName);
      }
    }
    class BindingBehavior {
      /**
       * Creates an instance of BindingBehavior.
       * @param target - The target of the data updates.
       * @param binding - The binding that returns the latest value for an update.
       * @param isBindingVolatile - Indicates whether the binding has volatile dependencies.
       * @param bind - The operation to perform during binding.
       * @param unbind - The operation to perform during unbinding.
       * @param updateTarget - The operation to perform when updating.
       * @param targetName - The name of the target attribute or property to update.
       */
      constructor(target, binding, isBindingVolatile, bind, unbind, updateTarget, targetName) {
        this.source = null;
        this.context = null;
        this.bindingObserver = null;
        this.target = target;
        this.binding = binding;
        this.isBindingVolatile = isBindingVolatile;
        this.bind = bind;
        this.unbind = unbind;
        this.updateTarget = updateTarget;
        this.targetName = targetName;
      }
      /** @internal */
      handleChange() {
        this.updateTarget(this.bindingObserver.observe(this.source, this.context));
      }
      /** @internal */
      handleEvent(event) {
        ExecutionContext.setEvent(event);
        const result = this.binding(this.source, this.context);
        ExecutionContext.setEvent(null);
        if (result !== true) {
          event.preventDefault();
        }
      }
    }
    let sharedContext = null;
    class CompilationContext {
      addFactory(factory) {
        factory.targetIndex = this.targetIndex;
        this.behaviorFactories.push(factory);
      }
      captureContentBinding(directive) {
        directive.targetAtContent();
        this.addFactory(directive);
      }
      reset() {
        this.behaviorFactories = [];
        this.targetIndex = -1;
      }
      release() {
        sharedContext = this;
      }
      static borrow(directives) {
        const shareable = sharedContext || new CompilationContext();
        shareable.directives = directives;
        shareable.reset();
        sharedContext = null;
        return shareable;
      }
    }
    function createAggregateBinding(parts) {
      if (parts.length === 1) {
        return parts[0];
      }
      let targetName;
      const partCount = parts.length;
      const finalParts = parts.map((x2) => {
        if (typeof x2 === "string") {
          return () => x2;
        }
        targetName = x2.targetName || targetName;
        return x2.binding;
      });
      const binding = (scope, context) => {
        let output = "";
        for (let i = 0; i < partCount; ++i) {
          output += finalParts[i](scope, context);
        }
        return output;
      };
      const directive = new HTMLBindingDirective(binding);
      directive.targetName = targetName;
      return directive;
    }
    const interpolationEndLength = _interpolationEnd.length;
    function parseContent(context, value) {
      const valueParts = value.split(_interpolationStart);
      if (valueParts.length === 1) {
        return null;
      }
      const bindingParts = [];
      for (let i = 0, ii2 = valueParts.length; i < ii2; ++i) {
        const current = valueParts[i];
        const index = current.indexOf(_interpolationEnd);
        let literal;
        if (index === -1) {
          literal = current;
        } else {
          const directiveIndex = parseInt(current.substring(0, index));
          bindingParts.push(context.directives[directiveIndex]);
          literal = current.substring(index + interpolationEndLength);
        }
        if (literal !== "") {
          bindingParts.push(literal);
        }
      }
      return bindingParts;
    }
    function compileAttributes(context, node, includeBasicValues = false) {
      const attributes = node.attributes;
      for (let i = 0, ii2 = attributes.length; i < ii2; ++i) {
        const attr2 = attributes[i];
        const attrValue = attr2.value;
        const parseResult = parseContent(context, attrValue);
        let result = null;
        if (parseResult === null) {
          if (includeBasicValues) {
            result = new HTMLBindingDirective(() => attrValue);
            result.targetName = attr2.name;
          }
        } else {
          result = createAggregateBinding(parseResult);
        }
        if (result !== null) {
          node.removeAttributeNode(attr2);
          i--;
          ii2--;
          context.addFactory(result);
        }
      }
    }
    function compileContent(context, node, walker) {
      const parseResult = parseContent(context, node.textContent);
      if (parseResult !== null) {
        let lastNode = node;
        for (let i = 0, ii2 = parseResult.length; i < ii2; ++i) {
          const currentPart = parseResult[i];
          const currentNode = i === 0 ? node : lastNode.parentNode.insertBefore(document.createTextNode(""), lastNode.nextSibling);
          if (typeof currentPart === "string") {
            currentNode.textContent = currentPart;
          } else {
            currentNode.textContent = " ";
            context.captureContentBinding(currentPart);
          }
          lastNode = currentNode;
          context.targetIndex++;
          if (currentNode !== node) {
            walker.nextNode();
          }
        }
        context.targetIndex--;
      }
    }
    function compileTemplate(template, directives) {
      const fragment = template.content;
      document.adoptNode(fragment);
      const context = CompilationContext.borrow(directives);
      compileAttributes(context, template, true);
      const hostBehaviorFactories = context.behaviorFactories;
      context.reset();
      const walker = DOM.createTemplateWalker(fragment);
      let node;
      while (node = walker.nextNode()) {
        context.targetIndex++;
        switch (node.nodeType) {
          case 1:
            compileAttributes(context, node);
            break;
          case 3:
            compileContent(context, node, walker);
            break;
          case 8:
            if (DOM.isMarker(node)) {
              context.addFactory(directives[DOM.extractDirectiveIndexFromMarker(node)]);
            }
        }
      }
      let targetOffset = 0;
      if (
        // If the first node in a fragment is a marker, that means it's an unstable first node,
        // because something like a when, repeat, etc. could add nodes before the marker.
        // To mitigate this, we insert a stable first node. However, if we insert a node,
        // that will alter the result of the TreeWalker. So, we also need to offset the target index.
        DOM.isMarker(fragment.firstChild) || // Or if there is only one node and a directive, it means the template's content
        // is *only* the directive. In that case, HTMLView.dispose() misses any nodes inserted by
        // the directive. Inserting a new node ensures proper disposal of nodes added by the directive.
        fragment.childNodes.length === 1 && directives.length
      ) {
        fragment.insertBefore(document.createComment(""), fragment.firstChild);
        targetOffset = -1;
      }
      const viewBehaviorFactories = context.behaviorFactories;
      context.release();
      return {
        fragment,
        viewBehaviorFactories,
        hostBehaviorFactories,
        targetOffset
      };
    }
    const range = document.createRange();
    class HTMLView {
      /**
       * Constructs an instance of HTMLView.
       * @param fragment - The html fragment that contains the nodes for this view.
       * @param behaviors - The behaviors to be applied to this view.
       */
      constructor(fragment, behaviors) {
        this.fragment = fragment;
        this.behaviors = behaviors;
        this.source = null;
        this.context = null;
        this.firstChild = fragment.firstChild;
        this.lastChild = fragment.lastChild;
      }
      /**
       * Appends the view's DOM nodes to the referenced node.
       * @param node - The parent node to append the view's DOM nodes to.
       */
      appendTo(node) {
        node.appendChild(this.fragment);
      }
      /**
       * Inserts the view's DOM nodes before the referenced node.
       * @param node - The node to insert the view's DOM before.
       */
      insertBefore(node) {
        if (this.fragment.hasChildNodes()) {
          node.parentNode.insertBefore(this.fragment, node);
        } else {
          const end = this.lastChild;
          if (node.previousSibling === end)
            return;
          const parentNode = node.parentNode;
          let current = this.firstChild;
          let next;
          while (current !== end) {
            next = current.nextSibling;
            parentNode.insertBefore(current, node);
            current = next;
          }
          parentNode.insertBefore(end, node);
        }
      }
      /**
       * Removes the view's DOM nodes.
       * The nodes are not disposed and the view can later be re-inserted.
       */
      remove() {
        const fragment = this.fragment;
        const end = this.lastChild;
        let current = this.firstChild;
        let next;
        while (current !== end) {
          next = current.nextSibling;
          fragment.appendChild(current);
          current = next;
        }
        fragment.appendChild(end);
      }
      /**
       * Removes the view and unbinds its behaviors, disposing of DOM nodes afterward.
       * Once a view has been disposed, it cannot be inserted or bound again.
       */
      dispose() {
        const parent = this.firstChild.parentNode;
        const end = this.lastChild;
        let current = this.firstChild;
        let next;
        while (current !== end) {
          next = current.nextSibling;
          parent.removeChild(current);
          current = next;
        }
        parent.removeChild(end);
        const behaviors = this.behaviors;
        const oldSource = this.source;
        for (let i = 0, ii2 = behaviors.length; i < ii2; ++i) {
          behaviors[i].unbind(oldSource);
        }
      }
      /**
       * Binds a view's behaviors to its binding source.
       * @param source - The binding source for the view's binding behaviors.
       * @param context - The execution context to run the behaviors within.
       */
      bind(source, context) {
        const behaviors = this.behaviors;
        if (this.source === source) {
          return;
        } else if (this.source !== null) {
          const oldSource = this.source;
          this.source = source;
          this.context = context;
          for (let i = 0, ii2 = behaviors.length; i < ii2; ++i) {
            const current = behaviors[i];
            current.unbind(oldSource);
            current.bind(source, context);
          }
        } else {
          this.source = source;
          this.context = context;
          for (let i = 0, ii2 = behaviors.length; i < ii2; ++i) {
            behaviors[i].bind(source, context);
          }
        }
      }
      /**
       * Unbinds a view's behaviors from its binding source.
       */
      unbind() {
        if (this.source === null) {
          return;
        }
        const behaviors = this.behaviors;
        const oldSource = this.source;
        for (let i = 0, ii2 = behaviors.length; i < ii2; ++i) {
          behaviors[i].unbind(oldSource);
        }
        this.source = null;
      }
      /**
       * Efficiently disposes of a contiguous range of synthetic view instances.
       * @param views - A contiguous range of views to be disposed.
       */
      static disposeContiguousBatch(views) {
        if (views.length === 0) {
          return;
        }
        range.setStartBefore(views[0].firstChild);
        range.setEndAfter(views[views.length - 1].lastChild);
        range.deleteContents();
        for (let i = 0, ii2 = views.length; i < ii2; ++i) {
          const view = views[i];
          const behaviors = view.behaviors;
          const oldSource = view.source;
          for (let j = 0, jj2 = behaviors.length; j < jj2; ++j) {
            behaviors[j].unbind(oldSource);
          }
        }
      }
    }
    class ViewTemplate {
      /**
       * Creates an instance of ViewTemplate.
       * @param html - The html representing what this template will instantiate, including placeholders for directives.
       * @param directives - The directives that will be connected to placeholders in the html.
       */
      constructor(html2, directives) {
        this.behaviorCount = 0;
        this.hasHostBehaviors = false;
        this.fragment = null;
        this.targetOffset = 0;
        this.viewBehaviorFactories = null;
        this.hostBehaviorFactories = null;
        this.html = html2;
        this.directives = directives;
      }
      /**
       * Creates an HTMLView instance based on this template definition.
       * @param hostBindingTarget - The element that host behaviors will be bound to.
       */
      create(hostBindingTarget) {
        if (this.fragment === null) {
          let template;
          const html2 = this.html;
          if (typeof html2 === "string") {
            template = document.createElement("template");
            template.innerHTML = DOM.createHTML(html2);
            const fec = template.content.firstElementChild;
            if (fec !== null && fec.tagName === "TEMPLATE") {
              template = fec;
            }
          } else {
            template = html2;
          }
          const result = compileTemplate(template, this.directives);
          this.fragment = result.fragment;
          this.viewBehaviorFactories = result.viewBehaviorFactories;
          this.hostBehaviorFactories = result.hostBehaviorFactories;
          this.targetOffset = result.targetOffset;
          this.behaviorCount = this.viewBehaviorFactories.length + this.hostBehaviorFactories.length;
          this.hasHostBehaviors = this.hostBehaviorFactories.length > 0;
        }
        const fragment = this.fragment.cloneNode(true);
        const viewFactories = this.viewBehaviorFactories;
        const behaviors = new Array(this.behaviorCount);
        const walker = DOM.createTemplateWalker(fragment);
        let behaviorIndex = 0;
        let targetIndex = this.targetOffset;
        let node = walker.nextNode();
        for (let ii2 = viewFactories.length; behaviorIndex < ii2; ++behaviorIndex) {
          const factory = viewFactories[behaviorIndex];
          const factoryIndex = factory.targetIndex;
          while (node !== null) {
            if (targetIndex === factoryIndex) {
              behaviors[behaviorIndex] = factory.createBehavior(node);
              break;
            } else {
              node = walker.nextNode();
              targetIndex++;
            }
          }
        }
        if (this.hasHostBehaviors) {
          const hostFactories = this.hostBehaviorFactories;
          for (let i = 0, ii2 = hostFactories.length; i < ii2; ++i, ++behaviorIndex) {
            behaviors[behaviorIndex] = hostFactories[i].createBehavior(hostBindingTarget);
          }
        }
        return new HTMLView(fragment, behaviors);
      }
      /**
       * Creates an HTMLView from this template, binds it to the source, and then appends it to the host.
       * @param source - The data source to bind the template to.
       * @param host - The Element where the template will be rendered.
       * @param hostBindingTarget - An HTML element to target the host bindings at if different from the
       * host that the template is being attached to.
       */
      render(source, host, hostBindingTarget) {
        if (typeof host === "string") {
          host = document.getElementById(host);
        }
        if (hostBindingTarget === void 0) {
          hostBindingTarget = host;
        }
        const view = this.create(hostBindingTarget);
        view.bind(source, defaultExecutionContext);
        view.appendTo(host);
        return view;
      }
    }
    const lastAttributeNameRegex = (
      /* eslint-disable-next-line no-control-regex */
      /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/
    );
    function html(strings, ...values) {
      const directives = [];
      let html2 = "";
      for (let i = 0, ii2 = strings.length - 1; i < ii2; ++i) {
        const currentString = strings[i];
        let value = values[i];
        html2 += currentString;
        if (value instanceof ViewTemplate) {
          const template = value;
          value = () => template;
        }
        if (typeof value === "function") {
          value = new HTMLBindingDirective(value);
        }
        if (value instanceof TargetedHTMLDirective) {
          const match = lastAttributeNameRegex.exec(currentString);
          if (match !== null) {
            value.targetName = match[2];
          }
        }
        if (value instanceof HTMLDirective) {
          html2 += value.createPlaceholder(directives.length);
          directives.push(value);
        } else {
          html2 += value;
        }
      }
      html2 += strings[strings.length - 1];
      return new ViewTemplate(html2, directives);
    }
    class ElementStyles {
      constructor() {
        this.targets = /* @__PURE__ */ new WeakSet();
      }
      /** @internal */
      addStylesTo(target) {
        this.targets.add(target);
      }
      /** @internal */
      removeStylesFrom(target) {
        this.targets.delete(target);
      }
      /** @internal */
      isAttachedTo(target) {
        return this.targets.has(target);
      }
      /**
       * Associates behaviors with this set of styles.
       * @param behaviors - The behaviors to associate.
       */
      withBehaviors(...behaviors) {
        this.behaviors = this.behaviors === null ? behaviors : this.behaviors.concat(behaviors);
        return this;
      }
    }
    ElementStyles.create = (() => {
      if (DOM.supportsAdoptedStyleSheets) {
        const styleSheetCache = /* @__PURE__ */ new Map();
        return (styles) => (
          // eslint-disable-next-line @typescript-eslint/no-use-before-define
          new AdoptedStyleSheetsStyles(styles, styleSheetCache)
        );
      }
      return (styles) => new StyleElementStyles(styles);
    })();
    function reduceStyles(styles) {
      return styles.map((x2) => x2 instanceof ElementStyles ? reduceStyles(x2.styles) : [x2]).reduce((prev, curr) => prev.concat(curr), []);
    }
    function reduceBehaviors(styles) {
      return styles.map((x2) => x2 instanceof ElementStyles ? x2.behaviors : null).reduce((prev, curr) => {
        if (curr === null) {
          return prev;
        }
        if (prev === null) {
          prev = [];
        }
        return prev.concat(curr);
      }, null);
    }
    let addAdoptedStyleSheets = (target, sheets) => {
      target.adoptedStyleSheets = [...target.adoptedStyleSheets, ...sheets];
    };
    let removeAdoptedStyleSheets = (target, sheets) => {
      target.adoptedStyleSheets = target.adoptedStyleSheets.filter((x2) => sheets.indexOf(x2) === -1);
    };
    if (DOM.supportsAdoptedStyleSheets) {
      try {
        document.adoptedStyleSheets.push();
        document.adoptedStyleSheets.splice();
        addAdoptedStyleSheets = (target, sheets) => {
          target.adoptedStyleSheets.push(...sheets);
        };
        removeAdoptedStyleSheets = (target, sheets) => {
          for (const sheet of sheets) {
            const index = target.adoptedStyleSheets.indexOf(sheet);
            if (index !== -1) {
              target.adoptedStyleSheets.splice(index, 1);
            }
          }
        };
      } catch (e2) {
      }
    }
    class AdoptedStyleSheetsStyles extends ElementStyles {
      constructor(styles, styleSheetCache) {
        super();
        this.styles = styles;
        this.styleSheetCache = styleSheetCache;
        this._styleSheets = void 0;
        this.behaviors = reduceBehaviors(styles);
      }
      get styleSheets() {
        if (this._styleSheets === void 0) {
          const styles = this.styles;
          const styleSheetCache = this.styleSheetCache;
          this._styleSheets = reduceStyles(styles).map((x2) => {
            if (x2 instanceof CSSStyleSheet) {
              return x2;
            }
            let sheet = styleSheetCache.get(x2);
            if (sheet === void 0) {
              sheet = new CSSStyleSheet();
              sheet.replaceSync(x2);
              styleSheetCache.set(x2, sheet);
            }
            return sheet;
          });
        }
        return this._styleSheets;
      }
      addStylesTo(target) {
        addAdoptedStyleSheets(target, this.styleSheets);
        super.addStylesTo(target);
      }
      removeStylesFrom(target) {
        removeAdoptedStyleSheets(target, this.styleSheets);
        super.removeStylesFrom(target);
      }
    }
    let styleClassId = 0;
    function getNextStyleClass() {
      return `fast-style-class-${++styleClassId}`;
    }
    class StyleElementStyles extends ElementStyles {
      constructor(styles) {
        super();
        this.styles = styles;
        this.behaviors = null;
        this.behaviors = reduceBehaviors(styles);
        this.styleSheets = reduceStyles(styles);
        this.styleClass = getNextStyleClass();
      }
      addStylesTo(target) {
        const styleSheets = this.styleSheets;
        const styleClass = this.styleClass;
        target = this.normalizeTarget(target);
        for (let i = 0; i < styleSheets.length; i++) {
          const element = document.createElement("style");
          element.innerHTML = styleSheets[i];
          element.className = styleClass;
          target.append(element);
        }
        super.addStylesTo(target);
      }
      removeStylesFrom(target) {
        target = this.normalizeTarget(target);
        const styles = target.querySelectorAll(`.${this.styleClass}`);
        for (let i = 0, ii2 = styles.length; i < ii2; ++i) {
          target.removeChild(styles[i]);
        }
        super.removeStylesFrom(target);
      }
      isAttachedTo(target) {
        return super.isAttachedTo(this.normalizeTarget(target));
      }
      normalizeTarget(target) {
        return target === document ? document.body : target;
      }
    }
    const AttributeConfiguration = Object.freeze({
      /**
       * Locates all attribute configurations associated with a type.
       */
      locate: createMetadataLocator()
    });
    const booleanConverter = {
      toView(value) {
        return value ? "true" : "false";
      },
      fromView(value) {
        if (value === null || value === void 0 || value === "false" || value === false || value === 0) {
          return false;
        }
        return true;
      }
    };
    const nullableNumberConverter = {
      toView(value) {
        if (value === null || value === void 0) {
          return null;
        }
        const number = value * 1;
        return isNaN(number) ? null : number.toString();
      },
      fromView(value) {
        if (value === null || value === void 0) {
          return null;
        }
        const number = value * 1;
        return isNaN(number) ? null : number;
      }
    };
    class AttributeDefinition {
      /**
       * Creates an instance of AttributeDefinition.
       * @param Owner - The class constructor that owns this attribute.
       * @param name - The name of the property associated with the attribute.
       * @param attribute - The name of the attribute in HTML.
       * @param mode - The {@link AttributeMode} that describes the behavior of this attribute.
       * @param converter - A {@link ValueConverter} that integrates with the property getter/setter
       * to convert values to and from a DOM string.
       */
      constructor(Owner, name, attribute = name.toLowerCase(), mode = "reflect", converter) {
        this.guards = /* @__PURE__ */ new Set();
        this.Owner = Owner;
        this.name = name;
        this.attribute = attribute;
        this.mode = mode;
        this.converter = converter;
        this.fieldName = `_${name}`;
        this.callbackName = `${name}Changed`;
        this.hasCallback = this.callbackName in Owner.prototype;
        if (mode === "boolean" && converter === void 0) {
          this.converter = booleanConverter;
        }
      }
      /**
       * Sets the value of the attribute/property on the source element.
       * @param source - The source element to access.
       * @param value - The value to set the attribute/property to.
       */
      setValue(source, newValue) {
        const oldValue = source[this.fieldName];
        const converter = this.converter;
        if (converter !== void 0) {
          newValue = converter.fromView(newValue);
        }
        if (oldValue !== newValue) {
          source[this.fieldName] = newValue;
          this.tryReflectToAttribute(source);
          if (this.hasCallback) {
            source[this.callbackName](oldValue, newValue);
          }
          source.$fastController.notify(this.name);
        }
      }
      /**
       * Gets the value of the attribute/property on the source element.
       * @param source - The source element to access.
       */
      getValue(source) {
        Observable.track(source, this.name);
        return source[this.fieldName];
      }
      /** @internal */
      onAttributeChangedCallback(element, value) {
        if (this.guards.has(element)) {
          return;
        }
        this.guards.add(element);
        this.setValue(element, value);
        this.guards.delete(element);
      }
      tryReflectToAttribute(element) {
        const mode = this.mode;
        const guards = this.guards;
        if (guards.has(element) || mode === "fromView") {
          return;
        }
        DOM.queueUpdate(() => {
          guards.add(element);
          const latestValue = element[this.fieldName];
          switch (mode) {
            case "reflect":
              const converter = this.converter;
              DOM.setAttribute(element, this.attribute, converter !== void 0 ? converter.toView(latestValue) : latestValue);
              break;
            case "boolean":
              DOM.setBooleanAttribute(element, this.attribute, latestValue);
              break;
          }
          guards.delete(element);
        });
      }
      /**
       * Collects all attribute definitions associated with the owner.
       * @param Owner - The class constructor to collect attribute for.
       * @param attributeLists - Any existing attributes to collect and merge with those associated with the owner.
       * @internal
       */
      static collect(Owner, ...attributeLists) {
        const attributes = [];
        attributeLists.push(AttributeConfiguration.locate(Owner));
        for (let i = 0, ii2 = attributeLists.length; i < ii2; ++i) {
          const list = attributeLists[i];
          if (list === void 0) {
            continue;
          }
          for (let j = 0, jj2 = list.length; j < jj2; ++j) {
            const config = list[j];
            if (typeof config === "string") {
              attributes.push(new AttributeDefinition(Owner, config));
            } else {
              attributes.push(new AttributeDefinition(Owner, config.property, config.attribute, config.mode, config.converter));
            }
          }
        }
        return attributes;
      }
    }
    function attr(configOrTarget, prop) {
      let config;
      function decorator($target, $prop) {
        if (arguments.length > 1) {
          config.property = $prop;
        }
        AttributeConfiguration.locate($target.constructor).push(config);
      }
      if (arguments.length > 1) {
        config = {};
        decorator(configOrTarget, prop);
        return;
      }
      config = configOrTarget === void 0 ? {} : configOrTarget;
      return decorator;
    }
    const defaultShadowOptions = { mode: "open" };
    const defaultElementOptions = {};
    const fastRegistry = FAST.getById(4, () => {
      const typeToDefinition = /* @__PURE__ */ new Map();
      return Object.freeze({
        register(definition) {
          if (typeToDefinition.has(definition.type)) {
            return false;
          }
          typeToDefinition.set(definition.type, definition);
          return true;
        },
        getByType(key) {
          return typeToDefinition.get(key);
        }
      });
    });
    class FASTElementDefinition {
      /**
       * Creates an instance of FASTElementDefinition.
       * @param type - The type this definition is being created for.
       * @param nameOrConfig - The name of the element to define or a config object
       * that describes the element to define.
       */
      constructor(type, nameOrConfig = type.definition) {
        if (typeof nameOrConfig === "string") {
          nameOrConfig = { name: nameOrConfig };
        }
        this.type = type;
        this.name = nameOrConfig.name;
        this.template = nameOrConfig.template;
        const attributes = AttributeDefinition.collect(type, nameOrConfig.attributes);
        const observedAttributes = new Array(attributes.length);
        const propertyLookup = {};
        const attributeLookup = {};
        for (let i = 0, ii2 = attributes.length; i < ii2; ++i) {
          const current = attributes[i];
          observedAttributes[i] = current.attribute;
          propertyLookup[current.name] = current;
          attributeLookup[current.attribute] = current;
        }
        this.attributes = attributes;
        this.observedAttributes = observedAttributes;
        this.propertyLookup = propertyLookup;
        this.attributeLookup = attributeLookup;
        this.shadowOptions = nameOrConfig.shadowOptions === void 0 ? defaultShadowOptions : nameOrConfig.shadowOptions === null ? void 0 : Object.assign(Object.assign({}, defaultShadowOptions), nameOrConfig.shadowOptions);
        this.elementOptions = nameOrConfig.elementOptions === void 0 ? defaultElementOptions : Object.assign(Object.assign({}, defaultElementOptions), nameOrConfig.elementOptions);
        this.styles = nameOrConfig.styles === void 0 ? void 0 : Array.isArray(nameOrConfig.styles) ? ElementStyles.create(nameOrConfig.styles) : nameOrConfig.styles instanceof ElementStyles ? nameOrConfig.styles : ElementStyles.create([nameOrConfig.styles]);
      }
      /**
       * Indicates if this element has been defined in at least one registry.
       */
      get isDefined() {
        return !!fastRegistry.getByType(this.type);
      }
      /**
       * Defines a custom element based on this definition.
       * @param registry - The element registry to define the element in.
       */
      define(registry = customElements) {
        const type = this.type;
        if (fastRegistry.register(this)) {
          const attributes = this.attributes;
          const proto = type.prototype;
          for (let i = 0, ii2 = attributes.length; i < ii2; ++i) {
            Observable.defineProperty(proto, attributes[i]);
          }
          Reflect.defineProperty(type, "observedAttributes", {
            value: this.observedAttributes,
            enumerable: true
          });
        }
        if (!registry.get(this.name)) {
          registry.define(this.name, type, this.elementOptions);
        }
        return this;
      }
    }
    FASTElementDefinition.forType = fastRegistry.getByType;
    const shadowRoots = /* @__PURE__ */ new WeakMap();
    const defaultEventOptions = {
      bubbles: true,
      composed: true,
      cancelable: true
    };
    function getShadowRoot(element) {
      return element.shadowRoot || shadowRoots.get(element) || null;
    }
    class Controller extends PropertyChangeNotifier {
      /**
       * Creates a Controller to control the specified element.
       * @param element - The element to be controlled by this controller.
       * @param definition - The element definition metadata that instructs this
       * controller in how to handle rendering and other platform integrations.
       * @internal
       */
      constructor(element, definition) {
        super(element);
        this.boundObservables = null;
        this.behaviors = null;
        this.needsInitialization = true;
        this._template = null;
        this._styles = null;
        this._isConnected = false;
        this.$fastController = this;
        this.view = null;
        this.element = element;
        this.definition = definition;
        const shadowOptions = definition.shadowOptions;
        if (shadowOptions !== void 0) {
          const shadowRoot = element.attachShadow(shadowOptions);
          if (shadowOptions.mode === "closed") {
            shadowRoots.set(element, shadowRoot);
          }
        }
        const accessors = Observable.getAccessors(element);
        if (accessors.length > 0) {
          const boundObservables = this.boundObservables = /* @__PURE__ */ Object.create(null);
          for (let i = 0, ii2 = accessors.length; i < ii2; ++i) {
            const propertyName = accessors[i].name;
            const value = element[propertyName];
            if (value !== void 0) {
              delete element[propertyName];
              boundObservables[propertyName] = value;
            }
          }
        }
      }
      /**
       * Indicates whether or not the custom element has been
       * connected to the document.
       */
      get isConnected() {
        Observable.track(this, "isConnected");
        return this._isConnected;
      }
      setIsConnected(value) {
        this._isConnected = value;
        Observable.notify(this, "isConnected");
      }
      /**
       * Gets/sets the template used to render the component.
       * @remarks
       * This value can only be accurately read after connect but can be set at any time.
       */
      get template() {
        return this._template;
      }
      set template(value) {
        if (this._template === value) {
          return;
        }
        this._template = value;
        if (!this.needsInitialization) {
          this.renderTemplate(value);
        }
      }
      /**
       * Gets/sets the primary styles used for the component.
       * @remarks
       * This value can only be accurately read after connect but can be set at any time.
       */
      get styles() {
        return this._styles;
      }
      set styles(value) {
        if (this._styles === value) {
          return;
        }
        if (this._styles !== null) {
          this.removeStyles(this._styles);
        }
        this._styles = value;
        if (!this.needsInitialization && value !== null) {
          this.addStyles(value);
        }
      }
      /**
       * Adds styles to this element. Providing an HTMLStyleElement will attach the element instance to the shadowRoot.
       * @param styles - The styles to add.
       */
      addStyles(styles) {
        const target = getShadowRoot(this.element) || this.element.getRootNode();
        if (styles instanceof HTMLStyleElement) {
          target.append(styles);
        } else if (!styles.isAttachedTo(target)) {
          const sourceBehaviors = styles.behaviors;
          styles.addStylesTo(target);
          if (sourceBehaviors !== null) {
            this.addBehaviors(sourceBehaviors);
          }
        }
      }
      /**
       * Removes styles from this element. Providing an HTMLStyleElement will detach the element instance from the shadowRoot.
       * @param styles - the styles to remove.
       */
      removeStyles(styles) {
        const target = getShadowRoot(this.element) || this.element.getRootNode();
        if (styles instanceof HTMLStyleElement) {
          target.removeChild(styles);
        } else if (styles.isAttachedTo(target)) {
          const sourceBehaviors = styles.behaviors;
          styles.removeStylesFrom(target);
          if (sourceBehaviors !== null) {
            this.removeBehaviors(sourceBehaviors);
          }
        }
      }
      /**
       * Adds behaviors to this element.
       * @param behaviors - The behaviors to add.
       */
      addBehaviors(behaviors) {
        const targetBehaviors = this.behaviors || (this.behaviors = /* @__PURE__ */ new Map());
        const length = behaviors.length;
        const behaviorsToBind = [];
        for (let i = 0; i < length; ++i) {
          const behavior = behaviors[i];
          if (targetBehaviors.has(behavior)) {
            targetBehaviors.set(behavior, targetBehaviors.get(behavior) + 1);
          } else {
            targetBehaviors.set(behavior, 1);
            behaviorsToBind.push(behavior);
          }
        }
        if (this._isConnected) {
          const element = this.element;
          for (let i = 0; i < behaviorsToBind.length; ++i) {
            behaviorsToBind[i].bind(element, defaultExecutionContext);
          }
        }
      }
      /**
       * Removes behaviors from this element.
       * @param behaviors - The behaviors to remove.
       * @param force - Forces unbinding of behaviors.
       */
      removeBehaviors(behaviors, force = false) {
        const targetBehaviors = this.behaviors;
        if (targetBehaviors === null) {
          return;
        }
        const length = behaviors.length;
        const behaviorsToUnbind = [];
        for (let i = 0; i < length; ++i) {
          const behavior = behaviors[i];
          if (targetBehaviors.has(behavior)) {
            const count2 = targetBehaviors.get(behavior) - 1;
            count2 === 0 || force ? targetBehaviors.delete(behavior) && behaviorsToUnbind.push(behavior) : targetBehaviors.set(behavior, count2);
          }
        }
        if (this._isConnected) {
          const element = this.element;
          for (let i = 0; i < behaviorsToUnbind.length; ++i) {
            behaviorsToUnbind[i].unbind(element);
          }
        }
      }
      /**
       * Runs connected lifecycle behavior on the associated element.
       */
      onConnectedCallback() {
        if (this._isConnected) {
          return;
        }
        const element = this.element;
        if (this.needsInitialization) {
          this.finishInitialization();
        } else if (this.view !== null) {
          this.view.bind(element, defaultExecutionContext);
        }
        const behaviors = this.behaviors;
        if (behaviors !== null) {
          for (const [behavior] of behaviors) {
            behavior.bind(element, defaultExecutionContext);
          }
        }
        this.setIsConnected(true);
      }
      /**
       * Runs disconnected lifecycle behavior on the associated element.
       */
      onDisconnectedCallback() {
        if (!this._isConnected) {
          return;
        }
        this.setIsConnected(false);
        const view = this.view;
        if (view !== null) {
          view.unbind();
        }
        const behaviors = this.behaviors;
        if (behaviors !== null) {
          const element = this.element;
          for (const [behavior] of behaviors) {
            behavior.unbind(element);
          }
        }
      }
      /**
       * Runs the attribute changed callback for the associated element.
       * @param name - The name of the attribute that changed.
       * @param oldValue - The previous value of the attribute.
       * @param newValue - The new value of the attribute.
       */
      onAttributeChangedCallback(name, oldValue, newValue) {
        const attrDef = this.definition.attributeLookup[name];
        if (attrDef !== void 0) {
          attrDef.onAttributeChangedCallback(this.element, newValue);
        }
      }
      /**
       * Emits a custom HTML event.
       * @param type - The type name of the event.
       * @param detail - The event detail object to send with the event.
       * @param options - The event options. By default bubbles and composed.
       * @remarks
       * Only emits events if connected.
       */
      emit(type, detail, options) {
        if (this._isConnected) {
          return this.element.dispatchEvent(new CustomEvent(type, Object.assign(Object.assign({ detail }, defaultEventOptions), options)));
        }
        return false;
      }
      finishInitialization() {
        const element = this.element;
        const boundObservables = this.boundObservables;
        if (boundObservables !== null) {
          const propertyNames = Object.keys(boundObservables);
          for (let i = 0, ii2 = propertyNames.length; i < ii2; ++i) {
            const propertyName = propertyNames[i];
            element[propertyName] = boundObservables[propertyName];
          }
          this.boundObservables = null;
        }
        const definition = this.definition;
        if (this._template === null) {
          if (this.element.resolveTemplate) {
            this._template = this.element.resolveTemplate();
          } else if (definition.template) {
            this._template = definition.template || null;
          }
        }
        if (this._template !== null) {
          this.renderTemplate(this._template);
        }
        if (this._styles === null) {
          if (this.element.resolveStyles) {
            this._styles = this.element.resolveStyles();
          } else if (definition.styles) {
            this._styles = definition.styles || null;
          }
        }
        if (this._styles !== null) {
          this.addStyles(this._styles);
        }
        this.needsInitialization = false;
      }
      renderTemplate(template) {
        const element = this.element;
        const host = getShadowRoot(element) || element;
        if (this.view !== null) {
          this.view.dispose();
          this.view = null;
        } else if (!this.needsInitialization) {
          DOM.removeChildNodes(host);
        }
        if (template) {
          this.view = template.render(element, host, element);
        }
      }
      /**
       * Locates or creates a controller for the specified element.
       * @param element - The element to return the controller for.
       * @remarks
       * The specified element must have a {@link FASTElementDefinition}
       * registered either through the use of the {@link customElement}
       * decorator or a call to `FASTElement.define`.
       */
      static forCustomElement(element) {
        const controller = element.$fastController;
        if (controller !== void 0) {
          return controller;
        }
        const definition = FASTElementDefinition.forType(element.constructor);
        if (definition === void 0) {
          throw new Error("Missing FASTElement definition.");
        }
        return element.$fastController = new Controller(element, definition);
      }
    }
    function createFASTElement(BaseType) {
      return class extends BaseType {
        constructor() {
          super();
          Controller.forCustomElement(this);
        }
        $emit(type, detail, options) {
          return this.$fastController.emit(type, detail, options);
        }
        connectedCallback() {
          this.$fastController.onConnectedCallback();
        }
        disconnectedCallback() {
          this.$fastController.onDisconnectedCallback();
        }
        attributeChangedCallback(name, oldValue, newValue) {
          this.$fastController.onAttributeChangedCallback(name, oldValue, newValue);
        }
      };
    }
    const FASTElement = Object.assign(createFASTElement(HTMLElement), {
      /**
       * Creates a new FASTElement base class inherited from the
       * provided base type.
       * @param BaseType - The base element type to inherit from.
       */
      from(BaseType) {
        return createFASTElement(BaseType);
      },
      /**
       * Defines a platform custom element based on the provided type and definition.
       * @param type - The custom element type to define.
       * @param nameOrDef - The name of the element to define or a definition object
       * that describes the element to define.
       */
      define(type, nameOrDef) {
        return new FASTElementDefinition(type, nameOrDef).define().type;
      }
    });
    class CSSDirective {
      /**
       * Creates a CSS fragment to interpolate into the CSS document.
       * @returns - the string to interpolate into CSS
       */
      createCSS() {
        return "";
      }
      /**
       * Creates a behavior to bind to the host element.
       * @returns - the behavior to bind to the host element, or undefined.
       */
      createBehavior() {
        return void 0;
      }
    }
    function collectStyles(strings, values) {
      const styles = [];
      let cssString = "";
      const behaviors = [];
      for (let i = 0, ii2 = strings.length - 1; i < ii2; ++i) {
        cssString += strings[i];
        let value = values[i];
        if (value instanceof CSSDirective) {
          const behavior = value.createBehavior();
          value = value.createCSS();
          if (behavior) {
            behaviors.push(behavior);
          }
        }
        if (value instanceof ElementStyles || value instanceof CSSStyleSheet) {
          if (cssString.trim() !== "") {
            styles.push(cssString);
            cssString = "";
          }
          styles.push(value);
        } else {
          cssString += value;
        }
      }
      cssString += strings[strings.length - 1];
      if (cssString.trim() !== "") {
        styles.push(cssString);
      }
      return {
        styles,
        behaviors
      };
    }
    function css(strings, ...values) {
      const { styles, behaviors } = collectStyles(strings, values);
      const elementStyles = ElementStyles.create(styles);
      if (behaviors.length) {
        elementStyles.withBehaviors(...behaviors);
      }
      return elementStyles;
    }
    function newSplice(index, removed, addedCount) {
      return {
        index,
        removed,
        addedCount
      };
    }
    const EDIT_LEAVE = 0;
    const EDIT_UPDATE = 1;
    const EDIT_ADD = 2;
    const EDIT_DELETE = 3;
    function calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {
      const rowCount = oldEnd - oldStart + 1;
      const columnCount = currentEnd - currentStart + 1;
      const distances = new Array(rowCount);
      let north;
      let west;
      for (let i = 0; i < rowCount; ++i) {
        distances[i] = new Array(columnCount);
        distances[i][0] = i;
      }
      for (let j = 0; j < columnCount; ++j) {
        distances[0][j] = j;
      }
      for (let i = 1; i < rowCount; ++i) {
        for (let j = 1; j < columnCount; ++j) {
          if (current[currentStart + j - 1] === old[oldStart + i - 1]) {
            distances[i][j] = distances[i - 1][j - 1];
          } else {
            north = distances[i - 1][j] + 1;
            west = distances[i][j - 1] + 1;
            distances[i][j] = north < west ? north : west;
          }
        }
      }
      return distances;
    }
    function spliceOperationsFromEditDistances(distances) {
      let i = distances.length - 1;
      let j = distances[0].length - 1;
      let current = distances[i][j];
      const edits = [];
      while (i > 0 || j > 0) {
        if (i === 0) {
          edits.push(EDIT_ADD);
          j--;
          continue;
        }
        if (j === 0) {
          edits.push(EDIT_DELETE);
          i--;
          continue;
        }
        const northWest = distances[i - 1][j - 1];
        const west = distances[i - 1][j];
        const north = distances[i][j - 1];
        let min2;
        if (west < north) {
          min2 = west < northWest ? west : northWest;
        } else {
          min2 = north < northWest ? north : northWest;
        }
        if (min2 === northWest) {
          if (northWest === current) {
            edits.push(EDIT_LEAVE);
          } else {
            edits.push(EDIT_UPDATE);
            current = northWest;
          }
          i--;
          j--;
        } else if (min2 === west) {
          edits.push(EDIT_DELETE);
          i--;
          current = west;
        } else {
          edits.push(EDIT_ADD);
          j--;
          current = north;
        }
      }
      edits.reverse();
      return edits;
    }
    function sharedPrefix(current, old, searchLength) {
      for (let i = 0; i < searchLength; ++i) {
        if (current[i] !== old[i]) {
          return i;
        }
      }
      return searchLength;
    }
    function sharedSuffix(current, old, searchLength) {
      let index1 = current.length;
      let index2 = old.length;
      let count2 = 0;
      while (count2 < searchLength && current[--index1] === old[--index2]) {
        count2++;
      }
      return count2;
    }
    function intersect(start1, end1, start2, end2) {
      if (end1 < start2 || end2 < start1) {
        return -1;
      }
      if (end1 === start2 || end2 === start1) {
        return 0;
      }
      if (start1 < start2) {
        if (end1 < end2) {
          return end1 - start2;
        }
        return end2 - start2;
      }
      if (end2 < end1) {
        return end2 - start1;
      }
      return end1 - start1;
    }
    function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {
      let prefixCount = 0;
      let suffixCount = 0;
      const minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);
      if (currentStart === 0 && oldStart === 0) {
        prefixCount = sharedPrefix(current, old, minLength);
      }
      if (currentEnd === current.length && oldEnd === old.length) {
        suffixCount = sharedSuffix(current, old, minLength - prefixCount);
      }
      currentStart += prefixCount;
      oldStart += prefixCount;
      currentEnd -= suffixCount;
      oldEnd -= suffixCount;
      if (currentEnd - currentStart === 0 && oldEnd - oldStart === 0) {
        return emptyArray;
      }
      if (currentStart === currentEnd) {
        const splice3 = newSplice(currentStart, [], 0);
        while (oldStart < oldEnd) {
          splice3.removed.push(old[oldStart++]);
        }
        return [splice3];
      } else if (oldStart === oldEnd) {
        return [newSplice(currentStart, [], currentEnd - currentStart)];
      }
      const ops = spliceOperationsFromEditDistances(calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));
      const splices = [];
      let splice2 = void 0;
      let index = currentStart;
      let oldIndex = oldStart;
      for (let i = 0; i < ops.length; ++i) {
        switch (ops[i]) {
          case EDIT_LEAVE:
            if (splice2 !== void 0) {
              splices.push(splice2);
              splice2 = void 0;
            }
            index++;
            oldIndex++;
            break;
          case EDIT_UPDATE:
            if (splice2 === void 0) {
              splice2 = newSplice(index, [], 0);
            }
            splice2.addedCount++;
            index++;
            splice2.removed.push(old[oldIndex]);
            oldIndex++;
            break;
          case EDIT_ADD:
            if (splice2 === void 0) {
              splice2 = newSplice(index, [], 0);
            }
            splice2.addedCount++;
            index++;
            break;
          case EDIT_DELETE:
            if (splice2 === void 0) {
              splice2 = newSplice(index, [], 0);
            }
            splice2.removed.push(old[oldIndex]);
            oldIndex++;
            break;
        }
      }
      if (splice2 !== void 0) {
        splices.push(splice2);
      }
      return splices;
    }
    const $push = Array.prototype.push;
    function mergeSplice(splices, index, removed, addedCount) {
      const splice2 = newSplice(index, removed, addedCount);
      let inserted = false;
      let insertionOffset = 0;
      for (let i = 0; i < splices.length; i++) {
        const current = splices[i];
        current.index += insertionOffset;
        if (inserted) {
          continue;
        }
        const intersectCount = intersect(splice2.index, splice2.index + splice2.removed.length, current.index, current.index + current.addedCount);
        if (intersectCount >= 0) {
          splices.splice(i, 1);
          i--;
          insertionOffset -= current.addedCount - current.removed.length;
          splice2.addedCount += current.addedCount - intersectCount;
          const deleteCount = splice2.removed.length + current.removed.length - intersectCount;
          if (!splice2.addedCount && !deleteCount) {
            inserted = true;
          } else {
            let currentRemoved = current.removed;
            if (splice2.index < current.index) {
              const prepend = splice2.removed.slice(0, current.index - splice2.index);
              $push.apply(prepend, currentRemoved);
              currentRemoved = prepend;
            }
            if (splice2.index + splice2.removed.length > current.index + current.addedCount) {
              const append = splice2.removed.slice(current.index + current.addedCount - splice2.index);
              $push.apply(currentRemoved, append);
            }
            splice2.removed = currentRemoved;
            if (current.index < splice2.index) {
              splice2.index = current.index;
            }
          }
        } else if (splice2.index < current.index) {
          inserted = true;
          splices.splice(i, 0, splice2);
          i++;
          const offset = splice2.addedCount - splice2.removed.length;
          current.index += offset;
          insertionOffset += offset;
        }
      }
      if (!inserted) {
        splices.push(splice2);
      }
    }
    function createInitialSplices(changeRecords) {
      const splices = [];
      for (let i = 0, ii2 = changeRecords.length; i < ii2; i++) {
        const record = changeRecords[i];
        mergeSplice(splices, record.index, record.removed, record.addedCount);
      }
      return splices;
    }
    function projectArraySplices(array, changeRecords) {
      let splices = [];
      const initialSplices = createInitialSplices(changeRecords);
      for (let i = 0, ii2 = initialSplices.length; i < ii2; ++i) {
        const splice2 = initialSplices[i];
        if (splice2.addedCount === 1 && splice2.removed.length === 1) {
          if (splice2.removed[0] !== array[splice2.index]) {
            splices.push(splice2);
          }
          continue;
        }
        splices = splices.concat(calcSplices(array, splice2.index, splice2.index + splice2.addedCount, splice2.removed, 0, splice2.removed.length));
      }
      return splices;
    }
    let arrayObservationEnabled = false;
    function adjustIndex(changeRecord, array) {
      let index = changeRecord.index;
      const arrayLength = array.length;
      if (index > arrayLength) {
        index = arrayLength - changeRecord.addedCount;
      } else if (index < 0) {
        index = arrayLength + changeRecord.removed.length + index - changeRecord.addedCount;
      }
      if (index < 0) {
        index = 0;
      }
      changeRecord.index = index;
      return changeRecord;
    }
    class ArrayObserver extends SubscriberSet {
      constructor(source) {
        super(source);
        this.oldCollection = void 0;
        this.splices = void 0;
        this.needsQueue = true;
        this.call = this.flush;
        Reflect.defineProperty(source, "$fastController", {
          value: this,
          enumerable: false
        });
      }
      subscribe(subscriber) {
        this.flush();
        super.subscribe(subscriber);
      }
      addSplice(splice2) {
        if (this.splices === void 0) {
          this.splices = [splice2];
        } else {
          this.splices.push(splice2);
        }
        if (this.needsQueue) {
          this.needsQueue = false;
          DOM.queueUpdate(this);
        }
      }
      reset(oldCollection) {
        this.oldCollection = oldCollection;
        if (this.needsQueue) {
          this.needsQueue = false;
          DOM.queueUpdate(this);
        }
      }
      flush() {
        const splices = this.splices;
        const oldCollection = this.oldCollection;
        if (splices === void 0 && oldCollection === void 0) {
          return;
        }
        this.needsQueue = true;
        this.splices = void 0;
        this.oldCollection = void 0;
        const finalSplices = oldCollection === void 0 ? projectArraySplices(this.source, splices) : calcSplices(this.source, 0, this.source.length, oldCollection, 0, oldCollection.length);
        this.notify(finalSplices);
      }
    }
    function enableArrayObservation() {
      if (arrayObservationEnabled) {
        return;
      }
      arrayObservationEnabled = true;
      Observable.setArrayObserverFactory((collection) => {
        return new ArrayObserver(collection);
      });
      const proto = Array.prototype;
      if (proto.$fastPatch) {
        return;
      }
      Reflect.defineProperty(proto, "$fastPatch", {
        value: 1,
        enumerable: false
      });
      const pop = proto.pop;
      const push = proto.push;
      const reverse = proto.reverse;
      const shift = proto.shift;
      const sort = proto.sort;
      const splice2 = proto.splice;
      const unshift = proto.unshift;
      proto.pop = function() {
        const notEmpty = this.length > 0;
        const methodCallResult = pop.apply(this, arguments);
        const o = this.$fastController;
        if (o !== void 0 && notEmpty) {
          o.addSplice(newSplice(this.length, [methodCallResult], 0));
        }
        return methodCallResult;
      };
      proto.push = function() {
        const methodCallResult = push.apply(this, arguments);
        const o = this.$fastController;
        if (o !== void 0) {
          o.addSplice(adjustIndex(newSplice(this.length - arguments.length, [], arguments.length), this));
        }
        return methodCallResult;
      };
      proto.reverse = function() {
        let oldArray;
        const o = this.$fastController;
        if (o !== void 0) {
          o.flush();
          oldArray = this.slice();
        }
        const methodCallResult = reverse.apply(this, arguments);
        if (o !== void 0) {
          o.reset(oldArray);
        }
        return methodCallResult;
      };
      proto.shift = function() {
        const notEmpty = this.length > 0;
        const methodCallResult = shift.apply(this, arguments);
        const o = this.$fastController;
        if (o !== void 0 && notEmpty) {
          o.addSplice(newSplice(0, [methodCallResult], 0));
        }
        return methodCallResult;
      };
      proto.sort = function() {
        let oldArray;
        const o = this.$fastController;
        if (o !== void 0) {
          o.flush();
          oldArray = this.slice();
        }
        const methodCallResult = sort.apply(this, arguments);
        if (o !== void 0) {
          o.reset(oldArray);
        }
        return methodCallResult;
      };
      proto.splice = function() {
        const methodCallResult = splice2.apply(this, arguments);
        const o = this.$fastController;
        if (o !== void 0) {
          o.addSplice(adjustIndex(newSplice(+arguments[0], methodCallResult, arguments.length > 2 ? arguments.length - 2 : 0), this));
        }
        return methodCallResult;
      };
      proto.unshift = function() {
        const methodCallResult = unshift.apply(this, arguments);
        const o = this.$fastController;
        if (o !== void 0) {
          o.addSplice(adjustIndex(newSplice(0, [], arguments.length), this));
        }
        return methodCallResult;
      };
    }
    class RefBehavior {
      /**
       * Creates an instance of RefBehavior.
       * @param target - The element to reference.
       * @param propertyName - The name of the property to assign the reference to.
       */
      constructor(target, propertyName) {
        this.target = target;
        this.propertyName = propertyName;
      }
      /**
       * Bind this behavior to the source.
       * @param source - The source to bind to.
       * @param context - The execution context that the binding is operating within.
       */
      bind(source) {
        source[this.propertyName] = this.target;
      }
      /**
       * Unbinds this behavior from the source.
       * @param source - The source to unbind from.
       */
      /* eslint-disable-next-line @typescript-eslint/no-empty-function */
      unbind() {
      }
    }
    function ref(propertyName) {
      return new AttachedBehaviorHTMLDirective("fast-ref", RefBehavior, propertyName);
    }
    const isFunction$3 = (object) => typeof object === "function";
    const noTemplate = () => null;
    function normalizeBinding(value) {
      return value === void 0 ? noTemplate : isFunction$3(value) ? value : () => value;
    }
    function when(binding, templateOrTemplateBinding, elseTemplateOrTemplateBinding) {
      const dataBinding = isFunction$3(binding) ? binding : () => binding;
      const templateBinding = normalizeBinding(templateOrTemplateBinding);
      const elseBinding = normalizeBinding(elseTemplateOrTemplateBinding);
      return (source, context) => dataBinding(source, context) ? templateBinding(source, context) : elseBinding(source, context);
    }
    function bindWithoutPositioning(view, items, index, context) {
      view.bind(items[index], context);
    }
    function bindWithPositioning(view, items, index, context) {
      const childContext = Object.create(context);
      childContext.index = index;
      childContext.length = items.length;
      view.bind(items[index], childContext);
    }
    class RepeatBehavior {
      /**
       * Creates an instance of RepeatBehavior.
       * @param location - The location in the DOM to render the repeat.
       * @param itemsBinding - The array to render.
       * @param isItemsBindingVolatile - Indicates whether the items binding has volatile dependencies.
       * @param templateBinding - The template to render for each item.
       * @param isTemplateBindingVolatile - Indicates whether the template binding has volatile dependencies.
       * @param options - Options used to turn on special repeat features.
       */
      constructor(location, itemsBinding, isItemsBindingVolatile, templateBinding, isTemplateBindingVolatile, options) {
        this.location = location;
        this.itemsBinding = itemsBinding;
        this.templateBinding = templateBinding;
        this.options = options;
        this.source = null;
        this.views = [];
        this.items = null;
        this.itemsObserver = null;
        this.originalContext = void 0;
        this.childContext = void 0;
        this.bindView = bindWithoutPositioning;
        this.itemsBindingObserver = Observable.binding(itemsBinding, this, isItemsBindingVolatile);
        this.templateBindingObserver = Observable.binding(templateBinding, this, isTemplateBindingVolatile);
        if (options.positioning) {
          this.bindView = bindWithPositioning;
        }
      }
      /**
       * Bind this behavior to the source.
       * @param source - The source to bind to.
       * @param context - The execution context that the binding is operating within.
       */
      bind(source, context) {
        this.source = source;
        this.originalContext = context;
        this.childContext = Object.create(context);
        this.childContext.parent = source;
        this.childContext.parentContext = this.originalContext;
        this.items = this.itemsBindingObserver.observe(source, this.originalContext);
        this.template = this.templateBindingObserver.observe(source, this.originalContext);
        this.observeItems(true);
        this.refreshAllViews();
      }
      /**
       * Unbinds this behavior from the source.
       * @param source - The source to unbind from.
       */
      unbind() {
        this.source = null;
        this.items = null;
        if (this.itemsObserver !== null) {
          this.itemsObserver.unsubscribe(this);
        }
        this.unbindAllViews();
        this.itemsBindingObserver.disconnect();
        this.templateBindingObserver.disconnect();
      }
      /** @internal */
      handleChange(source, args) {
        if (source === this.itemsBinding) {
          this.items = this.itemsBindingObserver.observe(this.source, this.originalContext);
          this.observeItems();
          this.refreshAllViews();
        } else if (source === this.templateBinding) {
          this.template = this.templateBindingObserver.observe(this.source, this.originalContext);
          this.refreshAllViews(true);
        } else {
          this.updateViews(args);
        }
      }
      observeItems(force = false) {
        if (!this.items) {
          this.items = emptyArray;
          return;
        }
        const oldObserver = this.itemsObserver;
        const newObserver = this.itemsObserver = Observable.getNotifier(this.items);
        const hasNewObserver = oldObserver !== newObserver;
        if (hasNewObserver && oldObserver !== null) {
          oldObserver.unsubscribe(this);
        }
        if (hasNewObserver || force) {
          newObserver.subscribe(this);
        }
      }
      updateViews(splices) {
        const childContext = this.childContext;
        const views = this.views;
        const bindView = this.bindView;
        const items = this.items;
        const template = this.template;
        const recycle = this.options.recycle;
        const leftoverViews = [];
        let leftoverIndex = 0;
        let availableViews = 0;
        for (let i = 0, ii2 = splices.length; i < ii2; ++i) {
          const splice2 = splices[i];
          const removed = splice2.removed;
          let removeIndex = 0;
          let addIndex = splice2.index;
          const end = addIndex + splice2.addedCount;
          const removedViews = views.splice(splice2.index, removed.length);
          const totalAvailableViews = availableViews = leftoverViews.length + removedViews.length;
          for (; addIndex < end; ++addIndex) {
            const neighbor = views[addIndex];
            const location = neighbor ? neighbor.firstChild : this.location;
            let view;
            if (recycle && availableViews > 0) {
              if (removeIndex <= totalAvailableViews && removedViews.length > 0) {
                view = removedViews[removeIndex];
                removeIndex++;
              } else {
                view = leftoverViews[leftoverIndex];
                leftoverIndex++;
              }
              availableViews--;
            } else {
              view = template.create();
            }
            views.splice(addIndex, 0, view);
            bindView(view, items, addIndex, childContext);
            view.insertBefore(location);
          }
          if (removedViews[removeIndex]) {
            leftoverViews.push(...removedViews.slice(removeIndex));
          }
        }
        for (let i = leftoverIndex, ii2 = leftoverViews.length; i < ii2; ++i) {
          leftoverViews[i].dispose();
        }
        if (this.options.positioning) {
          for (let i = 0, ii2 = views.length; i < ii2; ++i) {
            const currentContext = views[i].context;
            currentContext.length = ii2;
            currentContext.index = i;
          }
        }
      }
      refreshAllViews(templateChanged = false) {
        const items = this.items;
        const childContext = this.childContext;
        const template = this.template;
        const location = this.location;
        const bindView = this.bindView;
        let itemsLength = items.length;
        let views = this.views;
        let viewsLength = views.length;
        if (itemsLength === 0 || templateChanged || !this.options.recycle) {
          HTMLView.disposeContiguousBatch(views);
          viewsLength = 0;
        }
        if (viewsLength === 0) {
          this.views = views = new Array(itemsLength);
          for (let i = 0; i < itemsLength; ++i) {
            const view = template.create();
            bindView(view, items, i, childContext);
            views[i] = view;
            view.insertBefore(location);
          }
        } else {
          let i = 0;
          for (; i < itemsLength; ++i) {
            if (i < viewsLength) {
              const view = views[i];
              bindView(view, items, i, childContext);
            } else {
              const view = template.create();
              bindView(view, items, i, childContext);
              views.push(view);
              view.insertBefore(location);
            }
          }
          const removed = views.splice(i, viewsLength - i);
          for (i = 0, itemsLength = removed.length; i < itemsLength; ++i) {
            removed[i].dispose();
          }
        }
      }
      unbindAllViews() {
        const views = this.views;
        for (let i = 0, ii2 = views.length; i < ii2; ++i) {
          views[i].unbind();
        }
      }
    }
    class RepeatDirective extends HTMLDirective {
      /**
       * Creates an instance of RepeatDirective.
       * @param itemsBinding - The binding that provides the array to render.
       * @param templateBinding - The template binding used to obtain a template to render for each item in the array.
       * @param options - Options used to turn on special repeat features.
       */
      constructor(itemsBinding, templateBinding, options) {
        super();
        this.itemsBinding = itemsBinding;
        this.templateBinding = templateBinding;
        this.options = options;
        this.createPlaceholder = DOM.createBlockPlaceholder;
        enableArrayObservation();
        this.isItemsBindingVolatile = Observable.isVolatileBinding(itemsBinding);
        this.isTemplateBindingVolatile = Observable.isVolatileBinding(templateBinding);
      }
      /**
       * Creates a behavior for the provided target node.
       * @param target - The node instance to create the behavior for.
       */
      createBehavior(target) {
        return new RepeatBehavior(target, this.itemsBinding, this.isItemsBindingVolatile, this.templateBinding, this.isTemplateBindingVolatile, this.options);
      }
    }
    function elements(selector) {
      if (selector) {
        return function(value, index, array) {
          return value.nodeType === 1 && value.matches(selector);
        };
      }
      return function(value, index, array) {
        return value.nodeType === 1;
      };
    }
    class NodeObservationBehavior {
      /**
       * Creates an instance of NodeObservationBehavior.
       * @param target - The target to assign the nodes property on.
       * @param options - The options to use in configuring node observation.
       */
      constructor(target, options) {
        this.target = target;
        this.options = options;
        this.source = null;
      }
      /**
       * Bind this behavior to the source.
       * @param source - The source to bind to.
       * @param context - The execution context that the binding is operating within.
       */
      bind(source) {
        const name = this.options.property;
        this.shouldUpdate = Observable.getAccessors(source).some((x2) => x2.name === name);
        this.source = source;
        this.updateTarget(this.computeNodes());
        if (this.shouldUpdate) {
          this.observe();
        }
      }
      /**
       * Unbinds this behavior from the source.
       * @param source - The source to unbind from.
       */
      unbind() {
        this.updateTarget(emptyArray);
        this.source = null;
        if (this.shouldUpdate) {
          this.disconnect();
        }
      }
      /** @internal */
      handleEvent() {
        this.updateTarget(this.computeNodes());
      }
      computeNodes() {
        let nodes = this.getNodes();
        if (this.options.filter !== void 0) {
          nodes = nodes.filter(this.options.filter);
        }
        return nodes;
      }
      updateTarget(value) {
        this.source[this.options.property] = value;
      }
    }
    class SlottedBehavior extends NodeObservationBehavior {
      /**
       * Creates an instance of SlottedBehavior.
       * @param target - The slot element target to observe.
       * @param options - The options to use when observing the slot.
       */
      constructor(target, options) {
        super(target, options);
      }
      /**
       * Begins observation of the nodes.
       */
      observe() {
        this.target.addEventListener("slotchange", this);
      }
      /**
       * Disconnects observation of the nodes.
       */
      disconnect() {
        this.target.removeEventListener("slotchange", this);
      }
      /**
       * Retrieves the nodes that should be assigned to the target.
       */
      getNodes() {
        return this.target.assignedNodes(this.options);
      }
    }
    function slotted(propertyOrOptions) {
      if (typeof propertyOrOptions === "string") {
        propertyOrOptions = { property: propertyOrOptions };
      }
      return new AttachedBehaviorHTMLDirective("fast-slotted", SlottedBehavior, propertyOrOptions);
    }
    class ChildrenBehavior extends NodeObservationBehavior {
      /**
       * Creates an instance of ChildrenBehavior.
       * @param target - The element target to observe children on.
       * @param options - The options to use when observing the element children.
       */
      constructor(target, options) {
        super(target, options);
        this.observer = null;
        options.childList = true;
      }
      /**
       * Begins observation of the nodes.
       */
      observe() {
        if (this.observer === null) {
          this.observer = new MutationObserver(this.handleEvent.bind(this));
        }
        this.observer.observe(this.target, this.options);
      }
      /**
       * Disconnects observation of the nodes.
       */
      disconnect() {
        this.observer.disconnect();
      }
      /**
       * Retrieves the nodes that should be assigned to the target.
       */
      getNodes() {
        if ("subtree" in this.options) {
          return Array.from(this.target.querySelectorAll(this.options.selector));
        }
        return Array.from(this.target.childNodes);
      }
    }
    function children(propertyOrOptions) {
      if (typeof propertyOrOptions === "string") {
        propertyOrOptions = {
          property: propertyOrOptions
        };
      }
      return new AttachedBehaviorHTMLDirective("fast-children", ChildrenBehavior, propertyOrOptions);
    }
    class StartEnd {
      handleStartContentChange() {
        this.startContainer.classList.toggle("start", this.start.assignedNodes().length > 0);
      }
      handleEndContentChange() {
        this.endContainer.classList.toggle("end", this.end.assignedNodes().length > 0);
      }
    }
    const endSlotTemplate = (context, definition) => html`
    <span
        part="end"
        ${ref("endContainer")}
        class=${(x2) => definition.end ? "end" : void 0}
    >
        <slot name="end" ${ref("end")} @slotchange="${(x2) => x2.handleEndContentChange()}">
            ${definition.end || ""}
        </slot>
    </span>
`;
    const startSlotTemplate = (context, definition) => html`
    <span
        part="start"
        ${ref("startContainer")}
        class="${(x2) => definition.start ? "start" : void 0}"
    >
        <slot
            name="start"
            ${ref("start")}
            @slotchange="${(x2) => x2.handleStartContentChange()}"
        >
            ${definition.start || ""}
        </slot>
    </span>
`;
    html`
    <span part="end" ${ref("endContainer")}>
        <slot
            name="end"
            ${ref("end")}
            @slotchange="${(x2) => x2.handleEndContentChange()}"
        ></slot>
    </span>
`;
    html`
    <span part="start" ${ref("startContainer")}>
        <slot
            name="start"
            ${ref("start")}
            @slotchange="${(x2) => x2.handleStartContentChange()}"
        ></slot>
    </span>
`;
    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.
    
    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.
    
    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    function __decorate$1(decorators, target, key, desc) {
      var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r2 = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d2 = decorators[i])
            r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
      return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
    }
    const metadataByTarget = /* @__PURE__ */ new Map();
    if (!("metadata" in Reflect)) {
      Reflect.metadata = function(key, value) {
        return function(target) {
          Reflect.defineMetadata(key, value, target);
        };
      };
      Reflect.defineMetadata = function(key, value, target) {
        let metadata = metadataByTarget.get(target);
        if (metadata === void 0) {
          metadataByTarget.set(target, metadata = /* @__PURE__ */ new Map());
        }
        metadata.set(key, value);
      };
      Reflect.getOwnMetadata = function(key, target) {
        const metadata = metadataByTarget.get(target);
        if (metadata !== void 0) {
          return metadata.get(key);
        }
        return void 0;
      };
    }
    class ResolverBuilder {
      /**
       *
       * @param container - The container to create resolvers for.
       * @param key - The key to register resolvers under.
       */
      constructor(container2, key) {
        this.container = container2;
        this.key = key;
      }
      /**
       * Creates a resolver for an existing object instance.
       * @param value - The instance to resolve.
       * @returns The resolver.
       */
      instance(value) {
        return this.registerResolver(0, value);
      }
      /**
       * Creates a resolver that enforces a singleton lifetime.
       * @param value - The type to create and cache the singleton for.
       * @returns The resolver.
       */
      singleton(value) {
        return this.registerResolver(1, value);
      }
      /**
       * Creates a resolver that creates a new instance for every dependency request.
       * @param value - The type to create instances of.
       * @returns - The resolver.
       */
      transient(value) {
        return this.registerResolver(2, value);
      }
      /**
       * Creates a resolver that invokes a callback function for every dependency resolution
       * request, allowing custom logic to return the dependency.
       * @param value - The callback to call during resolution.
       * @returns The resolver.
       */
      callback(value) {
        return this.registerResolver(3, value);
      }
      /**
       * Creates a resolver that invokes a callback function the first time that a dependency
       * resolution is requested. The returned value is then cached and provided for all
       * subsequent requests.
       * @param value - The callback to call during the first resolution.
       * @returns The resolver.
       */
      cachedCallback(value) {
        return this.registerResolver(3, cacheCallbackResult(value));
      }
      /**
       * Aliases the current key to a different key.
       * @param destinationKey - The key to point the alias to.
       * @returns The resolver.
       */
      aliasTo(destinationKey) {
        return this.registerResolver(5, destinationKey);
      }
      registerResolver(strategy, state) {
        const { container: container2, key } = this;
        this.container = this.key = void 0;
        return container2.registerResolver(key, new ResolverImpl(key, strategy, state));
      }
    }
    function cloneArrayWithPossibleProps(source) {
      const clone2 = source.slice();
      const keys2 = Object.keys(source);
      const len = keys2.length;
      let key;
      for (let i = 0; i < len; ++i) {
        key = keys2[i];
        if (!isArrayIndex(key)) {
          clone2[key] = source[key];
        }
      }
      return clone2;
    }
    const DefaultResolver = Object.freeze({
      /**
       * Disables auto-registration and throws for all un-registered dependencies.
       * @param key - The key to create the resolver for.
       */
      none(key) {
        throw Error(`${key.toString()} not registered, did you forget to add @singleton()?`);
      },
      /**
       * Provides default singleton resolution behavior during auto-registration.
       * @param key - The key to create the resolver for.
       * @returns The resolver.
       */
      singleton(key) {
        return new ResolverImpl(key, 1, key);
      },
      /**
       * Provides default transient resolution behavior during auto-registration.
       * @param key - The key to create the resolver for.
       * @returns The resolver.
       */
      transient(key) {
        return new ResolverImpl(key, 2, key);
      }
    });
    const ContainerConfiguration = Object.freeze({
      /**
       * The default configuration used when creating a DOM-disconnected container.
       * @remarks
       * The default creates a root container, with no parent container. It does not handle
       * owner requests and it uses singleton resolution behavior for auto-registration.
       */
      default: Object.freeze({
        parentLocator: () => null,
        responsibleForOwnerRequests: false,
        defaultResolver: DefaultResolver.singleton
      })
    });
    const dependencyLookup = /* @__PURE__ */ new Map();
    function getParamTypes(key) {
      return (Type) => {
        return Reflect.getOwnMetadata(key, Type);
      };
    }
    let rootDOMContainer = null;
    const DI = Object.freeze({
      /**
       * Creates a new dependency injection container.
       * @param config - The configuration for the container.
       * @returns A newly created dependency injection container.
       */
      createContainer(config) {
        return new ContainerImpl(null, Object.assign({}, ContainerConfiguration.default, config));
      },
      /**
       * Finds the dependency injection container responsible for providing dependencies
       * to the specified node.
       * @param node - The node to find the responsible container for.
       * @returns The container responsible for providing dependencies to the node.
       * @remarks
       * This will be the same as the parent container if the specified node
       * does not itself host a container configured with responsibleForOwnerRequests.
       */
      findResponsibleContainer(node) {
        const owned = node.$$container$$;
        if (owned && owned.responsibleForOwnerRequests) {
          return owned;
        }
        return DI.findParentContainer(node);
      },
      /**
       * Find the dependency injection container up the DOM tree from this node.
       * @param node - The node to find the parent container for.
       * @returns The parent container of this node.
       * @remarks
       * This will be the same as the responsible container if the specified node
       * does not itself host a container configured with responsibleForOwnerRequests.
       */
      findParentContainer(node) {
        const event = new CustomEvent(DILocateParentEventType, {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: { container: void 0 }
        });
        node.dispatchEvent(event);
        return event.detail.container || DI.getOrCreateDOMContainer();
      },
      /**
       * Returns a dependency injection container if one is explicitly owned by the specified
       * node. If one is not owned, then a new container is created and assigned to the node.
       * @param node - The node to find or create the container for.
       * @param config - The configuration for the container if one needs to be created.
       * @returns The located or created container.
       * @remarks
       * This API does not search for a responsible or parent container. It looks only for a container
       * directly defined on the specified node and creates one at that location if one does not
       * already exist.
       */
      getOrCreateDOMContainer(node, config) {
        if (!node) {
          return rootDOMContainer || (rootDOMContainer = new ContainerImpl(null, Object.assign({}, ContainerConfiguration.default, config, {
            parentLocator: () => null
          })));
        }
        return node.$$container$$ || new ContainerImpl(node, Object.assign({}, ContainerConfiguration.default, config, {
          parentLocator: DI.findParentContainer
        }));
      },
      /**
       * Gets the "design:paramtypes" metadata for the specified type.
       * @param Type - The type to get the metadata for.
       * @returns The metadata array or undefined if no metadata is found.
       */
      getDesignParamtypes: getParamTypes("design:paramtypes"),
      /**
       * Gets the "di:paramtypes" metadata for the specified type.
       * @param Type - The type to get the metadata for.
       * @returns The metadata array or undefined if no metadata is found.
       */
      getAnnotationParamtypes: getParamTypes("di:paramtypes"),
      /**
       *
       * @param Type - Gets the "di:paramtypes" metadata for the specified type. If none is found,
       * an empty metadata array is created and added.
       * @returns The metadata array.
       */
      getOrCreateAnnotationParamTypes(Type) {
        let annotationParamtypes = this.getAnnotationParamtypes(Type);
        if (annotationParamtypes === void 0) {
          Reflect.defineMetadata("di:paramtypes", annotationParamtypes = [], Type);
        }
        return annotationParamtypes;
      },
      /**
       * Gets the dependency keys representing what is needed to instantiate the specified type.
       * @param Type - The type to get the dependencies for.
       * @returns An array of dependency keys.
       */
      getDependencies(Type) {
        let dependencies = dependencyLookup.get(Type);
        if (dependencies === void 0) {
          const inject = Type.inject;
          if (inject === void 0) {
            const designParamtypes = DI.getDesignParamtypes(Type);
            const annotationParamtypes = DI.getAnnotationParamtypes(Type);
            if (designParamtypes === void 0) {
              if (annotationParamtypes === void 0) {
                const Proto = Object.getPrototypeOf(Type);
                if (typeof Proto === "function" && Proto !== Function.prototype) {
                  dependencies = cloneArrayWithPossibleProps(DI.getDependencies(Proto));
                } else {
                  dependencies = [];
                }
              } else {
                dependencies = cloneArrayWithPossibleProps(annotationParamtypes);
              }
            } else if (annotationParamtypes === void 0) {
              dependencies = cloneArrayWithPossibleProps(designParamtypes);
            } else {
              dependencies = cloneArrayWithPossibleProps(designParamtypes);
              let len = annotationParamtypes.length;
              let auAnnotationParamtype;
              for (let i = 0; i < len; ++i) {
                auAnnotationParamtype = annotationParamtypes[i];
                if (auAnnotationParamtype !== void 0) {
                  dependencies[i] = auAnnotationParamtype;
                }
              }
              const keys2 = Object.keys(annotationParamtypes);
              len = keys2.length;
              let key;
              for (let i = 0; i < len; ++i) {
                key = keys2[i];
                if (!isArrayIndex(key)) {
                  dependencies[key] = annotationParamtypes[key];
                }
              }
            }
          } else {
            dependencies = cloneArrayWithPossibleProps(inject);
          }
          dependencyLookup.set(Type, dependencies);
        }
        return dependencies;
      },
      /**
       * Defines a property on a web component class. The value of this property will
       * be resolved from the dependency injection container responsible for the element
       * instance, based on where it is connected in the DOM.
       * @param target - The target to define the property on.
       * @param propertyName - The name of the property to define.
       * @param key - The dependency injection key.
       * @param respectConnection - Indicates whether or not to update the property value if the
       * hosting component is disconnected and then re-connected at a different location in the DOM.
       * @remarks
       * The respectConnection option is only applicable to elements that descend from FASTElement.
       */
      defineProperty(target, propertyName, key, respectConnection = false) {
        const diPropertyKey = `$di_${propertyName}`;
        Reflect.defineProperty(target, propertyName, {
          get: function() {
            let value = this[diPropertyKey];
            if (value === void 0) {
              const container2 = this instanceof HTMLElement ? DI.findResponsibleContainer(this) : DI.getOrCreateDOMContainer();
              value = container2.get(key);
              this[diPropertyKey] = value;
              if (respectConnection && this instanceof FASTElement) {
                const notifier = this.$fastController;
                const handleChange = () => {
                  const newContainer = DI.findResponsibleContainer(this);
                  const newValue = newContainer.get(key);
                  const oldValue = this[diPropertyKey];
                  if (newValue !== oldValue) {
                    this[diPropertyKey] = value;
                    notifier.notify(propertyName);
                  }
                };
                notifier.subscribe({ handleChange }, "isConnected");
              }
            }
            return value;
          }
        });
      },
      /**
       * Creates a dependency injection key.
       * @param nameConfigOrCallback - A friendly name for the key or a lambda that configures a
       * default resolution for the dependency.
       * @param configuror - If a friendly name was provided for the first parameter, then an optional
       * lambda that configures a default resolution for the dependency can be provided second.
       * @returns The created key.
       * @remarks
       * The created key can be used as a property decorator or constructor parameter decorator,
       * in addition to its standard use in an inject array or through direct container APIs.
       */
      createInterface(nameConfigOrCallback, configuror) {
        const configure = typeof nameConfigOrCallback === "function" ? nameConfigOrCallback : configuror;
        const friendlyName = typeof nameConfigOrCallback === "string" ? nameConfigOrCallback : nameConfigOrCallback && "friendlyName" in nameConfigOrCallback ? nameConfigOrCallback.friendlyName || defaultFriendlyName : defaultFriendlyName;
        const respectConnection = typeof nameConfigOrCallback === "string" ? false : nameConfigOrCallback && "respectConnection" in nameConfigOrCallback ? nameConfigOrCallback.respectConnection || false : false;
        const Interface = function(target, property, index) {
          if (target == null || new.target !== void 0) {
            throw new Error(`No registration for interface: '${Interface.friendlyName}'`);
          }
          if (property) {
            DI.defineProperty(target, property, Interface, respectConnection);
          } else {
            const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);
            annotationParamtypes[index] = Interface;
          }
        };
        Interface.$isInterface = true;
        Interface.friendlyName = friendlyName == null ? "(anonymous)" : friendlyName;
        if (configure != null) {
          Interface.register = function(container2, key) {
            return configure(new ResolverBuilder(container2, key !== null && key !== void 0 ? key : Interface));
          };
        }
        Interface.toString = function toString2() {
          return `InterfaceSymbol<${Interface.friendlyName}>`;
        };
        return Interface;
      },
      /**
       * A decorator that specifies what to inject into its target.
       * @param dependencies - The dependencies to inject.
       * @returns The decorator to be applied to the target class.
       * @remarks
       * The decorator can be used to decorate a class, listing all of the classes dependencies.
       * Or it can be used to decorate a constructor paramter, indicating what to inject for that
       * parameter.
       * Or it can be used for a web component property, indicating what that property should resolve to.
       */
      inject(...dependencies) {
        return function(target, key, descriptor) {
          if (typeof descriptor === "number") {
            const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);
            const dep = dependencies[0];
            if (dep !== void 0) {
              annotationParamtypes[descriptor] = dep;
            }
          } else if (key) {
            DI.defineProperty(target, key, dependencies[0]);
          } else {
            const annotationParamtypes = descriptor ? DI.getOrCreateAnnotationParamTypes(descriptor.value) : DI.getOrCreateAnnotationParamTypes(target);
            let dep;
            for (let i = 0; i < dependencies.length; ++i) {
              dep = dependencies[i];
              if (dep !== void 0) {
                annotationParamtypes[i] = dep;
              }
            }
          }
        };
      },
      /**
       * Registers the `target` class as a transient dependency; each time the dependency is resolved
       * a new instance will be created.
       *
       * @param target - The class / constructor function to register as transient.
       * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.
       *
       * @example
       * On an existing class
       * ```ts
       * class Foo { }
       * DI.transient(Foo);
       * ```
       *
       * @example
       * Inline declaration
       *
       * ```ts
       * const Foo = DI.transient(class { });
       * // Foo is now strongly typed with register
       * Foo.register(container);
       * ```
       *
       * @public
       */
      transient(target) {
        target.register = function register(container2) {
          const registration = Registration.transient(target, target);
          return registration.register(container2);
        };
        target.registerInRequestor = false;
        return target;
      },
      /**
       * Registers the `target` class as a singleton dependency; the class will only be created once. Each
       * consecutive time the dependency is resolved, the same instance will be returned.
       *
       * @param target - The class / constructor function to register as a singleton.
       * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.
       * @example
       * On an existing class
       * ```ts
       * class Foo { }
       * DI.singleton(Foo);
       * ```
       *
       * @example
       * Inline declaration
       * ```ts
       * const Foo = DI.singleton(class { });
       * // Foo is now strongly typed with register
       * Foo.register(container);
       * ```
       *
       * @public
       */
      singleton(target, options = defaultSingletonOptions) {
        target.register = function register(container2) {
          const registration = Registration.singleton(target, target);
          return registration.register(container2);
        };
        target.registerInRequestor = options.scoped;
        return target;
      }
    });
    const Container = DI.createInterface("Container");
    DI.inject;
    const defaultSingletonOptions = { scoped: false };
    class ResolverImpl {
      constructor(key, strategy, state) {
        this.key = key;
        this.strategy = strategy;
        this.state = state;
        this.resolving = false;
      }
      get $isResolver() {
        return true;
      }
      register(container2) {
        return container2.registerResolver(this.key, this);
      }
      resolve(handler, requestor) {
        switch (this.strategy) {
          case 0:
            return this.state;
          case 1: {
            if (this.resolving) {
              throw new Error(`Cyclic dependency found: ${this.state.name}`);
            }
            this.resolving = true;
            this.state = handler.getFactory(this.state).construct(requestor);
            this.strategy = 0;
            this.resolving = false;
            return this.state;
          }
          case 2: {
            const factory = handler.getFactory(this.state);
            if (factory === null) {
              throw new Error(`Resolver for ${String(this.key)} returned a null factory`);
            }
            return factory.construct(requestor);
          }
          case 3:
            return this.state(handler, requestor, this);
          case 4:
            return this.state[0].resolve(handler, requestor);
          case 5:
            return requestor.get(this.state);
          default:
            throw new Error(`Invalid resolver strategy specified: ${this.strategy}.`);
        }
      }
      getFactory(container2) {
        var _a, _b, _c;
        switch (this.strategy) {
          case 1:
          case 2:
            return container2.getFactory(this.state);
          case 5:
            return (_c = (_b = (_a = container2.getResolver(this.state)) === null || _a === void 0 ? void 0 : _a.getFactory) === null || _b === void 0 ? void 0 : _b.call(_a, container2)) !== null && _c !== void 0 ? _c : null;
          default:
            return null;
        }
      }
    }
    function containerGetKey(d2) {
      return this.get(d2);
    }
    function transformInstance(inst, transform) {
      return transform(inst);
    }
    class FactoryImpl {
      constructor(Type, dependencies) {
        this.Type = Type;
        this.dependencies = dependencies;
        this.transformers = null;
      }
      construct(container2, dynamicDependencies) {
        let instance;
        if (dynamicDependencies === void 0) {
          instance = new this.Type(...this.dependencies.map(containerGetKey, container2));
        } else {
          instance = new this.Type(...this.dependencies.map(containerGetKey, container2), ...dynamicDependencies);
        }
        if (this.transformers == null) {
          return instance;
        }
        return this.transformers.reduce(transformInstance, instance);
      }
      registerTransformer(transformer) {
        (this.transformers || (this.transformers = [])).push(transformer);
      }
    }
    const containerResolver = {
      $isResolver: true,
      resolve(handler, requestor) {
        return requestor;
      }
    };
    function isRegistry(obj) {
      return typeof obj.register === "function";
    }
    function isSelfRegistry(obj) {
      return isRegistry(obj) && typeof obj.registerInRequestor === "boolean";
    }
    function isRegisterInRequester(obj) {
      return isSelfRegistry(obj) && obj.registerInRequestor;
    }
    function isClass$1(obj) {
      return obj.prototype !== void 0;
    }
    const InstrinsicTypeNames = /* @__PURE__ */ new Set([
      "Array",
      "ArrayBuffer",
      "Boolean",
      "DataView",
      "Date",
      "Error",
      "EvalError",
      "Float32Array",
      "Float64Array",
      "Function",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Map",
      "Number",
      "Object",
      "Promise",
      "RangeError",
      "ReferenceError",
      "RegExp",
      "Set",
      "SharedArrayBuffer",
      "String",
      "SyntaxError",
      "TypeError",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "URIError",
      "WeakMap",
      "WeakSet"
    ]);
    const DILocateParentEventType = "__DI_LOCATE_PARENT__";
    const factories = /* @__PURE__ */ new Map();
    class ContainerImpl {
      constructor(owner, config) {
        this.owner = owner;
        this.config = config;
        this._parent = void 0;
        this.registerDepth = 0;
        this.context = null;
        if (owner !== null) {
          owner.$$container$$ = this;
        }
        this.resolvers = /* @__PURE__ */ new Map();
        this.resolvers.set(Container, containerResolver);
        if (owner instanceof Node) {
          owner.addEventListener(DILocateParentEventType, (e2) => {
            if (e2.composedPath()[0] !== this.owner) {
              e2.detail.container = this;
              e2.stopImmediatePropagation();
            }
          });
        }
      }
      get parent() {
        if (this._parent === void 0) {
          this._parent = this.config.parentLocator(this.owner);
        }
        return this._parent;
      }
      get depth() {
        return this.parent === null ? 0 : this.parent.depth + 1;
      }
      get responsibleForOwnerRequests() {
        return this.config.responsibleForOwnerRequests;
      }
      registerWithContext(context, ...params) {
        this.context = context;
        this.register(...params);
        this.context = null;
        return this;
      }
      register(...params) {
        if (++this.registerDepth === 100) {
          throw new Error("Unable to autoregister dependency");
        }
        let current;
        let keys2;
        let value;
        let j;
        let jj2;
        const context = this.context;
        for (let i = 0, ii2 = params.length; i < ii2; ++i) {
          current = params[i];
          if (!isObject$2(current)) {
            continue;
          }
          if (isRegistry(current)) {
            current.register(this, context);
          } else if (isClass$1(current)) {
            Registration.singleton(current, current).register(this);
          } else {
            keys2 = Object.keys(current);
            j = 0;
            jj2 = keys2.length;
            for (; j < jj2; ++j) {
              value = current[keys2[j]];
              if (!isObject$2(value)) {
                continue;
              }
              if (isRegistry(value)) {
                value.register(this, context);
              } else {
                this.register(value);
              }
            }
          }
        }
        --this.registerDepth;
        return this;
      }
      registerResolver(key, resolver) {
        validateKey(key);
        const resolvers = this.resolvers;
        const result = resolvers.get(key);
        if (result == null) {
          resolvers.set(key, resolver);
        } else if (result instanceof ResolverImpl && result.strategy === 4) {
          result.state.push(resolver);
        } else {
          resolvers.set(key, new ResolverImpl(key, 4, [result, resolver]));
        }
        return resolver;
      }
      registerTransformer(key, transformer) {
        const resolver = this.getResolver(key);
        if (resolver == null) {
          return false;
        }
        if (resolver.getFactory) {
          const factory = resolver.getFactory(this);
          if (factory == null) {
            return false;
          }
          factory.registerTransformer(transformer);
          return true;
        }
        return false;
      }
      getResolver(key, autoRegister = true) {
        validateKey(key);
        if (key.resolve !== void 0) {
          return key;
        }
        let current = this;
        let resolver;
        while (current != null) {
          resolver = current.resolvers.get(key);
          if (resolver == null) {
            if (current.parent == null) {
              const handler = isRegisterInRequester(key) ? this : current;
              return autoRegister ? this.jitRegister(key, handler) : null;
            }
            current = current.parent;
          } else {
            return resolver;
          }
        }
        return null;
      }
      has(key, searchAncestors = false) {
        return this.resolvers.has(key) ? true : searchAncestors && this.parent != null ? this.parent.has(key, true) : false;
      }
      get(key) {
        validateKey(key);
        if (key.$isResolver) {
          return key.resolve(this, this);
        }
        let current = this;
        let resolver;
        while (current != null) {
          resolver = current.resolvers.get(key);
          if (resolver == null) {
            if (current.parent == null) {
              const handler = isRegisterInRequester(key) ? this : current;
              resolver = this.jitRegister(key, handler);
              return resolver.resolve(current, this);
            }
            current = current.parent;
          } else {
            return resolver.resolve(current, this);
          }
        }
        throw new Error(`Unable to resolve key: ${String(key)}`);
      }
      getAll(key, searchAncestors = false) {
        validateKey(key);
        const requestor = this;
        let current = requestor;
        let resolver;
        if (searchAncestors) {
          let resolutions = emptyArray;
          while (current != null) {
            resolver = current.resolvers.get(key);
            if (resolver != null) {
              resolutions = resolutions.concat(
                /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
                buildAllResponse(resolver, current, requestor)
              );
            }
            current = current.parent;
          }
          return resolutions;
        } else {
          while (current != null) {
            resolver = current.resolvers.get(key);
            if (resolver == null) {
              current = current.parent;
              if (current == null) {
                return emptyArray;
              }
            } else {
              return buildAllResponse(resolver, current, requestor);
            }
          }
        }
        return emptyArray;
      }
      getFactory(Type) {
        let factory = factories.get(Type);
        if (factory === void 0) {
          if (isNativeFunction(Type)) {
            throw new Error(`${Type.name} is a native function and therefore cannot be safely constructed by DI. If this is intentional, please use a callback or cachedCallback resolver.`);
          }
          factories.set(Type, factory = new FactoryImpl(Type, DI.getDependencies(Type)));
        }
        return factory;
      }
      registerFactory(key, factory) {
        factories.set(key, factory);
      }
      createChild(config) {
        return new ContainerImpl(null, Object.assign({}, this.config, config, { parentLocator: () => this }));
      }
      jitRegister(keyAsValue, handler) {
        if (typeof keyAsValue !== "function") {
          throw new Error(`Attempted to jitRegister something that is not a constructor: '${keyAsValue}'. Did you forget to register this dependency?`);
        }
        if (InstrinsicTypeNames.has(keyAsValue.name)) {
          throw new Error(`Attempted to jitRegister an intrinsic type: ${keyAsValue.name}. Did you forget to add @inject(Key)`);
        }
        if (isRegistry(keyAsValue)) {
          const registrationResolver = keyAsValue.register(handler);
          if (!(registrationResolver instanceof Object) || registrationResolver.resolve == null) {
            const newResolver = handler.resolvers.get(keyAsValue);
            if (newResolver != void 0) {
              return newResolver;
            }
            throw new Error("A valid resolver was not returned from the static register method");
          }
          return registrationResolver;
        } else if (keyAsValue.$isInterface) {
          throw new Error(`Attempted to jitRegister an interface: ${keyAsValue.friendlyName}`);
        } else {
          const resolver = this.config.defaultResolver(keyAsValue, handler);
          handler.resolvers.set(keyAsValue, resolver);
          return resolver;
        }
      }
    }
    const cache = /* @__PURE__ */ new WeakMap();
    function cacheCallbackResult(fun) {
      return function(handler, requestor, resolver) {
        if (cache.has(resolver)) {
          return cache.get(resolver);
        }
        const t2 = fun(handler, requestor, resolver);
        cache.set(resolver, t2);
        return t2;
      };
    }
    const Registration = Object.freeze({
      /**
       * Allows you to pass an instance.
       * Every time you request this {@link Key} you will get this instance back.
       *
       * @example
       * ```
       * Registration.instance(Foo, new Foo()));
       * ```
       *
       * @param key - The key to register the instance under.
       * @param value - The instance to return when the key is requested.
       */
      instance(key, value) {
        return new ResolverImpl(key, 0, value);
      },
      /**
       * Creates an instance from the class.
       * Every time you request this {@link Key} you will get the same one back.
       *
       * @example
       * ```
       * Registration.singleton(Foo, Foo);
       * ```
       *
       * @param key - The key to register the singleton under.
       * @param value - The class to instantiate as a singleton when first requested.
       */
      singleton(key, value) {
        return new ResolverImpl(key, 1, value);
      },
      /**
       * Creates an instance from a class.
       * Every time you request this {@link Key} you will get a new instance.
       *
       * @example
       * ```
       * Registration.instance(Foo, Foo);
       * ```
       *
       * @param key - The key to register the instance type under.
       * @param value - The class to instantiate each time the key is requested.
       */
      transient(key, value) {
        return new ResolverImpl(key, 2, value);
      },
      /**
       * Delegates to a callback function to provide the dependency.
       * Every time you request this {@link Key} the callback will be invoked to provide
       * the dependency.
       *
       * @example
       * ```
       * Registration.callback(Foo, () => new Foo());
       * Registration.callback(Bar, (c: Container) => new Bar(c.get(Foo)));
       * ```
       *
       * @param key - The key to register the callback for.
       * @param callback - The function that is expected to return the dependency.
       */
      callback(key, callback) {
        return new ResolverImpl(key, 3, callback);
      },
      /**
       * Delegates to a callback function to provide the dependency and then caches the
       * dependency for future requests.
       *
       * @example
       * ```
       * Registration.cachedCallback(Foo, () => new Foo());
       * Registration.cachedCallback(Bar, (c: Container) => new Bar(c.get(Foo)));
       * ```
       *
       * @param key - The key to register the callback for.
       * @param callback - The function that is expected to return the dependency.
       * @remarks
       * If you pass the same Registration to another container, the same cached value will be used.
       * Should all references to the resolver returned be removed, the cache will expire.
       */
      cachedCallback(key, callback) {
        return new ResolverImpl(key, 3, cacheCallbackResult(callback));
      },
      /**
       * Creates an alternate {@link Key} to retrieve an instance by.
       *
       * @example
       * ```
       * Register.singleton(Foo, Foo)
       * Register.aliasTo(Foo, MyFoos);
       *
       * container.getAll(MyFoos) // contains an instance of Foo
       * ```
       *
       * @param originalKey - The original key that has been registered.
       * @param aliasKey - The alias to the original key.
       */
      aliasTo(originalKey, aliasKey) {
        return new ResolverImpl(aliasKey, 5, originalKey);
      }
    });
    function validateKey(key) {
      if (key === null || key === void 0) {
        throw new Error("key/value cannot be null or undefined. Are you trying to inject/register something that doesn't exist with DI?");
      }
    }
    function buildAllResponse(resolver, handler, requestor) {
      if (resolver instanceof ResolverImpl && resolver.strategy === 4) {
        const state = resolver.state;
        let i = state.length;
        const results = new Array(i);
        while (i--) {
          results[i] = state[i].resolve(handler, requestor);
        }
        return results;
      }
      return [resolver.resolve(handler, requestor)];
    }
    const defaultFriendlyName = "(anonymous)";
    function isObject$2(value) {
      return typeof value === "object" && value !== null || typeof value === "function";
    }
    const isNativeFunction = function() {
      const lookup = /* @__PURE__ */ new WeakMap();
      let isNative = false;
      let sourceText = "";
      let i = 0;
      return function(fn) {
        isNative = lookup.get(fn);
        if (isNative === void 0) {
          sourceText = fn.toString();
          i = sourceText.length;
          isNative = // 29 is the length of 'function () { [native code] }' which is the smallest length of a native function string
          i >= 29 && // 100 seems to be a safe upper bound of the max length of a native function. In Chrome and FF it's 56, in Edge it's 61.
          i <= 100 && // This whole heuristic *could* be tricked by a comment. Do we need to care about that?
          sourceText.charCodeAt(i - 1) === 125 && // }
          // TODO: the spec is a little vague about the precise constraints, so we do need to test this across various browsers to make sure just one whitespace is a safe assumption.
          sourceText.charCodeAt(i - 2) <= 32 && // whitespace
          sourceText.charCodeAt(i - 3) === 93 && // ]
          sourceText.charCodeAt(i - 4) === 101 && // e
          sourceText.charCodeAt(i - 5) === 100 && // d
          sourceText.charCodeAt(i - 6) === 111 && // o
          sourceText.charCodeAt(i - 7) === 99 && // c
          sourceText.charCodeAt(i - 8) === 32 && //
          sourceText.charCodeAt(i - 9) === 101 && // e
          sourceText.charCodeAt(i - 10) === 118 && // v
          sourceText.charCodeAt(i - 11) === 105 && // i
          sourceText.charCodeAt(i - 12) === 116 && // t
          sourceText.charCodeAt(i - 13) === 97 && // a
          sourceText.charCodeAt(i - 14) === 110 && // n
          sourceText.charCodeAt(i - 15) === 88;
          lookup.set(fn, isNative);
        }
        return isNative;
      };
    }();
    const isNumericLookup = {};
    function isArrayIndex(value) {
      switch (typeof value) {
        case "number":
          return value >= 0 && (value | 0) === value;
        case "string": {
          const result = isNumericLookup[value];
          if (result !== void 0) {
            return result;
          }
          const length = value.length;
          if (length === 0) {
            return isNumericLookup[value] = false;
          }
          let ch2 = 0;
          for (let i = 0; i < length; ++i) {
            ch2 = value.charCodeAt(i);
            if (i === 0 && ch2 === 48 && length > 1 || ch2 < 48 || ch2 > 57) {
              return isNumericLookup[value] = false;
            }
          }
          return isNumericLookup[value] = true;
        }
        default:
          return false;
      }
    }
    function presentationKeyFromTag(tagName) {
      return `${tagName.toLowerCase()}:presentation`;
    }
    const presentationRegistry = /* @__PURE__ */ new Map();
    const ComponentPresentation = Object.freeze({
      /**
       * Defines a component presentation for an element.
       * @param tagName - The element name to define the presentation for.
       * @param presentation - The presentation that will be applied to matching elements.
       * @param container - The dependency injection container to register the configuration in.
       * @public
       */
      define(tagName, presentation, container2) {
        const key = presentationKeyFromTag(tagName);
        const existing = presentationRegistry.get(key);
        if (existing === void 0) {
          presentationRegistry.set(key, presentation);
        } else {
          presentationRegistry.set(key, false);
        }
        container2.register(Registration.instance(key, presentation));
      },
      /**
       * Finds a component presentation for the specified element name,
       * searching the DOM hierarchy starting from the provided element.
       * @param tagName - The name of the element to locate the presentation for.
       * @param element - The element to begin the search from.
       * @returns The component presentation or null if none is found.
       * @public
       */
      forTag(tagName, element) {
        const key = presentationKeyFromTag(tagName);
        const existing = presentationRegistry.get(key);
        if (existing === false) {
          const container2 = DI.findResponsibleContainer(element);
          return container2.get(key);
        }
        return existing || null;
      }
    });
    class DefaultComponentPresentation {
      /**
       * Creates an instance of DefaultComponentPresentation.
       * @param template - The template to apply to the element.
       * @param styles - The styles to apply to the element.
       * @public
       */
      constructor(template, styles) {
        this.template = template || null;
        this.styles = styles === void 0 ? null : Array.isArray(styles) ? ElementStyles.create(styles) : styles instanceof ElementStyles ? styles : ElementStyles.create([styles]);
      }
      /**
       * Applies the presentation details to the specified element.
       * @param element - The element to apply the presentation details to.
       * @public
       */
      applyTo(element) {
        const controller = element.$fastController;
        if (controller.template === null) {
          controller.template = this.template;
        }
        if (controller.styles === null) {
          controller.styles = this.styles;
        }
      }
    }
    class FoundationElement extends FASTElement {
      constructor() {
        super(...arguments);
        this._presentation = void 0;
      }
      /**
       * A property which resolves the ComponentPresentation instance
       * for the current component.
       * @public
       */
      get $presentation() {
        if (this._presentation === void 0) {
          this._presentation = ComponentPresentation.forTag(this.tagName, this);
        }
        return this._presentation;
      }
      templateChanged() {
        if (this.template !== void 0) {
          this.$fastController.template = this.template;
        }
      }
      stylesChanged() {
        if (this.styles !== void 0) {
          this.$fastController.styles = this.styles;
        }
      }
      /**
       * The connected callback for this FASTElement.
       * @remarks
       * This method is invoked by the platform whenever this FoundationElement
       * becomes connected to the document.
       * @public
       */
      connectedCallback() {
        if (this.$presentation !== null) {
          this.$presentation.applyTo(this);
        }
        super.connectedCallback();
      }
      /**
       * Defines an element registry function with a set of element definition defaults.
       * @param elementDefinition - The definition of the element to create the registry
       * function for.
       * @public
       */
      static compose(elementDefinition) {
        return (overrideDefinition = {}) => new FoundationElementRegistry(this === FoundationElement ? class extends FoundationElement {
        } : this, elementDefinition, overrideDefinition);
      }
    }
    __decorate$1([
      observable
    ], FoundationElement.prototype, "template", void 0);
    __decorate$1([
      observable
    ], FoundationElement.prototype, "styles", void 0);
    function resolveOption(option, context, definition) {
      if (typeof option === "function") {
        return option(context, definition);
      }
      return option;
    }
    class FoundationElementRegistry {
      constructor(type, elementDefinition, overrideDefinition) {
        this.type = type;
        this.elementDefinition = elementDefinition;
        this.overrideDefinition = overrideDefinition;
        this.definition = Object.assign(Object.assign({}, this.elementDefinition), this.overrideDefinition);
      }
      register(container2, context) {
        const definition = this.definition;
        const overrideDefinition = this.overrideDefinition;
        const prefix = definition.prefix || context.elementPrefix;
        const name = `${prefix}-${definition.baseName}`;
        context.tryDefineElement({
          name,
          type: this.type,
          baseClass: this.elementDefinition.baseClass,
          callback: (x2) => {
            const presentation = new DefaultComponentPresentation(resolveOption(definition.template, x2, definition), resolveOption(definition.styles, x2, definition));
            x2.definePresentation(presentation);
            let shadowOptions = resolveOption(definition.shadowOptions, x2, definition);
            if (x2.shadowRootMode) {
              if (shadowOptions) {
                if (!overrideDefinition.shadowOptions) {
                  shadowOptions.mode = x2.shadowRootMode;
                }
              } else if (shadowOptions !== null) {
                shadowOptions = { mode: x2.shadowRootMode };
              }
            }
            x2.defineElement({
              elementOptions: resolveOption(definition.elementOptions, x2, definition),
              shadowOptions,
              attributes: resolveOption(definition.attributes, x2, definition)
            });
          }
        });
      }
    }
    function applyMixins(derivedCtor, ...baseCtors) {
      const derivedAttributes = AttributeConfiguration.locate(derivedCtor);
      baseCtors.forEach((baseCtor) => {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {
          if (name !== "constructor") {
            Object.defineProperty(
              derivedCtor.prototype,
              name,
              /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
              Object.getOwnPropertyDescriptor(baseCtor.prototype, name)
            );
          }
        });
        const baseAttributes = AttributeConfiguration.locate(baseCtor);
        baseAttributes.forEach((x2) => derivedAttributes.push(x2));
      });
    }
    const Orientation = {
      horizontal: "horizontal",
      vertical: "vertical"
    };
    function findLastIndex(array, predicate) {
      let k2 = array.length;
      while (k2--) {
        if (predicate(array[k2], k2, array)) {
          return k2;
        }
      }
      return -1;
    }
    function canUseDOM() {
      return !!(typeof window !== "undefined" && window.document && window.document.createElement);
    }
    function isHTMLElement(...args) {
      return args.every((arg) => arg instanceof HTMLElement);
    }
    function getNonce() {
      const node = document.querySelector('meta[property="csp-nonce"]');
      if (node) {
        return node.getAttribute("content");
      } else {
        return null;
      }
    }
    let _canUseFocusVisible;
    function canUseFocusVisible() {
      if (typeof _canUseFocusVisible === "boolean") {
        return _canUseFocusVisible;
      }
      if (!canUseDOM()) {
        _canUseFocusVisible = false;
        return _canUseFocusVisible;
      }
      const styleElement = document.createElement("style");
      const styleNonce = getNonce();
      if (styleNonce !== null) {
        styleElement.setAttribute("nonce", styleNonce);
      }
      document.head.appendChild(styleElement);
      try {
        styleElement.sheet.insertRule("foo:focus-visible {color:inherit}", 0);
        _canUseFocusVisible = true;
      } catch (e2) {
        _canUseFocusVisible = false;
      } finally {
        document.head.removeChild(styleElement);
      }
      return _canUseFocusVisible;
    }
    const eventFocus = "focus";
    const eventFocusIn = "focusin";
    const eventFocusOut = "focusout";
    const eventKeyDown = "keydown";
    var KeyCodes;
    (function(KeyCodes2) {
      KeyCodes2[KeyCodes2["alt"] = 18] = "alt";
      KeyCodes2[KeyCodes2["arrowDown"] = 40] = "arrowDown";
      KeyCodes2[KeyCodes2["arrowLeft"] = 37] = "arrowLeft";
      KeyCodes2[KeyCodes2["arrowRight"] = 39] = "arrowRight";
      KeyCodes2[KeyCodes2["arrowUp"] = 38] = "arrowUp";
      KeyCodes2[KeyCodes2["back"] = 8] = "back";
      KeyCodes2[KeyCodes2["backSlash"] = 220] = "backSlash";
      KeyCodes2[KeyCodes2["break"] = 19] = "break";
      KeyCodes2[KeyCodes2["capsLock"] = 20] = "capsLock";
      KeyCodes2[KeyCodes2["closeBracket"] = 221] = "closeBracket";
      KeyCodes2[KeyCodes2["colon"] = 186] = "colon";
      KeyCodes2[KeyCodes2["colon2"] = 59] = "colon2";
      KeyCodes2[KeyCodes2["comma"] = 188] = "comma";
      KeyCodes2[KeyCodes2["ctrl"] = 17] = "ctrl";
      KeyCodes2[KeyCodes2["delete"] = 46] = "delete";
      KeyCodes2[KeyCodes2["end"] = 35] = "end";
      KeyCodes2[KeyCodes2["enter"] = 13] = "enter";
      KeyCodes2[KeyCodes2["equals"] = 187] = "equals";
      KeyCodes2[KeyCodes2["equals2"] = 61] = "equals2";
      KeyCodes2[KeyCodes2["equals3"] = 107] = "equals3";
      KeyCodes2[KeyCodes2["escape"] = 27] = "escape";
      KeyCodes2[KeyCodes2["forwardSlash"] = 191] = "forwardSlash";
      KeyCodes2[KeyCodes2["function1"] = 112] = "function1";
      KeyCodes2[KeyCodes2["function10"] = 121] = "function10";
      KeyCodes2[KeyCodes2["function11"] = 122] = "function11";
      KeyCodes2[KeyCodes2["function12"] = 123] = "function12";
      KeyCodes2[KeyCodes2["function2"] = 113] = "function2";
      KeyCodes2[KeyCodes2["function3"] = 114] = "function3";
      KeyCodes2[KeyCodes2["function4"] = 115] = "function4";
      KeyCodes2[KeyCodes2["function5"] = 116] = "function5";
      KeyCodes2[KeyCodes2["function6"] = 117] = "function6";
      KeyCodes2[KeyCodes2["function7"] = 118] = "function7";
      KeyCodes2[KeyCodes2["function8"] = 119] = "function8";
      KeyCodes2[KeyCodes2["function9"] = 120] = "function9";
      KeyCodes2[KeyCodes2["home"] = 36] = "home";
      KeyCodes2[KeyCodes2["insert"] = 45] = "insert";
      KeyCodes2[KeyCodes2["menu"] = 93] = "menu";
      KeyCodes2[KeyCodes2["minus"] = 189] = "minus";
      KeyCodes2[KeyCodes2["minus2"] = 109] = "minus2";
      KeyCodes2[KeyCodes2["numLock"] = 144] = "numLock";
      KeyCodes2[KeyCodes2["numPad0"] = 96] = "numPad0";
      KeyCodes2[KeyCodes2["numPad1"] = 97] = "numPad1";
      KeyCodes2[KeyCodes2["numPad2"] = 98] = "numPad2";
      KeyCodes2[KeyCodes2["numPad3"] = 99] = "numPad3";
      KeyCodes2[KeyCodes2["numPad4"] = 100] = "numPad4";
      KeyCodes2[KeyCodes2["numPad5"] = 101] = "numPad5";
      KeyCodes2[KeyCodes2["numPad6"] = 102] = "numPad6";
      KeyCodes2[KeyCodes2["numPad7"] = 103] = "numPad7";
      KeyCodes2[KeyCodes2["numPad8"] = 104] = "numPad8";
      KeyCodes2[KeyCodes2["numPad9"] = 105] = "numPad9";
      KeyCodes2[KeyCodes2["numPadDivide"] = 111] = "numPadDivide";
      KeyCodes2[KeyCodes2["numPadDot"] = 110] = "numPadDot";
      KeyCodes2[KeyCodes2["numPadMinus"] = 109] = "numPadMinus";
      KeyCodes2[KeyCodes2["numPadMultiply"] = 106] = "numPadMultiply";
      KeyCodes2[KeyCodes2["numPadPlus"] = 107] = "numPadPlus";
      KeyCodes2[KeyCodes2["openBracket"] = 219] = "openBracket";
      KeyCodes2[KeyCodes2["pageDown"] = 34] = "pageDown";
      KeyCodes2[KeyCodes2["pageUp"] = 33] = "pageUp";
      KeyCodes2[KeyCodes2["period"] = 190] = "period";
      KeyCodes2[KeyCodes2["print"] = 44] = "print";
      KeyCodes2[KeyCodes2["quote"] = 222] = "quote";
      KeyCodes2[KeyCodes2["scrollLock"] = 145] = "scrollLock";
      KeyCodes2[KeyCodes2["shift"] = 16] = "shift";
      KeyCodes2[KeyCodes2["space"] = 32] = "space";
      KeyCodes2[KeyCodes2["tab"] = 9] = "tab";
      KeyCodes2[KeyCodes2["tilde"] = 192] = "tilde";
      KeyCodes2[KeyCodes2["windowsLeft"] = 91] = "windowsLeft";
      KeyCodes2[KeyCodes2["windowsOpera"] = 219] = "windowsOpera";
      KeyCodes2[KeyCodes2["windowsRight"] = 92] = "windowsRight";
    })(KeyCodes || (KeyCodes = {}));
    const keyArrowDown = "ArrowDown";
    const keyArrowLeft = "ArrowLeft";
    const keyArrowRight = "ArrowRight";
    const keyArrowUp = "ArrowUp";
    const keyEnter = "Enter";
    const keyEscape = "Escape";
    const keyHome = "Home";
    const keyEnd = "End";
    const keyFunction2 = "F2";
    const keyPageDown = "PageDown";
    const keyPageUp = "PageUp";
    const keySpace = " ";
    const keyTab = "Tab";
    const ArrowKeys = {
      ArrowDown: keyArrowDown,
      ArrowLeft: keyArrowLeft,
      ArrowRight: keyArrowRight,
      ArrowUp: keyArrowUp
    };
    var Direction;
    (function(Direction2) {
      Direction2["ltr"] = "ltr";
      Direction2["rtl"] = "rtl";
    })(Direction || (Direction = {}));
    function limit(min2, max2, value) {
      return Math.min(Math.max(value, min2), max2);
    }
    function inRange(value, min2, max2 = 0) {
      [min2, max2] = [min2, max2].sort((a, b2) => a - b2);
      return min2 <= value && value < max2;
    }
    let uniqueIdCounter = 0;
    function uniqueId(prefix = "") {
      return `${prefix}${uniqueIdCounter++}`;
    }
    const anchorTemplate = (context, definition) => html`
    <a
        class="control"
        part="control"
        download="${(x2) => x2.download}"
        href="${(x2) => x2.href}"
        hreflang="${(x2) => x2.hreflang}"
        ping="${(x2) => x2.ping}"
        referrerpolicy="${(x2) => x2.referrerpolicy}"
        rel="${(x2) => x2.rel}"
        target="${(x2) => x2.target}"
        type="${(x2) => x2.type}"
        aria-atomic="${(x2) => x2.ariaAtomic}"
        aria-busy="${(x2) => x2.ariaBusy}"
        aria-controls="${(x2) => x2.ariaControls}"
        aria-current="${(x2) => x2.ariaCurrent}"
        aria-describedby="${(x2) => x2.ariaDescribedby}"
        aria-details="${(x2) => x2.ariaDetails}"
        aria-disabled="${(x2) => x2.ariaDisabled}"
        aria-errormessage="${(x2) => x2.ariaErrormessage}"
        aria-expanded="${(x2) => x2.ariaExpanded}"
        aria-flowto="${(x2) => x2.ariaFlowto}"
        aria-haspopup="${(x2) => x2.ariaHaspopup}"
        aria-hidden="${(x2) => x2.ariaHidden}"
        aria-invalid="${(x2) => x2.ariaInvalid}"
        aria-keyshortcuts="${(x2) => x2.ariaKeyshortcuts}"
        aria-label="${(x2) => x2.ariaLabel}"
        aria-labelledby="${(x2) => x2.ariaLabelledby}"
        aria-live="${(x2) => x2.ariaLive}"
        aria-owns="${(x2) => x2.ariaOwns}"
        aria-relevant="${(x2) => x2.ariaRelevant}"
        aria-roledescription="${(x2) => x2.ariaRoledescription}"
        ${ref("control")}
    >
        ${startSlotTemplate(context, definition)}
        <span class="content" part="content">
            <slot ${slotted("defaultSlottedContent")}></slot>
        </span>
        ${endSlotTemplate(context, definition)}
    </a>
`;
    class ARIAGlobalStatesAndProperties {
    }
    __decorate$1([
      attr({ attribute: "aria-atomic" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaAtomic", void 0);
    __decorate$1([
      attr({ attribute: "aria-busy" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaBusy", void 0);
    __decorate$1([
      attr({ attribute: "aria-controls" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaControls", void 0);
    __decorate$1([
      attr({ attribute: "aria-current" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaCurrent", void 0);
    __decorate$1([
      attr({ attribute: "aria-describedby" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaDescribedby", void 0);
    __decorate$1([
      attr({ attribute: "aria-details" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaDetails", void 0);
    __decorate$1([
      attr({ attribute: "aria-disabled" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaDisabled", void 0);
    __decorate$1([
      attr({ attribute: "aria-errormessage" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaErrormessage", void 0);
    __decorate$1([
      attr({ attribute: "aria-flowto" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaFlowto", void 0);
    __decorate$1([
      attr({ attribute: "aria-haspopup" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaHaspopup", void 0);
    __decorate$1([
      attr({ attribute: "aria-hidden" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaHidden", void 0);
    __decorate$1([
      attr({ attribute: "aria-invalid" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaInvalid", void 0);
    __decorate$1([
      attr({ attribute: "aria-keyshortcuts" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaKeyshortcuts", void 0);
    __decorate$1([
      attr({ attribute: "aria-label" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaLabel", void 0);
    __decorate$1([
      attr({ attribute: "aria-labelledby" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaLabelledby", void 0);
    __decorate$1([
      attr({ attribute: "aria-live" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaLive", void 0);
    __decorate$1([
      attr({ attribute: "aria-owns" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaOwns", void 0);
    __decorate$1([
      attr({ attribute: "aria-relevant" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaRelevant", void 0);
    __decorate$1([
      attr({ attribute: "aria-roledescription" })
    ], ARIAGlobalStatesAndProperties.prototype, "ariaRoledescription", void 0);
    class Anchor extends FoundationElement {
      constructor() {
        super(...arguments);
        this.handleUnsupportedDelegatesFocus = () => {
          var _a;
          if (window.ShadowRoot && !window.ShadowRoot.prototype.hasOwnProperty("delegatesFocus") && ((_a = this.$fastController.definition.shadowOptions) === null || _a === void 0 ? void 0 : _a.delegatesFocus)) {
            this.focus = () => {
              var _a2;
              (_a2 = this.control) === null || _a2 === void 0 ? void 0 : _a2.focus();
            };
          }
        };
      }
      /**
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        this.handleUnsupportedDelegatesFocus();
      }
    }
    __decorate$1([
      attr
    ], Anchor.prototype, "download", void 0);
    __decorate$1([
      attr
    ], Anchor.prototype, "href", void 0);
    __decorate$1([
      attr
    ], Anchor.prototype, "hreflang", void 0);
    __decorate$1([
      attr
    ], Anchor.prototype, "ping", void 0);
    __decorate$1([
      attr
    ], Anchor.prototype, "referrerpolicy", void 0);
    __decorate$1([
      attr
    ], Anchor.prototype, "rel", void 0);
    __decorate$1([
      attr
    ], Anchor.prototype, "target", void 0);
    __decorate$1([
      attr
    ], Anchor.prototype, "type", void 0);
    __decorate$1([
      observable
    ], Anchor.prototype, "defaultSlottedContent", void 0);
    class DelegatesARIALink {
    }
    __decorate$1([
      attr({ attribute: "aria-expanded" })
    ], DelegatesARIALink.prototype, "ariaExpanded", void 0);
    applyMixins(DelegatesARIALink, ARIAGlobalStatesAndProperties);
    applyMixins(Anchor, StartEnd, DelegatesARIALink);
    const getDirection = (rootNode) => {
      const dirNode = rootNode.closest("[dir]");
      return dirNode !== null && dirNode.dir === "rtl" ? Direction.rtl : Direction.ltr;
    };
    const badgeTemplate = (context, definition) => html`
    <template class="${(x2) => x2.circular ? "circular" : ""}">
        <div class="control" part="control" style="${(x2) => x2.generateBadgeStyle()}">
            <slot></slot>
        </div>
    </template>
`;
    let Badge$1 = class Badge extends FoundationElement {
      constructor() {
        super(...arguments);
        this.generateBadgeStyle = () => {
          if (!this.fill && !this.color) {
            return;
          }
          const fill = `background-color: var(--badge-fill-${this.fill});`;
          const color = `color: var(--badge-color-${this.color});`;
          if (this.fill && !this.color) {
            return fill;
          } else if (this.color && !this.fill) {
            return color;
          } else {
            return `${color} ${fill}`;
          }
        };
      }
    };
    __decorate$1([
      attr({ attribute: "fill" })
    ], Badge$1.prototype, "fill", void 0);
    __decorate$1([
      attr({ attribute: "color" })
    ], Badge$1.prototype, "color", void 0);
    __decorate$1([
      attr({ mode: "boolean" })
    ], Badge$1.prototype, "circular", void 0);
    const buttonTemplate = (context, definition) => html`
    <button
        class="control"
        part="control"
        ?autofocus="${(x2) => x2.autofocus}"
        ?disabled="${(x2) => x2.disabled}"
        form="${(x2) => x2.formId}"
        formaction="${(x2) => x2.formaction}"
        formenctype="${(x2) => x2.formenctype}"
        formmethod="${(x2) => x2.formmethod}"
        formnovalidate="${(x2) => x2.formnovalidate}"
        formtarget="${(x2) => x2.formtarget}"
        name="${(x2) => x2.name}"
        type="${(x2) => x2.type}"
        value="${(x2) => x2.value}"
        aria-atomic="${(x2) => x2.ariaAtomic}"
        aria-busy="${(x2) => x2.ariaBusy}"
        aria-controls="${(x2) => x2.ariaControls}"
        aria-current="${(x2) => x2.ariaCurrent}"
        aria-describedby="${(x2) => x2.ariaDescribedby}"
        aria-details="${(x2) => x2.ariaDetails}"
        aria-disabled="${(x2) => x2.ariaDisabled}"
        aria-errormessage="${(x2) => x2.ariaErrormessage}"
        aria-expanded="${(x2) => x2.ariaExpanded}"
        aria-flowto="${(x2) => x2.ariaFlowto}"
        aria-haspopup="${(x2) => x2.ariaHaspopup}"
        aria-hidden="${(x2) => x2.ariaHidden}"
        aria-invalid="${(x2) => x2.ariaInvalid}"
        aria-keyshortcuts="${(x2) => x2.ariaKeyshortcuts}"
        aria-label="${(x2) => x2.ariaLabel}"
        aria-labelledby="${(x2) => x2.ariaLabelledby}"
        aria-live="${(x2) => x2.ariaLive}"
        aria-owns="${(x2) => x2.ariaOwns}"
        aria-pressed="${(x2) => x2.ariaPressed}"
        aria-relevant="${(x2) => x2.ariaRelevant}"
        aria-roledescription="${(x2) => x2.ariaRoledescription}"
        ${ref("control")}
    >
        ${startSlotTemplate(context, definition)}
        <span class="content" part="content">
            <slot ${slotted("defaultSlottedContent")}></slot>
        </span>
        ${endSlotTemplate(context, definition)}
    </button>
`;
    const proxySlotName = "form-associated-proxy";
    const ElementInternalsKey = "ElementInternals";
    const supportsElementInternals = ElementInternalsKey in window && "setFormValue" in window[ElementInternalsKey].prototype;
    const InternalsMap = /* @__PURE__ */ new WeakMap();
    function FormAssociated(BaseCtor) {
      const C2 = class extends BaseCtor {
        constructor(...args) {
          super(...args);
          this.dirtyValue = false;
          this.disabled = false;
          this.proxyEventsToBlock = ["change", "click"];
          this.proxyInitialized = false;
          this.required = false;
          this.initialValue = this.initialValue || "";
          if (!this.elementInternals) {
            this.formResetCallback = this.formResetCallback.bind(this);
          }
        }
        /**
         * Must evaluate to true to enable elementInternals.
         * Feature detects API support and resolve respectively
         *
         * @internal
         */
        static get formAssociated() {
          return supportsElementInternals;
        }
        /**
         * Returns the validity state of the element
         *
         * @alpha
         */
        get validity() {
          return this.elementInternals ? this.elementInternals.validity : this.proxy.validity;
        }
        /**
         * Retrieve a reference to the associated form.
         * Returns null if not associated to any form.
         *
         * @alpha
         */
        get form() {
          return this.elementInternals ? this.elementInternals.form : this.proxy.form;
        }
        /**
         * Retrieve the localized validation message,
         * or custom validation message if set.
         *
         * @alpha
         */
        get validationMessage() {
          return this.elementInternals ? this.elementInternals.validationMessage : this.proxy.validationMessage;
        }
        /**
         * Whether the element will be validated when the
         * form is submitted
         */
        get willValidate() {
          return this.elementInternals ? this.elementInternals.willValidate : this.proxy.willValidate;
        }
        /**
         * A reference to all associated label elements
         */
        get labels() {
          if (this.elementInternals) {
            return Object.freeze(Array.from(this.elementInternals.labels));
          } else if (this.proxy instanceof HTMLElement && this.proxy.ownerDocument && this.id) {
            const parentLabels = this.proxy.labels;
            const forLabels = Array.from(this.proxy.getRootNode().querySelectorAll(`[for='${this.id}']`));
            const labels = parentLabels ? forLabels.concat(Array.from(parentLabels)) : forLabels;
            return Object.freeze(labels);
          } else {
            return emptyArray;
          }
        }
        /**
         * Invoked when the `value` property changes
         * @param previous - the previous value
         * @param next - the new value
         *
         * @remarks
         * If elements extending `FormAssociated` implement a `valueChanged` method
         * They must be sure to invoke `super.valueChanged(previous, next)` to ensure
         * proper functioning of `FormAssociated`
         */
        valueChanged(previous, next) {
          this.dirtyValue = true;
          if (this.proxy instanceof HTMLElement) {
            this.proxy.value = this.value;
          }
          this.currentValue = this.value;
          this.setFormValue(this.value);
          this.validate();
        }
        currentValueChanged() {
          this.value = this.currentValue;
        }
        /**
         * Invoked when the `initialValue` property changes
         *
         * @param previous - the previous value
         * @param next - the new value
         *
         * @remarks
         * If elements extending `FormAssociated` implement a `initialValueChanged` method
         * They must be sure to invoke `super.initialValueChanged(previous, next)` to ensure
         * proper functioning of `FormAssociated`
         */
        initialValueChanged(previous, next) {
          if (!this.dirtyValue) {
            this.value = this.initialValue;
            this.dirtyValue = false;
          }
        }
        /**
         * Invoked when the `disabled` property changes
         *
         * @param previous - the previous value
         * @param next - the new value
         *
         * @remarks
         * If elements extending `FormAssociated` implement a `disabledChanged` method
         * They must be sure to invoke `super.disabledChanged(previous, next)` to ensure
         * proper functioning of `FormAssociated`
         */
        disabledChanged(previous, next) {
          if (this.proxy instanceof HTMLElement) {
            this.proxy.disabled = this.disabled;
          }
          DOM.queueUpdate(() => this.classList.toggle("disabled", this.disabled));
        }
        /**
         * Invoked when the `name` property changes
         *
         * @param previous - the previous value
         * @param next - the new value
         *
         * @remarks
         * If elements extending `FormAssociated` implement a `nameChanged` method
         * They must be sure to invoke `super.nameChanged(previous, next)` to ensure
         * proper functioning of `FormAssociated`
         */
        nameChanged(previous, next) {
          if (this.proxy instanceof HTMLElement) {
            this.proxy.name = this.name;
          }
        }
        /**
         * Invoked when the `required` property changes
         *
         * @param previous - the previous value
         * @param next - the new value
         *
         * @remarks
         * If elements extending `FormAssociated` implement a `requiredChanged` method
         * They must be sure to invoke `super.requiredChanged(previous, next)` to ensure
         * proper functioning of `FormAssociated`
         */
        requiredChanged(prev, next) {
          if (this.proxy instanceof HTMLElement) {
            this.proxy.required = this.required;
          }
          DOM.queueUpdate(() => this.classList.toggle("required", this.required));
          this.validate();
        }
        /**
         * The element internals object. Will only exist
         * in browsers supporting the attachInternals API
         */
        get elementInternals() {
          if (!supportsElementInternals) {
            return null;
          }
          let internals = InternalsMap.get(this);
          if (!internals) {
            internals = this.attachInternals();
            InternalsMap.set(this, internals);
          }
          return internals;
        }
        /**
         * @internal
         */
        connectedCallback() {
          super.connectedCallback();
          this.addEventListener("keypress", this._keypressHandler);
          if (!this.value) {
            this.value = this.initialValue;
            this.dirtyValue = false;
          }
          if (!this.elementInternals) {
            this.attachProxy();
            if (this.form) {
              this.form.addEventListener("reset", this.formResetCallback);
            }
          }
        }
        /**
         * @internal
         */
        disconnectedCallback() {
          super.disconnectedCallback();
          this.proxyEventsToBlock.forEach((name) => this.proxy.removeEventListener(name, this.stopPropagation));
          if (!this.elementInternals && this.form) {
            this.form.removeEventListener("reset", this.formResetCallback);
          }
        }
        /**
         * Return the current validity of the element.
         */
        checkValidity() {
          return this.elementInternals ? this.elementInternals.checkValidity() : this.proxy.checkValidity();
        }
        /**
         * Return the current validity of the element.
         * If false, fires an invalid event at the element.
         */
        reportValidity() {
          return this.elementInternals ? this.elementInternals.reportValidity() : this.proxy.reportValidity();
        }
        /**
         * Set the validity of the control. In cases when the elementInternals object is not
         * available (and the proxy element is used to report validity), this function will
         * do nothing unless a message is provided, at which point the setCustomValidity method
         * of the proxy element will be invoked with the provided message.
         * @param flags - Validity flags
         * @param message - Optional message to supply
         * @param anchor - Optional element used by UA to display an interactive validation UI
         */
        setValidity(flags, message, anchor) {
          if (this.elementInternals) {
            this.elementInternals.setValidity(flags, message, anchor);
          } else if (typeof message === "string") {
            this.proxy.setCustomValidity(message);
          }
        }
        /**
         * Invoked when a connected component's form or fieldset has its disabled
         * state changed.
         * @param disabled - the disabled value of the form / fieldset
         */
        formDisabledCallback(disabled) {
          this.disabled = disabled;
        }
        formResetCallback() {
          this.value = this.initialValue;
          this.dirtyValue = false;
        }
        /**
         * Attach the proxy element to the DOM
         */
        attachProxy() {
          var _a;
          if (!this.proxyInitialized) {
            this.proxyInitialized = true;
            this.proxy.style.display = "none";
            this.proxyEventsToBlock.forEach((name) => this.proxy.addEventListener(name, this.stopPropagation));
            this.proxy.disabled = this.disabled;
            this.proxy.required = this.required;
            if (typeof this.name === "string") {
              this.proxy.name = this.name;
            }
            if (typeof this.value === "string") {
              this.proxy.value = this.value;
            }
            this.proxy.setAttribute("slot", proxySlotName);
            this.proxySlot = document.createElement("slot");
            this.proxySlot.setAttribute("name", proxySlotName);
          }
          (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.appendChild(this.proxySlot);
          this.appendChild(this.proxy);
        }
        /**
         * Detach the proxy element from the DOM
         */
        detachProxy() {
          var _a;
          this.removeChild(this.proxy);
          (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.removeChild(this.proxySlot);
        }
        /** {@inheritDoc (FormAssociated:interface).validate} */
        validate(anchor) {
          if (this.proxy instanceof HTMLElement) {
            this.setValidity(this.proxy.validity, this.proxy.validationMessage, anchor);
          }
        }
        /**
         * Associates the provided value (and optional state) with the parent form.
         * @param value - The value to set
         * @param state - The state object provided to during session restores and when autofilling.
         */
        setFormValue(value, state) {
          if (this.elementInternals) {
            this.elementInternals.setFormValue(value, state || value);
          }
        }
        _keypressHandler(e2) {
          switch (e2.key) {
            case keyEnter:
              if (this.form instanceof HTMLFormElement) {
                const defaultButton = this.form.querySelector("[type=submit]");
                defaultButton === null || defaultButton === void 0 ? void 0 : defaultButton.click();
              }
              break;
          }
        }
        /**
         * Used to stop propagation of proxy element events
         * @param e - Event object
         */
        stopPropagation(e2) {
          e2.stopPropagation();
        }
      };
      attr({ mode: "boolean" })(C2.prototype, "disabled");
      attr({ mode: "fromView", attribute: "value" })(C2.prototype, "initialValue");
      attr({ attribute: "current-value" })(C2.prototype, "currentValue");
      attr(C2.prototype, "name");
      attr({ mode: "boolean" })(C2.prototype, "required");
      observable(C2.prototype, "value");
      return C2;
    }
    function CheckableFormAssociated(BaseCtor) {
      class C2 extends FormAssociated(BaseCtor) {
      }
      class D2 extends C2 {
        constructor(...args) {
          super(args);
          this.dirtyChecked = false;
          this.checkedAttribute = false;
          this.checked = false;
          this.dirtyChecked = false;
        }
        checkedAttributeChanged() {
          this.defaultChecked = this.checkedAttribute;
        }
        /**
         * @internal
         */
        defaultCheckedChanged() {
          if (!this.dirtyChecked) {
            this.checked = this.defaultChecked;
            this.dirtyChecked = false;
          }
        }
        checkedChanged(prev, next) {
          if (!this.dirtyChecked) {
            this.dirtyChecked = true;
          }
          this.currentChecked = this.checked;
          this.updateForm();
          if (this.proxy instanceof HTMLInputElement) {
            this.proxy.checked = this.checked;
          }
          if (prev !== void 0) {
            this.$emit("change");
          }
          this.validate();
        }
        currentCheckedChanged(prev, next) {
          this.checked = this.currentChecked;
        }
        updateForm() {
          const value = this.checked ? this.value : null;
          this.setFormValue(value, value);
        }
        connectedCallback() {
          super.connectedCallback();
          this.updateForm();
        }
        formResetCallback() {
          super.formResetCallback();
          this.checked = !!this.checkedAttribute;
          this.dirtyChecked = false;
        }
      }
      attr({ attribute: "checked", mode: "boolean" })(D2.prototype, "checkedAttribute");
      attr({ attribute: "current-checked", converter: booleanConverter })(D2.prototype, "currentChecked");
      observable(D2.prototype, "defaultChecked");
      observable(D2.prototype, "checked");
      return D2;
    }
    class _Button extends FoundationElement {
    }
    class FormAssociatedButton extends FormAssociated(_Button) {
      constructor() {
        super(...arguments);
        this.proxy = document.createElement("input");
      }
    }
    let Button$1 = class Button extends FormAssociatedButton {
      constructor() {
        super(...arguments);
        this.handleClick = (e2) => {
          var _a;
          if (this.disabled && ((_a = this.defaultSlottedContent) === null || _a === void 0 ? void 0 : _a.length) <= 1) {
            e2.stopPropagation();
          }
        };
        this.handleSubmission = () => {
          if (!this.form) {
            return;
          }
          const attached = this.proxy.isConnected;
          if (!attached) {
            this.attachProxy();
          }
          typeof this.form.requestSubmit === "function" ? this.form.requestSubmit(this.proxy) : this.proxy.click();
          if (!attached) {
            this.detachProxy();
          }
        };
        this.handleFormReset = () => {
          var _a;
          (_a = this.form) === null || _a === void 0 ? void 0 : _a.reset();
        };
        this.handleUnsupportedDelegatesFocus = () => {
          var _a;
          if (window.ShadowRoot && !window.ShadowRoot.prototype.hasOwnProperty("delegatesFocus") && ((_a = this.$fastController.definition.shadowOptions) === null || _a === void 0 ? void 0 : _a.delegatesFocus)) {
            this.focus = () => {
              this.control.focus();
            };
          }
        };
      }
      formactionChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.formAction = this.formaction;
        }
      }
      formenctypeChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.formEnctype = this.formenctype;
        }
      }
      formmethodChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.formMethod = this.formmethod;
        }
      }
      formnovalidateChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.formNoValidate = this.formnovalidate;
        }
      }
      formtargetChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.formTarget = this.formtarget;
        }
      }
      typeChanged(previous, next) {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.type = this.type;
        }
        next === "submit" && this.addEventListener("click", this.handleSubmission);
        previous === "submit" && this.removeEventListener("click", this.handleSubmission);
        next === "reset" && this.addEventListener("click", this.handleFormReset);
        previous === "reset" && this.removeEventListener("click", this.handleFormReset);
      }
      /** {@inheritDoc (FormAssociated:interface).validate} */
      validate() {
        super.validate(this.control);
      }
      /**
       * @internal
       */
      connectedCallback() {
        var _a;
        super.connectedCallback();
        this.proxy.setAttribute("type", this.type);
        this.handleUnsupportedDelegatesFocus();
        const elements2 = Array.from((_a = this.control) === null || _a === void 0 ? void 0 : _a.children);
        if (elements2) {
          elements2.forEach((span) => {
            span.addEventListener("click", this.handleClick);
          });
        }
      }
      /**
       * @internal
       */
      disconnectedCallback() {
        var _a;
        super.disconnectedCallback();
        const elements2 = Array.from((_a = this.control) === null || _a === void 0 ? void 0 : _a.children);
        if (elements2) {
          elements2.forEach((span) => {
            span.removeEventListener("click", this.handleClick);
          });
        }
      }
    };
    __decorate$1([
      attr({ mode: "boolean" })
    ], Button$1.prototype, "autofocus", void 0);
    __decorate$1([
      attr({ attribute: "form" })
    ], Button$1.prototype, "formId", void 0);
    __decorate$1([
      attr
    ], Button$1.prototype, "formaction", void 0);
    __decorate$1([
      attr
    ], Button$1.prototype, "formenctype", void 0);
    __decorate$1([
      attr
    ], Button$1.prototype, "formmethod", void 0);
    __decorate$1([
      attr({ mode: "boolean" })
    ], Button$1.prototype, "formnovalidate", void 0);
    __decorate$1([
      attr
    ], Button$1.prototype, "formtarget", void 0);
    __decorate$1([
      attr
    ], Button$1.prototype, "type", void 0);
    __decorate$1([
      observable
    ], Button$1.prototype, "defaultSlottedContent", void 0);
    class DelegatesARIAButton {
    }
    __decorate$1([
      attr({ attribute: "aria-expanded" })
    ], DelegatesARIAButton.prototype, "ariaExpanded", void 0);
    __decorate$1([
      attr({ attribute: "aria-pressed" })
    ], DelegatesARIAButton.prototype, "ariaPressed", void 0);
    applyMixins(DelegatesARIAButton, ARIAGlobalStatesAndProperties);
    applyMixins(Button$1, StartEnd, DelegatesARIAButton);
    const GenerateHeaderOptions = {
      none: "none",
      default: "default",
      sticky: "sticky"
    };
    const DataGridCellTypes = {
      default: "default",
      columnHeader: "columnheader",
      rowHeader: "rowheader"
    };
    const DataGridRowTypes = {
      default: "default",
      header: "header",
      stickyHeader: "sticky-header"
    };
    let DataGridRow$1 = class DataGridRow extends FoundationElement {
      constructor() {
        super(...arguments);
        this.rowType = DataGridRowTypes.default;
        this.rowData = null;
        this.columnDefinitions = null;
        this.isActiveRow = false;
        this.cellsRepeatBehavior = null;
        this.cellsPlaceholder = null;
        this.focusColumnIndex = 0;
        this.refocusOnLoad = false;
        this.updateRowStyle = () => {
          this.style.gridTemplateColumns = this.gridTemplateColumns;
        };
      }
      gridTemplateColumnsChanged() {
        if (this.$fastController.isConnected) {
          this.updateRowStyle();
        }
      }
      rowTypeChanged() {
        if (this.$fastController.isConnected) {
          this.updateItemTemplate();
        }
      }
      rowDataChanged() {
        if (this.rowData !== null && this.isActiveRow) {
          this.refocusOnLoad = true;
          return;
        }
      }
      cellItemTemplateChanged() {
        this.updateItemTemplate();
      }
      headerCellItemTemplateChanged() {
        this.updateItemTemplate();
      }
      /**
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        if (this.cellsRepeatBehavior === null) {
          this.cellsPlaceholder = document.createComment("");
          this.appendChild(this.cellsPlaceholder);
          this.updateItemTemplate();
          this.cellsRepeatBehavior = new RepeatDirective((x2) => x2.columnDefinitions, (x2) => x2.activeCellItemTemplate, { positioning: true }).createBehavior(this.cellsPlaceholder);
          this.$fastController.addBehaviors([this.cellsRepeatBehavior]);
        }
        this.addEventListener("cell-focused", this.handleCellFocus);
        this.addEventListener(eventFocusOut, this.handleFocusout);
        this.addEventListener(eventKeyDown, this.handleKeydown);
        this.updateRowStyle();
        if (this.refocusOnLoad) {
          this.refocusOnLoad = false;
          if (this.cellElements.length > this.focusColumnIndex) {
            this.cellElements[this.focusColumnIndex].focus();
          }
        }
      }
      /**
       * @internal
       */
      disconnectedCallback() {
        super.disconnectedCallback();
        this.removeEventListener("cell-focused", this.handleCellFocus);
        this.removeEventListener(eventFocusOut, this.handleFocusout);
        this.removeEventListener(eventKeyDown, this.handleKeydown);
      }
      handleFocusout(e2) {
        if (!this.contains(e2.target)) {
          this.isActiveRow = false;
          this.focusColumnIndex = 0;
        }
      }
      handleCellFocus(e2) {
        this.isActiveRow = true;
        this.focusColumnIndex = this.cellElements.indexOf(e2.target);
        this.$emit("row-focused", this);
      }
      handleKeydown(e2) {
        if (e2.defaultPrevented) {
          return;
        }
        let newFocusColumnIndex = 0;
        switch (e2.key) {
          case keyArrowLeft:
            newFocusColumnIndex = Math.max(0, this.focusColumnIndex - 1);
            this.cellElements[newFocusColumnIndex].focus();
            e2.preventDefault();
            break;
          case keyArrowRight:
            newFocusColumnIndex = Math.min(this.cellElements.length - 1, this.focusColumnIndex + 1);
            this.cellElements[newFocusColumnIndex].focus();
            e2.preventDefault();
            break;
          case keyHome:
            if (!e2.ctrlKey) {
              this.cellElements[0].focus();
              e2.preventDefault();
            }
            break;
          case keyEnd:
            if (!e2.ctrlKey) {
              this.cellElements[this.cellElements.length - 1].focus();
              e2.preventDefault();
            }
            break;
        }
      }
      updateItemTemplate() {
        this.activeCellItemTemplate = this.rowType === DataGridRowTypes.default && this.cellItemTemplate !== void 0 ? this.cellItemTemplate : this.rowType === DataGridRowTypes.default && this.cellItemTemplate === void 0 ? this.defaultCellItemTemplate : this.headerCellItemTemplate !== void 0 ? this.headerCellItemTemplate : this.defaultHeaderCellItemTemplate;
      }
    };
    __decorate$1([
      attr({ attribute: "grid-template-columns" })
    ], DataGridRow$1.prototype, "gridTemplateColumns", void 0);
    __decorate$1([
      attr({ attribute: "row-type" })
    ], DataGridRow$1.prototype, "rowType", void 0);
    __decorate$1([
      observable
    ], DataGridRow$1.prototype, "rowData", void 0);
    __decorate$1([
      observable
    ], DataGridRow$1.prototype, "columnDefinitions", void 0);
    __decorate$1([
      observable
    ], DataGridRow$1.prototype, "cellItemTemplate", void 0);
    __decorate$1([
      observable
    ], DataGridRow$1.prototype, "headerCellItemTemplate", void 0);
    __decorate$1([
      observable
    ], DataGridRow$1.prototype, "rowIndex", void 0);
    __decorate$1([
      observable
    ], DataGridRow$1.prototype, "isActiveRow", void 0);
    __decorate$1([
      observable
    ], DataGridRow$1.prototype, "activeCellItemTemplate", void 0);
    __decorate$1([
      observable
    ], DataGridRow$1.prototype, "defaultCellItemTemplate", void 0);
    __decorate$1([
      observable
    ], DataGridRow$1.prototype, "defaultHeaderCellItemTemplate", void 0);
    __decorate$1([
      observable
    ], DataGridRow$1.prototype, "cellElements", void 0);
    function createRowItemTemplate(context) {
      const rowTag = context.tagFor(DataGridRow$1);
      return html`
    <${rowTag}
        :rowData="${(x2) => x2}"
        :cellItemTemplate="${(x2, c2) => c2.parent.cellItemTemplate}"
        :headerCellItemTemplate="${(x2, c2) => c2.parent.headerCellItemTemplate}"
    ></${rowTag}>
`;
    }
    const dataGridTemplate = (context, definition) => {
      const rowItemTemplate = createRowItemTemplate(context);
      const rowTag = context.tagFor(DataGridRow$1);
      return html`
        <template
            role="grid"
            tabindex="0"
            :rowElementTag="${() => rowTag}"
            :defaultRowItemTemplate="${rowItemTemplate}"
            ${children({
        property: "rowElements",
        filter: elements("[role=row]")
      })}
        >
            <slot></slot>
        </template>
    `;
    };
    let DataGrid$1 = class DataGrid2 extends FoundationElement {
      constructor() {
        super();
        this.noTabbing = false;
        this.generateHeader = GenerateHeaderOptions.default;
        this.rowsData = [];
        this.columnDefinitions = null;
        this.focusRowIndex = 0;
        this.focusColumnIndex = 0;
        this.rowsPlaceholder = null;
        this.generatedHeader = null;
        this.isUpdatingFocus = false;
        this.pendingFocusUpdate = false;
        this.rowindexUpdateQueued = false;
        this.columnDefinitionsStale = true;
        this.generatedGridTemplateColumns = "";
        this.focusOnCell = (rowIndex, columnIndex, scrollIntoView) => {
          if (this.rowElements.length === 0) {
            this.focusRowIndex = 0;
            this.focusColumnIndex = 0;
            return;
          }
          const focusRowIndex = Math.max(0, Math.min(this.rowElements.length - 1, rowIndex));
          const focusRow = this.rowElements[focusRowIndex];
          const cells = focusRow.querySelectorAll('[role="cell"], [role="gridcell"], [role="columnheader"], [role="rowheader"]');
          const focusColumnIndex = Math.max(0, Math.min(cells.length - 1, columnIndex));
          const focusTarget = cells[focusColumnIndex];
          if (scrollIntoView && this.scrollHeight !== this.clientHeight && (focusRowIndex < this.focusRowIndex && this.scrollTop > 0 || focusRowIndex > this.focusRowIndex && this.scrollTop < this.scrollHeight - this.clientHeight)) {
            focusTarget.scrollIntoView({ block: "center", inline: "center" });
          }
          focusTarget.focus();
        };
        this.onChildListChange = (mutations, observer) => {
          if (mutations && mutations.length) {
            mutations.forEach((mutation) => {
              mutation.addedNodes.forEach((newNode) => {
                if (newNode.nodeType === 1 && newNode.getAttribute("role") === "row") {
                  newNode.columnDefinitions = this.columnDefinitions;
                }
              });
            });
            this.queueRowIndexUpdate();
          }
        };
        this.queueRowIndexUpdate = () => {
          if (!this.rowindexUpdateQueued) {
            this.rowindexUpdateQueued = true;
            DOM.queueUpdate(this.updateRowIndexes);
          }
        };
        this.updateRowIndexes = () => {
          let newGridTemplateColumns = this.gridTemplateColumns;
          if (newGridTemplateColumns === void 0) {
            if (this.generatedGridTemplateColumns === "" && this.rowElements.length > 0) {
              const firstRow = this.rowElements[0];
              this.generatedGridTemplateColumns = new Array(firstRow.cellElements.length).fill("1fr").join(" ");
            }
            newGridTemplateColumns = this.generatedGridTemplateColumns;
          }
          this.rowElements.forEach((element, index) => {
            const thisRow = element;
            thisRow.rowIndex = index;
            thisRow.gridTemplateColumns = newGridTemplateColumns;
            if (this.columnDefinitionsStale) {
              thisRow.columnDefinitions = this.columnDefinitions;
            }
          });
          this.rowindexUpdateQueued = false;
          this.columnDefinitionsStale = false;
        };
      }
      /**
       *  generates a gridTemplateColumns based on columndata array
       */
      static generateTemplateColumns(columnDefinitions) {
        let templateColumns = "";
        columnDefinitions.forEach((column) => {
          templateColumns = `${templateColumns}${templateColumns === "" ? "" : " "}${"1fr"}`;
        });
        return templateColumns;
      }
      noTabbingChanged() {
        if (this.$fastController.isConnected) {
          if (this.noTabbing) {
            this.setAttribute("tabIndex", "-1");
          } else {
            this.setAttribute("tabIndex", this.contains(document.activeElement) || this === document.activeElement ? "-1" : "0");
          }
        }
      }
      generateHeaderChanged() {
        if (this.$fastController.isConnected) {
          this.toggleGeneratedHeader();
        }
      }
      gridTemplateColumnsChanged() {
        if (this.$fastController.isConnected) {
          this.updateRowIndexes();
        }
      }
      rowsDataChanged() {
        if (this.columnDefinitions === null && this.rowsData.length > 0) {
          this.columnDefinitions = DataGrid2.generateColumns(this.rowsData[0]);
        }
        if (this.$fastController.isConnected) {
          this.toggleGeneratedHeader();
        }
      }
      columnDefinitionsChanged() {
        if (this.columnDefinitions === null) {
          this.generatedGridTemplateColumns = "";
          return;
        }
        this.generatedGridTemplateColumns = DataGrid2.generateTemplateColumns(this.columnDefinitions);
        if (this.$fastController.isConnected) {
          this.columnDefinitionsStale = true;
          this.queueRowIndexUpdate();
        }
      }
      headerCellItemTemplateChanged() {
        if (this.$fastController.isConnected) {
          if (this.generatedHeader !== null) {
            this.generatedHeader.headerCellItemTemplate = this.headerCellItemTemplate;
          }
        }
      }
      focusRowIndexChanged() {
        if (this.$fastController.isConnected) {
          this.queueFocusUpdate();
        }
      }
      focusColumnIndexChanged() {
        if (this.$fastController.isConnected) {
          this.queueFocusUpdate();
        }
      }
      /**
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        if (this.rowItemTemplate === void 0) {
          this.rowItemTemplate = this.defaultRowItemTemplate;
        }
        this.rowsPlaceholder = document.createComment("");
        this.appendChild(this.rowsPlaceholder);
        this.toggleGeneratedHeader();
        this.rowsRepeatBehavior = new RepeatDirective((x2) => x2.rowsData, (x2) => x2.rowItemTemplate, { positioning: true }).createBehavior(this.rowsPlaceholder);
        this.$fastController.addBehaviors([this.rowsRepeatBehavior]);
        this.addEventListener("row-focused", this.handleRowFocus);
        this.addEventListener(eventFocus, this.handleFocus);
        this.addEventListener(eventKeyDown, this.handleKeydown);
        this.addEventListener(eventFocusOut, this.handleFocusOut);
        this.observer = new MutationObserver(this.onChildListChange);
        this.observer.observe(this, { childList: true });
        if (this.noTabbing) {
          this.setAttribute("tabindex", "-1");
        }
        DOM.queueUpdate(this.queueRowIndexUpdate);
      }
      /**
       * @internal
       */
      disconnectedCallback() {
        super.disconnectedCallback();
        this.removeEventListener("row-focused", this.handleRowFocus);
        this.removeEventListener(eventFocus, this.handleFocus);
        this.removeEventListener(eventKeyDown, this.handleKeydown);
        this.removeEventListener(eventFocusOut, this.handleFocusOut);
        this.observer.disconnect();
        this.rowsPlaceholder = null;
        this.generatedHeader = null;
      }
      /**
       * @internal
       */
      handleRowFocus(e2) {
        this.isUpdatingFocus = true;
        const focusRow = e2.target;
        this.focusRowIndex = this.rowElements.indexOf(focusRow);
        this.focusColumnIndex = focusRow.focusColumnIndex;
        this.setAttribute("tabIndex", "-1");
        this.isUpdatingFocus = false;
      }
      /**
       * @internal
       */
      handleFocus(e2) {
        this.focusOnCell(this.focusRowIndex, this.focusColumnIndex, true);
      }
      /**
       * @internal
       */
      handleFocusOut(e2) {
        if (e2.relatedTarget === null || !this.contains(e2.relatedTarget)) {
          this.setAttribute("tabIndex", this.noTabbing ? "-1" : "0");
        }
      }
      /**
       * @internal
       */
      handleKeydown(e2) {
        if (e2.defaultPrevented) {
          return;
        }
        let newFocusRowIndex;
        const maxIndex = this.rowElements.length - 1;
        const currentGridBottom = this.offsetHeight + this.scrollTop;
        const lastRow = this.rowElements[maxIndex];
        switch (e2.key) {
          case keyArrowUp:
            e2.preventDefault();
            this.focusOnCell(this.focusRowIndex - 1, this.focusColumnIndex, true);
            break;
          case keyArrowDown:
            e2.preventDefault();
            this.focusOnCell(this.focusRowIndex + 1, this.focusColumnIndex, true);
            break;
          case keyPageUp:
            e2.preventDefault();
            if (this.rowElements.length === 0) {
              this.focusOnCell(0, 0, false);
              break;
            }
            if (this.focusRowIndex === 0) {
              this.focusOnCell(0, this.focusColumnIndex, false);
              return;
            }
            newFocusRowIndex = this.focusRowIndex - 1;
            for (newFocusRowIndex; newFocusRowIndex >= 0; newFocusRowIndex--) {
              const thisRow = this.rowElements[newFocusRowIndex];
              if (thisRow.offsetTop < this.scrollTop) {
                this.scrollTop = thisRow.offsetTop + thisRow.clientHeight - this.clientHeight;
                break;
              }
            }
            this.focusOnCell(newFocusRowIndex, this.focusColumnIndex, false);
            break;
          case keyPageDown:
            e2.preventDefault();
            if (this.rowElements.length === 0) {
              this.focusOnCell(0, 0, false);
              break;
            }
            if (this.focusRowIndex >= maxIndex || lastRow.offsetTop + lastRow.offsetHeight <= currentGridBottom) {
              this.focusOnCell(maxIndex, this.focusColumnIndex, false);
              return;
            }
            newFocusRowIndex = this.focusRowIndex + 1;
            for (newFocusRowIndex; newFocusRowIndex <= maxIndex; newFocusRowIndex++) {
              const thisRow = this.rowElements[newFocusRowIndex];
              if (thisRow.offsetTop + thisRow.offsetHeight > currentGridBottom) {
                let stickyHeaderOffset = 0;
                if (this.generateHeader === GenerateHeaderOptions.sticky && this.generatedHeader !== null) {
                  stickyHeaderOffset = this.generatedHeader.clientHeight;
                }
                this.scrollTop = thisRow.offsetTop - stickyHeaderOffset;
                break;
              }
            }
            this.focusOnCell(newFocusRowIndex, this.focusColumnIndex, false);
            break;
          case keyHome:
            if (e2.ctrlKey) {
              e2.preventDefault();
              this.focusOnCell(0, 0, true);
            }
            break;
          case keyEnd:
            if (e2.ctrlKey && this.columnDefinitions !== null) {
              e2.preventDefault();
              this.focusOnCell(this.rowElements.length - 1, this.columnDefinitions.length - 1, true);
            }
            break;
        }
      }
      queueFocusUpdate() {
        if (this.isUpdatingFocus && (this.contains(document.activeElement) || this === document.activeElement)) {
          return;
        }
        if (this.pendingFocusUpdate === false) {
          this.pendingFocusUpdate = true;
          DOM.queueUpdate(() => this.updateFocus());
        }
      }
      updateFocus() {
        this.pendingFocusUpdate = false;
        this.focusOnCell(this.focusRowIndex, this.focusColumnIndex, true);
      }
      toggleGeneratedHeader() {
        if (this.generatedHeader !== null) {
          this.removeChild(this.generatedHeader);
          this.generatedHeader = null;
        }
        if (this.generateHeader !== GenerateHeaderOptions.none && this.rowsData.length > 0) {
          const generatedHeaderElement = document.createElement(this.rowElementTag);
          this.generatedHeader = generatedHeaderElement;
          this.generatedHeader.columnDefinitions = this.columnDefinitions;
          this.generatedHeader.gridTemplateColumns = this.gridTemplateColumns;
          this.generatedHeader.rowType = this.generateHeader === GenerateHeaderOptions.sticky ? DataGridRowTypes.stickyHeader : DataGridRowTypes.header;
          if (this.firstChild !== null || this.rowsPlaceholder !== null) {
            this.insertBefore(generatedHeaderElement, this.firstChild !== null ? this.firstChild : this.rowsPlaceholder);
          }
          return;
        }
      }
    };
    DataGrid$1.generateColumns = (row) => {
      return Object.getOwnPropertyNames(row).map((property, index) => {
        return {
          columnDataKey: property,
          gridColumn: `${index}`
        };
      });
    };
    __decorate$1([
      attr({ attribute: "no-tabbing", mode: "boolean" })
    ], DataGrid$1.prototype, "noTabbing", void 0);
    __decorate$1([
      attr({ attribute: "generate-header" })
    ], DataGrid$1.prototype, "generateHeader", void 0);
    __decorate$1([
      attr({ attribute: "grid-template-columns" })
    ], DataGrid$1.prototype, "gridTemplateColumns", void 0);
    __decorate$1([
      observable
    ], DataGrid$1.prototype, "rowsData", void 0);
    __decorate$1([
      observable
    ], DataGrid$1.prototype, "columnDefinitions", void 0);
    __decorate$1([
      observable
    ], DataGrid$1.prototype, "rowItemTemplate", void 0);
    __decorate$1([
      observable
    ], DataGrid$1.prototype, "cellItemTemplate", void 0);
    __decorate$1([
      observable
    ], DataGrid$1.prototype, "headerCellItemTemplate", void 0);
    __decorate$1([
      observable
    ], DataGrid$1.prototype, "focusRowIndex", void 0);
    __decorate$1([
      observable
    ], DataGrid$1.prototype, "focusColumnIndex", void 0);
    __decorate$1([
      observable
    ], DataGrid$1.prototype, "defaultRowItemTemplate", void 0);
    __decorate$1([
      observable
    ], DataGrid$1.prototype, "rowElementTag", void 0);
    __decorate$1([
      observable
    ], DataGrid$1.prototype, "rowElements", void 0);
    const defaultCellContentsTemplate = html`
    <template>
        ${(x2) => x2.rowData === null || x2.columnDefinition === null || x2.columnDefinition.columnDataKey === null ? null : x2.rowData[x2.columnDefinition.columnDataKey]}
    </template>
`;
    const defaultHeaderCellContentsTemplate = html`
    <template>
        ${(x2) => x2.columnDefinition === null ? null : x2.columnDefinition.title === void 0 ? x2.columnDefinition.columnDataKey : x2.columnDefinition.title}
    </template>
`;
    let DataGridCell$1 = class DataGridCell extends FoundationElement {
      constructor() {
        super(...arguments);
        this.cellType = DataGridCellTypes.default;
        this.rowData = null;
        this.columnDefinition = null;
        this.isActiveCell = false;
        this.customCellView = null;
        this.updateCellStyle = () => {
          this.style.gridColumn = this.gridColumn;
        };
      }
      cellTypeChanged() {
        if (this.$fastController.isConnected) {
          this.updateCellView();
        }
      }
      gridColumnChanged() {
        if (this.$fastController.isConnected) {
          this.updateCellStyle();
        }
      }
      columnDefinitionChanged(oldValue, newValue) {
        if (this.$fastController.isConnected) {
          this.updateCellView();
        }
      }
      /**
       * @internal
       */
      connectedCallback() {
        var _a;
        super.connectedCallback();
        this.addEventListener(eventFocusIn, this.handleFocusin);
        this.addEventListener(eventFocusOut, this.handleFocusout);
        this.addEventListener(eventKeyDown, this.handleKeydown);
        this.style.gridColumn = `${((_a = this.columnDefinition) === null || _a === void 0 ? void 0 : _a.gridColumn) === void 0 ? 0 : this.columnDefinition.gridColumn}`;
        this.updateCellView();
        this.updateCellStyle();
      }
      /**
       * @internal
       */
      disconnectedCallback() {
        super.disconnectedCallback();
        this.removeEventListener(eventFocusIn, this.handleFocusin);
        this.removeEventListener(eventFocusOut, this.handleFocusout);
        this.removeEventListener(eventKeyDown, this.handleKeydown);
        this.disconnectCellView();
      }
      handleFocusin(e2) {
        if (this.isActiveCell) {
          return;
        }
        this.isActiveCell = true;
        switch (this.cellType) {
          case DataGridCellTypes.columnHeader:
            if (this.columnDefinition !== null && this.columnDefinition.headerCellInternalFocusQueue !== true && typeof this.columnDefinition.headerCellFocusTargetCallback === "function") {
              const focusTarget = this.columnDefinition.headerCellFocusTargetCallback(this);
              if (focusTarget !== null) {
                focusTarget.focus();
              }
            }
            break;
          default:
            if (this.columnDefinition !== null && this.columnDefinition.cellInternalFocusQueue !== true && typeof this.columnDefinition.cellFocusTargetCallback === "function") {
              const focusTarget = this.columnDefinition.cellFocusTargetCallback(this);
              if (focusTarget !== null) {
                focusTarget.focus();
              }
            }
            break;
        }
        this.$emit("cell-focused", this);
      }
      handleFocusout(e2) {
        if (this !== document.activeElement && !this.contains(document.activeElement)) {
          this.isActiveCell = false;
        }
      }
      handleKeydown(e2) {
        if (e2.defaultPrevented || this.columnDefinition === null || this.cellType === DataGridCellTypes.default && this.columnDefinition.cellInternalFocusQueue !== true || this.cellType === DataGridCellTypes.columnHeader && this.columnDefinition.headerCellInternalFocusQueue !== true) {
          return;
        }
        switch (e2.key) {
          case keyEnter:
          case keyFunction2:
            if (this.contains(document.activeElement) && document.activeElement !== this) {
              return;
            }
            switch (this.cellType) {
              case DataGridCellTypes.columnHeader:
                if (this.columnDefinition.headerCellFocusTargetCallback !== void 0) {
                  const focusTarget = this.columnDefinition.headerCellFocusTargetCallback(this);
                  if (focusTarget !== null) {
                    focusTarget.focus();
                  }
                  e2.preventDefault();
                }
                break;
              default:
                if (this.columnDefinition.cellFocusTargetCallback !== void 0) {
                  const focusTarget = this.columnDefinition.cellFocusTargetCallback(this);
                  if (focusTarget !== null) {
                    focusTarget.focus();
                  }
                  e2.preventDefault();
                }
                break;
            }
            break;
          case keyEscape:
            if (this.contains(document.activeElement) && document.activeElement !== this) {
              this.focus();
              e2.preventDefault();
            }
            break;
        }
      }
      updateCellView() {
        this.disconnectCellView();
        if (this.columnDefinition === null) {
          return;
        }
        switch (this.cellType) {
          case DataGridCellTypes.columnHeader:
            if (this.columnDefinition.headerCellTemplate !== void 0) {
              this.customCellView = this.columnDefinition.headerCellTemplate.render(this, this);
            } else {
              this.customCellView = defaultHeaderCellContentsTemplate.render(this, this);
            }
            break;
          case void 0:
          case DataGridCellTypes.rowHeader:
          case DataGridCellTypes.default:
            if (this.columnDefinition.cellTemplate !== void 0) {
              this.customCellView = this.columnDefinition.cellTemplate.render(this, this);
            } else {
              this.customCellView = defaultCellContentsTemplate.render(this, this);
            }
            break;
        }
      }
      disconnectCellView() {
        if (this.customCellView !== null) {
          this.customCellView.dispose();
          this.customCellView = null;
        }
      }
    };
    __decorate$1([
      attr({ attribute: "cell-type" })
    ], DataGridCell$1.prototype, "cellType", void 0);
    __decorate$1([
      attr({ attribute: "grid-column" })
    ], DataGridCell$1.prototype, "gridColumn", void 0);
    __decorate$1([
      observable
    ], DataGridCell$1.prototype, "rowData", void 0);
    __decorate$1([
      observable
    ], DataGridCell$1.prototype, "columnDefinition", void 0);
    function createCellItemTemplate(context) {
      const cellTag = context.tagFor(DataGridCell$1);
      return html`
    <${cellTag}
        cell-type="${(x2) => x2.isRowHeader ? "rowheader" : void 0}"
        grid-column="${(x2, c2) => c2.index + 1}"
        :rowData="${(x2, c2) => c2.parent.rowData}"
        :columnDefinition="${(x2) => x2}"
    ></${cellTag}>
`;
    }
    function createHeaderCellItemTemplate(context) {
      const cellTag = context.tagFor(DataGridCell$1);
      return html`
    <${cellTag}
        cell-type="columnheader"
        grid-column="${(x2, c2) => c2.index + 1}"
        :columnDefinition="${(x2) => x2}"
    ></${cellTag}>
`;
    }
    const dataGridRowTemplate = (context, definition) => {
      const cellItemTemplate = createCellItemTemplate(context);
      const headerCellItemTemplate = createHeaderCellItemTemplate(context);
      return html`
        <template
            role="row"
            class="${(x2) => x2.rowType !== "default" ? x2.rowType : ""}"
            :defaultCellItemTemplate="${cellItemTemplate}"
            :defaultHeaderCellItemTemplate="${headerCellItemTemplate}"
            ${children({
        property: "cellElements",
        filter: elements('[role="cell"],[role="gridcell"],[role="columnheader"],[role="rowheader"]')
      })}
        >
            <slot ${slotted("slottedCellElements")}></slot>
        </template>
    `;
    };
    const dataGridCellTemplate = (context, definition) => {
      return html`
        <template
            tabindex="-1"
            role="${(x2) => !x2.cellType || x2.cellType === "default" ? "gridcell" : x2.cellType}"
            class="
            ${(x2) => x2.cellType === "columnheader" ? "column-header" : x2.cellType === "rowheader" ? "row-header" : ""}
            "
        >
            <slot></slot>
        </template>
    `;
    };
    const checkboxTemplate = (context, definition) => html`
    <template
        role="checkbox"
        aria-checked="${(x2) => x2.checked}"
        aria-required="${(x2) => x2.required}"
        aria-disabled="${(x2) => x2.disabled}"
        aria-readonly="${(x2) => x2.readOnly}"
        tabindex="${(x2) => x2.disabled ? null : 0}"
        @keypress="${(x2, c2) => x2.keypressHandler(c2.event)}"
        @click="${(x2, c2) => x2.clickHandler(c2.event)}"
        class="${(x2) => x2.readOnly ? "readonly" : ""} ${(x2) => x2.checked ? "checked" : ""} ${(x2) => x2.indeterminate ? "indeterminate" : ""}"
    >
        <div part="control" class="control">
            <slot name="checked-indicator">
                ${definition.checkedIndicator || ""}
            </slot>
            <slot name="indeterminate-indicator">
                ${definition.indeterminateIndicator || ""}
            </slot>
        </div>
        <label
            part="label"
            class="${(x2) => x2.defaultSlottedNodes && x2.defaultSlottedNodes.length ? "label" : "label label__hidden"}"
        >
            <slot ${slotted("defaultSlottedNodes")}></slot>
        </label>
    </template>
`;
    class _Checkbox extends FoundationElement {
    }
    class FormAssociatedCheckbox extends CheckableFormAssociated(_Checkbox) {
      constructor() {
        super(...arguments);
        this.proxy = document.createElement("input");
      }
    }
    let Checkbox$1 = class Checkbox extends FormAssociatedCheckbox {
      constructor() {
        super();
        this.initialValue = "on";
        this.indeterminate = false;
        this.keypressHandler = (e2) => {
          if (this.readOnly) {
            return;
          }
          switch (e2.key) {
            case keySpace:
              if (this.indeterminate) {
                this.indeterminate = false;
              }
              this.checked = !this.checked;
              break;
          }
        };
        this.clickHandler = (e2) => {
          if (!this.disabled && !this.readOnly) {
            if (this.indeterminate) {
              this.indeterminate = false;
            }
            this.checked = !this.checked;
          }
        };
        this.proxy.setAttribute("type", "checkbox");
      }
      readOnlyChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.readOnly = this.readOnly;
        }
      }
    };
    __decorate$1([
      attr({ attribute: "readonly", mode: "boolean" })
    ], Checkbox$1.prototype, "readOnly", void 0);
    __decorate$1([
      observable
    ], Checkbox$1.prototype, "defaultSlottedNodes", void 0);
    __decorate$1([
      observable
    ], Checkbox$1.prototype, "indeterminate", void 0);
    function isListboxOption(el2) {
      return isHTMLElement(el2) && (el2.getAttribute("role") === "option" || el2 instanceof HTMLOptionElement);
    }
    class ListboxOption extends FoundationElement {
      constructor(text2, value, defaultSelected, selected) {
        super();
        this.defaultSelected = false;
        this.dirtySelected = false;
        this.selected = this.defaultSelected;
        this.dirtyValue = false;
        if (text2) {
          this.textContent = text2;
        }
        if (value) {
          this.initialValue = value;
        }
        if (defaultSelected) {
          this.defaultSelected = defaultSelected;
        }
        if (selected) {
          this.selected = selected;
        }
        this.proxy = new Option(`${this.textContent}`, this.initialValue, this.defaultSelected, this.selected);
        this.proxy.disabled = this.disabled;
      }
      /**
       * Updates the ariaChecked property when the checked property changes.
       *
       * @param prev - the previous checked value
       * @param next - the current checked value
       *
       * @public
       */
      checkedChanged(prev, next) {
        if (typeof next === "boolean") {
          this.ariaChecked = next ? "true" : "false";
          return;
        }
        this.ariaChecked = null;
      }
      /**
       * Updates the proxy's text content when the default slot changes.
       * @param prev - the previous content value
       * @param next - the current content value
       *
       * @internal
       */
      contentChanged(prev, next) {
        if (this.proxy instanceof HTMLOptionElement) {
          this.proxy.textContent = this.textContent;
        }
        this.$emit("contentchange", null, { bubbles: true });
      }
      defaultSelectedChanged() {
        if (!this.dirtySelected) {
          this.selected = this.defaultSelected;
          if (this.proxy instanceof HTMLOptionElement) {
            this.proxy.selected = this.defaultSelected;
          }
        }
      }
      disabledChanged(prev, next) {
        this.ariaDisabled = this.disabled ? "true" : "false";
        if (this.proxy instanceof HTMLOptionElement) {
          this.proxy.disabled = this.disabled;
        }
      }
      selectedAttributeChanged() {
        this.defaultSelected = this.selectedAttribute;
        if (this.proxy instanceof HTMLOptionElement) {
          this.proxy.defaultSelected = this.defaultSelected;
        }
      }
      selectedChanged() {
        this.ariaSelected = this.selected ? "true" : "false";
        if (!this.dirtySelected) {
          this.dirtySelected = true;
        }
        if (this.proxy instanceof HTMLOptionElement) {
          this.proxy.selected = this.selected;
        }
      }
      initialValueChanged(previous, next) {
        if (!this.dirtyValue) {
          this.value = this.initialValue;
          this.dirtyValue = false;
        }
      }
      get label() {
        var _a;
        return (_a = this.value) !== null && _a !== void 0 ? _a : this.text;
      }
      get text() {
        var _a, _b;
        return (_b = (_a = this.textContent) === null || _a === void 0 ? void 0 : _a.replace(/\s+/g, " ").trim()) !== null && _b !== void 0 ? _b : "";
      }
      set value(next) {
        const newValue = `${next !== null && next !== void 0 ? next : ""}`;
        this._value = newValue;
        this.dirtyValue = true;
        if (this.proxy instanceof HTMLOptionElement) {
          this.proxy.value = newValue;
        }
        Observable.notify(this, "value");
      }
      get value() {
        var _a;
        Observable.track(this, "value");
        return (_a = this._value) !== null && _a !== void 0 ? _a : this.text;
      }
      get form() {
        return this.proxy ? this.proxy.form : null;
      }
    }
    __decorate$1([
      observable
    ], ListboxOption.prototype, "checked", void 0);
    __decorate$1([
      observable
    ], ListboxOption.prototype, "content", void 0);
    __decorate$1([
      observable
    ], ListboxOption.prototype, "defaultSelected", void 0);
    __decorate$1([
      attr({ mode: "boolean" })
    ], ListboxOption.prototype, "disabled", void 0);
    __decorate$1([
      attr({ attribute: "selected", mode: "boolean" })
    ], ListboxOption.prototype, "selectedAttribute", void 0);
    __decorate$1([
      observable
    ], ListboxOption.prototype, "selected", void 0);
    __decorate$1([
      attr({ attribute: "value", mode: "fromView" })
    ], ListboxOption.prototype, "initialValue", void 0);
    class DelegatesARIAListboxOption {
    }
    __decorate$1([
      observable
    ], DelegatesARIAListboxOption.prototype, "ariaChecked", void 0);
    __decorate$1([
      observable
    ], DelegatesARIAListboxOption.prototype, "ariaPosInSet", void 0);
    __decorate$1([
      observable
    ], DelegatesARIAListboxOption.prototype, "ariaSelected", void 0);
    __decorate$1([
      observable
    ], DelegatesARIAListboxOption.prototype, "ariaSetSize", void 0);
    applyMixins(DelegatesARIAListboxOption, ARIAGlobalStatesAndProperties);
    applyMixins(ListboxOption, StartEnd, DelegatesARIAListboxOption);
    class Listbox extends FoundationElement {
      constructor() {
        super(...arguments);
        this._options = [];
        this.selectedIndex = -1;
        this.selectedOptions = [];
        this.shouldSkipFocus = false;
        this.typeaheadBuffer = "";
        this.typeaheadExpired = true;
        this.typeaheadTimeout = -1;
      }
      /**
       * The first selected option.
       *
       * @internal
       */
      get firstSelectedOption() {
        var _a;
        return (_a = this.selectedOptions[0]) !== null && _a !== void 0 ? _a : null;
      }
      /**
       * Returns true if there is one or more selectable option.
       *
       * @internal
       */
      get hasSelectableOptions() {
        return this.options.length > 0 && !this.options.every((o) => o.disabled);
      }
      /**
       * The number of options.
       *
       * @public
       */
      get length() {
        var _a, _b;
        return (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
      }
      /**
       * The list of options.
       *
       * @public
       */
      get options() {
        Observable.track(this, "options");
        return this._options;
      }
      set options(value) {
        this._options = value;
        Observable.notify(this, "options");
      }
      /**
       * Flag for the typeahead timeout expiration.
       *
       * @deprecated use `Listbox.typeaheadExpired`
       * @internal
       */
      get typeAheadExpired() {
        return this.typeaheadExpired;
      }
      set typeAheadExpired(value) {
        this.typeaheadExpired = value;
      }
      /**
       * Handle click events for listbox options.
       *
       * @internal
       */
      clickHandler(e2) {
        const captured = e2.target.closest(`option,[role=option]`);
        if (captured && !captured.disabled) {
          this.selectedIndex = this.options.indexOf(captured);
          return true;
        }
      }
      /**
       * Ensures that the provided option is focused and scrolled into view.
       *
       * @param optionToFocus - The option to focus
       * @internal
       */
      focusAndScrollOptionIntoView(optionToFocus = this.firstSelectedOption) {
        if (this.contains(document.activeElement) && optionToFocus !== null) {
          optionToFocus.focus();
          requestAnimationFrame(() => {
            optionToFocus.scrollIntoView({ block: "nearest" });
          });
        }
      }
      /**
       * Handles `focusin` actions for the component. When the component receives focus,
       * the list of selected options is refreshed and the first selected option is scrolled
       * into view.
       *
       * @internal
       */
      focusinHandler(e2) {
        if (!this.shouldSkipFocus && e2.target === e2.currentTarget) {
          this.setSelectedOptions();
          this.focusAndScrollOptionIntoView();
        }
        this.shouldSkipFocus = false;
      }
      /**
       * Returns the options which match the current typeahead buffer.
       *
       * @internal
       */
      getTypeaheadMatches() {
        const pattern = this.typeaheadBuffer.replace(/[.*+\-?^${}()|[\]\\]/g, "\\$&");
        const re2 = new RegExp(`^${pattern}`, "gi");
        return this.options.filter((o) => o.text.trim().match(re2));
      }
      /**
       * Determines the index of the next option which is selectable, if any.
       *
       * @param prev - the previous selected index
       * @param next - the next index to select
       *
       * @internal
       */
      getSelectableIndex(prev = this.selectedIndex, next) {
        const direction = prev > next ? -1 : prev < next ? 1 : 0;
        const potentialDirection = prev + direction;
        let nextSelectableOption = null;
        switch (direction) {
          case -1: {
            nextSelectableOption = this.options.reduceRight((nextSelectableOption2, thisOption, index) => !nextSelectableOption2 && !thisOption.disabled && index < potentialDirection ? thisOption : nextSelectableOption2, nextSelectableOption);
            break;
          }
          case 1: {
            nextSelectableOption = this.options.reduce((nextSelectableOption2, thisOption, index) => !nextSelectableOption2 && !thisOption.disabled && index > potentialDirection ? thisOption : nextSelectableOption2, nextSelectableOption);
            break;
          }
        }
        return this.options.indexOf(nextSelectableOption);
      }
      /**
       * Handles external changes to child options.
       *
       * @param source - the source object
       * @param propertyName - the property
       *
       * @internal
       */
      handleChange(source, propertyName) {
        switch (propertyName) {
          case "selected": {
            if (Listbox.slottedOptionFilter(source)) {
              this.selectedIndex = this.options.indexOf(source);
            }
            this.setSelectedOptions();
            break;
          }
        }
      }
      /**
       * Moves focus to an option whose label matches characters typed by the user.
       * Consecutive keystrokes are batched into a buffer of search text used
       * to match against the set of options.  If `TYPE_AHEAD_TIMEOUT_MS` passes
       * between consecutive keystrokes, the search restarts.
       *
       * @param key - the key to be evaluated
       *
       * @internal
       */
      handleTypeAhead(key) {
        if (this.typeaheadTimeout) {
          window.clearTimeout(this.typeaheadTimeout);
        }
        this.typeaheadTimeout = window.setTimeout(() => this.typeaheadExpired = true, Listbox.TYPE_AHEAD_TIMEOUT_MS);
        if (key.length > 1) {
          return;
        }
        this.typeaheadBuffer = `${this.typeaheadExpired ? "" : this.typeaheadBuffer}${key}`;
      }
      /**
       * Handles `keydown` actions for listbox navigation and typeahead.
       *
       * @internal
       */
      keydownHandler(e2) {
        if (this.disabled) {
          return true;
        }
        this.shouldSkipFocus = false;
        const key = e2.key;
        switch (key) {
          case keyHome: {
            if (!e2.shiftKey) {
              e2.preventDefault();
              this.selectFirstOption();
            }
            break;
          }
          case keyArrowDown: {
            if (!e2.shiftKey) {
              e2.preventDefault();
              this.selectNextOption();
            }
            break;
          }
          case keyArrowUp: {
            if (!e2.shiftKey) {
              e2.preventDefault();
              this.selectPreviousOption();
            }
            break;
          }
          case keyEnd: {
            e2.preventDefault();
            this.selectLastOption();
            break;
          }
          case keyTab: {
            this.focusAndScrollOptionIntoView();
            return true;
          }
          case keyEnter:
          case keyEscape: {
            return true;
          }
          case keySpace: {
            if (this.typeaheadExpired) {
              return true;
            }
          }
          default: {
            if (key.length === 1) {
              this.handleTypeAhead(`${key}`);
            }
            return true;
          }
        }
      }
      /**
       * Prevents `focusin` events from firing before `click` events when the
       * element is unfocused.
       *
       * @internal
       */
      mousedownHandler(e2) {
        this.shouldSkipFocus = !this.contains(document.activeElement);
        return true;
      }
      /**
       * Switches between single-selection and multi-selection mode.
       *
       * @param prev - the previous value of the `multiple` attribute
       * @param next - the next value of the `multiple` attribute
       *
       * @internal
       */
      multipleChanged(prev, next) {
        this.ariaMultiSelectable = next ? "true" : null;
      }
      /**
       * Updates the list of selected options when the `selectedIndex` changes.
       *
       * @param prev - the previous selected index value
       * @param next - the current selected index value
       *
       * @internal
       */
      selectedIndexChanged(prev, next) {
        var _a;
        if (!this.hasSelectableOptions) {
          this.selectedIndex = -1;
          return;
        }
        if (((_a = this.options[this.selectedIndex]) === null || _a === void 0 ? void 0 : _a.disabled) && typeof prev === "number") {
          const selectableIndex = this.getSelectableIndex(prev, next);
          const newNext = selectableIndex > -1 ? selectableIndex : prev;
          this.selectedIndex = newNext;
          if (next === newNext) {
            this.selectedIndexChanged(next, newNext);
          }
          return;
        }
        this.setSelectedOptions();
      }
      /**
       * Updates the selectedness of each option when the list of selected options changes.
       *
       * @param prev - the previous list of selected options
       * @param next - the current list of selected options
       *
       * @internal
       */
      selectedOptionsChanged(prev, next) {
        var _a;
        const filteredNext = next.filter(Listbox.slottedOptionFilter);
        (_a = this.options) === null || _a === void 0 ? void 0 : _a.forEach((o) => {
          const notifier = Observable.getNotifier(o);
          notifier.unsubscribe(this, "selected");
          o.selected = filteredNext.includes(o);
          notifier.subscribe(this, "selected");
        });
      }
      /**
       * Moves focus to the first selectable option.
       *
       * @public
       */
      selectFirstOption() {
        var _a, _b;
        if (!this.disabled) {
          this.selectedIndex = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.findIndex((o) => !o.disabled)) !== null && _b !== void 0 ? _b : -1;
        }
      }
      /**
       * Moves focus to the last selectable option.
       *
       * @internal
       */
      selectLastOption() {
        if (!this.disabled) {
          this.selectedIndex = findLastIndex(this.options, (o) => !o.disabled);
        }
      }
      /**
       * Moves focus to the next selectable option.
       *
       * @internal
       */
      selectNextOption() {
        if (!this.disabled && this.selectedIndex < this.options.length - 1) {
          this.selectedIndex += 1;
        }
      }
      /**
       * Moves focus to the previous selectable option.
       *
       * @internal
       */
      selectPreviousOption() {
        if (!this.disabled && this.selectedIndex > 0) {
          this.selectedIndex = this.selectedIndex - 1;
        }
      }
      /**
       * Updates the selected index to match the first selected option.
       *
       * @internal
       */
      setDefaultSelectedOption() {
        var _a, _b;
        this.selectedIndex = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.findIndex((el2) => el2.defaultSelected)) !== null && _b !== void 0 ? _b : -1;
      }
      /**
       * Sets an option as selected and gives it focus.
       *
       * @public
       */
      setSelectedOptions() {
        var _a, _b, _c;
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) {
          this.selectedOptions = [this.options[this.selectedIndex]];
          this.ariaActiveDescendant = (_c = (_b = this.firstSelectedOption) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : "";
          this.focusAndScrollOptionIntoView();
        }
      }
      /**
       * Updates the list of options and resets the selected option when the slotted option content changes.
       *
       * @param prev - the previous list of slotted options
       * @param next - the current list of slotted options
       *
       * @internal
       */
      slottedOptionsChanged(prev, next) {
        this.options = next.reduce((options, item) => {
          if (isListboxOption(item)) {
            options.push(item);
          }
          return options;
        }, []);
        const setSize = `${this.options.length}`;
        this.options.forEach((option, index) => {
          if (!option.id) {
            option.id = uniqueId("option-");
          }
          option.ariaPosInSet = `${index + 1}`;
          option.ariaSetSize = setSize;
        });
        if (this.$fastController.isConnected) {
          this.setSelectedOptions();
          this.setDefaultSelectedOption();
        }
      }
      /**
       * Updates the filtered list of options when the typeahead buffer changes.
       *
       * @param prev - the previous typeahead buffer value
       * @param next - the current typeahead buffer value
       *
       * @internal
       */
      typeaheadBufferChanged(prev, next) {
        if (this.$fastController.isConnected) {
          const typeaheadMatches = this.getTypeaheadMatches();
          if (typeaheadMatches.length) {
            const selectedIndex = this.options.indexOf(typeaheadMatches[0]);
            if (selectedIndex > -1) {
              this.selectedIndex = selectedIndex;
            }
          }
          this.typeaheadExpired = false;
        }
      }
    }
    Listbox.slottedOptionFilter = (n2) => isListboxOption(n2) && !n2.hidden;
    Listbox.TYPE_AHEAD_TIMEOUT_MS = 1e3;
    __decorate$1([
      attr({ mode: "boolean" })
    ], Listbox.prototype, "disabled", void 0);
    __decorate$1([
      observable
    ], Listbox.prototype, "selectedIndex", void 0);
    __decorate$1([
      observable
    ], Listbox.prototype, "selectedOptions", void 0);
    __decorate$1([
      observable
    ], Listbox.prototype, "slottedOptions", void 0);
    __decorate$1([
      observable
    ], Listbox.prototype, "typeaheadBuffer", void 0);
    class DelegatesARIAListbox {
    }
    __decorate$1([
      observable
    ], DelegatesARIAListbox.prototype, "ariaActiveDescendant", void 0);
    __decorate$1([
      observable
    ], DelegatesARIAListbox.prototype, "ariaDisabled", void 0);
    __decorate$1([
      observable
    ], DelegatesARIAListbox.prototype, "ariaExpanded", void 0);
    __decorate$1([
      observable
    ], DelegatesARIAListbox.prototype, "ariaMultiSelectable", void 0);
    applyMixins(DelegatesARIAListbox, ARIAGlobalStatesAndProperties);
    applyMixins(Listbox, DelegatesARIAListbox);
    const SelectPosition = {
      above: "above",
      below: "below"
    };
    function composedParent(element) {
      const parentNode = element.parentElement;
      if (parentNode) {
        return parentNode;
      } else {
        const rootNode = element.getRootNode();
        if (rootNode.host instanceof HTMLElement) {
          return rootNode.host;
        }
      }
      return null;
    }
    function composedContains(reference, test) {
      let current = test;
      while (current !== null) {
        if (current === reference) {
          return true;
        }
        current = composedParent(current);
      }
      return false;
    }
    const defaultElement = document.createElement("div");
    function isFastElement(element) {
      return element instanceof FASTElement;
    }
    class QueuedStyleSheetTarget {
      setProperty(name, value) {
        DOM.queueUpdate(() => this.target.setProperty(name, value));
      }
      removeProperty(name) {
        DOM.queueUpdate(() => this.target.removeProperty(name));
      }
    }
    class ConstructableStyleSheetTarget extends QueuedStyleSheetTarget {
      constructor(source) {
        super();
        const sheet = new CSSStyleSheet();
        this.target = sheet.cssRules[sheet.insertRule(":host{}")].style;
        source.$fastController.addStyles(ElementStyles.create([sheet]));
      }
    }
    class DocumentStyleSheetTarget extends QueuedStyleSheetTarget {
      constructor() {
        super();
        const sheet = new CSSStyleSheet();
        this.target = sheet.cssRules[sheet.insertRule(":root{}")].style;
        document.adoptedStyleSheets = [
          ...document.adoptedStyleSheets,
          sheet
        ];
      }
    }
    class HeadStyleElementStyleSheetTarget extends QueuedStyleSheetTarget {
      constructor() {
        super();
        this.style = document.createElement("style");
        document.head.appendChild(this.style);
        const { sheet } = this.style;
        if (sheet) {
          const index = sheet.insertRule(":root{}", sheet.cssRules.length);
          this.target = sheet.cssRules[index].style;
        }
      }
    }
    class StyleElementStyleSheetTarget {
      constructor(target) {
        this.store = /* @__PURE__ */ new Map();
        this.target = null;
        const controller = target.$fastController;
        this.style = document.createElement("style");
        controller.addStyles(this.style);
        Observable.getNotifier(controller).subscribe(this, "isConnected");
        this.handleChange(controller, "isConnected");
      }
      targetChanged() {
        if (this.target !== null) {
          for (const [key, value] of this.store.entries()) {
            this.target.setProperty(key, value);
          }
        }
      }
      setProperty(name, value) {
        this.store.set(name, value);
        DOM.queueUpdate(() => {
          if (this.target !== null) {
            this.target.setProperty(name, value);
          }
        });
      }
      removeProperty(name) {
        this.store.delete(name);
        DOM.queueUpdate(() => {
          if (this.target !== null) {
            this.target.removeProperty(name);
          }
        });
      }
      handleChange(source, key) {
        const { sheet } = this.style;
        if (sheet) {
          const index = sheet.insertRule(":host{}", sheet.cssRules.length);
          this.target = sheet.cssRules[index].style;
        } else {
          this.target = null;
        }
      }
    }
    __decorate$1([
      observable
    ], StyleElementStyleSheetTarget.prototype, "target", void 0);
    class ElementStyleSheetTarget {
      constructor(source) {
        this.target = source.style;
      }
      setProperty(name, value) {
        DOM.queueUpdate(() => this.target.setProperty(name, value));
      }
      removeProperty(name) {
        DOM.queueUpdate(() => this.target.removeProperty(name));
      }
    }
    class RootStyleSheetTarget {
      setProperty(name, value) {
        RootStyleSheetTarget.properties[name] = value;
        for (const target of RootStyleSheetTarget.roots.values()) {
          PropertyTargetManager.getOrCreate(RootStyleSheetTarget.normalizeRoot(target)).setProperty(name, value);
        }
      }
      removeProperty(name) {
        delete RootStyleSheetTarget.properties[name];
        for (const target of RootStyleSheetTarget.roots.values()) {
          PropertyTargetManager.getOrCreate(RootStyleSheetTarget.normalizeRoot(target)).removeProperty(name);
        }
      }
      static registerRoot(root2) {
        const { roots } = RootStyleSheetTarget;
        if (!roots.has(root2)) {
          roots.add(root2);
          const target = PropertyTargetManager.getOrCreate(this.normalizeRoot(root2));
          for (const key in RootStyleSheetTarget.properties) {
            target.setProperty(key, RootStyleSheetTarget.properties[key]);
          }
        }
      }
      static unregisterRoot(root2) {
        const { roots } = RootStyleSheetTarget;
        if (roots.has(root2)) {
          roots.delete(root2);
          const target = PropertyTargetManager.getOrCreate(RootStyleSheetTarget.normalizeRoot(root2));
          for (const key in RootStyleSheetTarget.properties) {
            target.removeProperty(key);
          }
        }
      }
      /**
       * Returns the document when provided the default element,
       * otherwise is a no-op
       * @param root - the root to normalize
       */
      static normalizeRoot(root2) {
        return root2 === defaultElement ? document : root2;
      }
    }
    RootStyleSheetTarget.roots = /* @__PURE__ */ new Set();
    RootStyleSheetTarget.properties = {};
    const propertyTargetCache = /* @__PURE__ */ new WeakMap();
    const propertyTargetCtor = DOM.supportsAdoptedStyleSheets ? ConstructableStyleSheetTarget : StyleElementStyleSheetTarget;
    const PropertyTargetManager = Object.freeze({
      getOrCreate(source) {
        if (propertyTargetCache.has(source)) {
          return propertyTargetCache.get(source);
        }
        let target;
        if (source === defaultElement) {
          target = new RootStyleSheetTarget();
        } else if (source instanceof Document) {
          target = DOM.supportsAdoptedStyleSheets ? new DocumentStyleSheetTarget() : new HeadStyleElementStyleSheetTarget();
        } else if (isFastElement(source)) {
          target = new propertyTargetCtor(source);
        } else {
          target = new ElementStyleSheetTarget(source);
        }
        propertyTargetCache.set(source, target);
        return target;
      }
    });
    class DesignTokenImpl extends CSSDirective {
      constructor(configuration) {
        super();
        this.subscribers = /* @__PURE__ */ new WeakMap();
        this._appliedTo = /* @__PURE__ */ new Set();
        this.name = configuration.name;
        if (configuration.cssCustomPropertyName !== null) {
          this.cssCustomProperty = `--${configuration.cssCustomPropertyName}`;
          this.cssVar = `var(${this.cssCustomProperty})`;
        }
        this.id = DesignTokenImpl.uniqueId();
        DesignTokenImpl.tokensById.set(this.id, this);
      }
      get appliedTo() {
        return [...this._appliedTo];
      }
      static from(nameOrConfig) {
        return new DesignTokenImpl({
          name: typeof nameOrConfig === "string" ? nameOrConfig : nameOrConfig.name,
          cssCustomPropertyName: typeof nameOrConfig === "string" ? nameOrConfig : nameOrConfig.cssCustomPropertyName === void 0 ? nameOrConfig.name : nameOrConfig.cssCustomPropertyName
        });
      }
      static isCSSDesignToken(token) {
        return typeof token.cssCustomProperty === "string";
      }
      static isDerivedDesignTokenValue(value) {
        return typeof value === "function";
      }
      /**
       * Gets a token by ID. Returns undefined if the token was not found.
       * @param id - The ID of the token
       * @returns
       */
      static getTokenById(id2) {
        return DesignTokenImpl.tokensById.get(id2);
      }
      getOrCreateSubscriberSet(target = this) {
        return this.subscribers.get(target) || this.subscribers.set(target, /* @__PURE__ */ new Set()) && this.subscribers.get(target);
      }
      createCSS() {
        return this.cssVar || "";
      }
      getValueFor(element) {
        const value = DesignTokenNode.getOrCreate(element).get(this);
        if (value !== void 0) {
          return value;
        }
        throw new Error(`Value could not be retrieved for token named "${this.name}". Ensure the value is set for ${element} or an ancestor of ${element}.`);
      }
      setValueFor(element, value) {
        this._appliedTo.add(element);
        if (value instanceof DesignTokenImpl) {
          value = this.alias(value);
        }
        DesignTokenNode.getOrCreate(element).set(this, value);
        return this;
      }
      deleteValueFor(element) {
        this._appliedTo.delete(element);
        if (DesignTokenNode.existsFor(element)) {
          DesignTokenNode.getOrCreate(element).delete(this);
        }
        return this;
      }
      withDefault(value) {
        this.setValueFor(defaultElement, value);
        return this;
      }
      subscribe(subscriber, target) {
        const subscriberSet = this.getOrCreateSubscriberSet(target);
        if (target && !DesignTokenNode.existsFor(target)) {
          DesignTokenNode.getOrCreate(target);
        }
        if (!subscriberSet.has(subscriber)) {
          subscriberSet.add(subscriber);
        }
      }
      unsubscribe(subscriber, target) {
        const list = this.subscribers.get(target || this);
        if (list && list.has(subscriber)) {
          list.delete(subscriber);
        }
      }
      /**
       * Notifies subscribers that the value for an element has changed.
       * @param element - The element to emit a notification for
       */
      notify(element) {
        const record = Object.freeze({ token: this, target: element });
        if (this.subscribers.has(this)) {
          this.subscribers.get(this).forEach((sub) => sub.handleChange(record));
        }
        if (this.subscribers.has(element)) {
          this.subscribers.get(element).forEach((sub) => sub.handleChange(record));
        }
      }
      /**
       * Alias the token to the provided token.
       * @param token - the token to alias to
       */
      alias(token) {
        return (target) => token.getValueFor(target);
      }
    }
    DesignTokenImpl.uniqueId = (() => {
      let id2 = 0;
      return () => {
        id2++;
        return id2.toString(16);
      };
    })();
    DesignTokenImpl.tokensById = /* @__PURE__ */ new Map();
    class CustomPropertyReflector {
      startReflection(token, target) {
        token.subscribe(this, target);
        this.handleChange({ token, target });
      }
      stopReflection(token, target) {
        token.unsubscribe(this, target);
        this.remove(token, target);
      }
      handleChange(record) {
        const { token, target } = record;
        this.add(token, target);
      }
      add(token, target) {
        PropertyTargetManager.getOrCreate(target).setProperty(token.cssCustomProperty, this.resolveCSSValue(DesignTokenNode.getOrCreate(target).get(token)));
      }
      remove(token, target) {
        PropertyTargetManager.getOrCreate(target).removeProperty(token.cssCustomProperty);
      }
      resolveCSSValue(value) {
        return value && typeof value.createCSS === "function" ? value.createCSS() : value;
      }
    }
    class DesignTokenBindingObserver {
      constructor(source, token, node) {
        this.source = source;
        this.token = token;
        this.node = node;
        this.dependencies = /* @__PURE__ */ new Set();
        this.observer = Observable.binding(source, this, false);
        this.observer.handleChange = this.observer.call;
        this.handleChange();
      }
      disconnect() {
        this.observer.disconnect();
      }
      /**
       * @internal
       */
      handleChange() {
        this.node.store.set(this.token, this.observer.observe(this.node.target, defaultExecutionContext));
      }
    }
    class Store {
      constructor() {
        this.values = /* @__PURE__ */ new Map();
      }
      set(token, value) {
        if (this.values.get(token) !== value) {
          this.values.set(token, value);
          Observable.getNotifier(this).notify(token.id);
        }
      }
      get(token) {
        Observable.track(this, token.id);
        return this.values.get(token);
      }
      delete(token) {
        this.values.delete(token);
      }
      all() {
        return this.values.entries();
      }
    }
    const nodeCache = /* @__PURE__ */ new WeakMap();
    const childToParent = /* @__PURE__ */ new WeakMap();
    class DesignTokenNode {
      constructor(target) {
        this.target = target;
        this.store = new Store();
        this.children = [];
        this.assignedValues = /* @__PURE__ */ new Map();
        this.reflecting = /* @__PURE__ */ new Set();
        this.bindingObservers = /* @__PURE__ */ new Map();
        this.tokenValueChangeHandler = {
          handleChange: (source, arg) => {
            const token = DesignTokenImpl.getTokenById(arg);
            if (token) {
              token.notify(this.target);
              if (DesignTokenImpl.isCSSDesignToken(token)) {
                const parent = this.parent;
                const reflecting = this.isReflecting(token);
                if (parent) {
                  const parentValue = parent.get(token);
                  const sourceValue = source.get(token);
                  if (parentValue !== sourceValue && !reflecting) {
                    this.reflectToCSS(token);
                  } else if (parentValue === sourceValue && reflecting) {
                    this.stopReflectToCSS(token);
                  }
                } else if (!reflecting) {
                  this.reflectToCSS(token);
                }
              }
            }
          }
        };
        nodeCache.set(target, this);
        Observable.getNotifier(this.store).subscribe(this.tokenValueChangeHandler);
        if (target instanceof FASTElement) {
          target.$fastController.addBehaviors([this]);
        } else if (target.isConnected) {
          this.bind();
        }
      }
      /**
       * Returns a DesignTokenNode for an element.
       * Creates a new instance if one does not already exist for a node,
       * otherwise returns the cached instance
       *
       * @param target - The HTML element to retrieve a DesignTokenNode for
       */
      static getOrCreate(target) {
        return nodeCache.get(target) || new DesignTokenNode(target);
      }
      /**
       * Determines if a DesignTokenNode has been created for a target
       * @param target - The element to test
       */
      static existsFor(target) {
        return nodeCache.has(target);
      }
      /**
       * Searches for and return the nearest parent DesignTokenNode.
       * Null is returned if no node is found or the node provided is for a default element.
       */
      static findParent(node) {
        if (!(defaultElement === node.target)) {
          let parent = composedParent(node.target);
          while (parent !== null) {
            if (nodeCache.has(parent)) {
              return nodeCache.get(parent);
            }
            parent = composedParent(parent);
          }
          return DesignTokenNode.getOrCreate(defaultElement);
        }
        return null;
      }
      /**
       * Finds the closest node with a value explicitly assigned for a token, otherwise null.
       * @param token - The token to look for
       * @param start - The node to start looking for value assignment
       * @returns
       */
      static findClosestAssignedNode(token, start) {
        let current = start;
        do {
          if (current.has(token)) {
            return current;
          }
          current = current.parent ? current.parent : current.target !== defaultElement ? DesignTokenNode.getOrCreate(defaultElement) : null;
        } while (current !== null);
        return null;
      }
      /**
       * The parent DesignTokenNode, or null.
       */
      get parent() {
        return childToParent.get(this) || null;
      }
      /**
       * Checks if a token has been assigned an explicit value the node.
       * @param token - the token to check.
       */
      has(token) {
        return this.assignedValues.has(token);
      }
      /**
       * Gets the value of a token for a node
       * @param token - The token to retrieve the value for
       * @returns
       */
      get(token) {
        const value = this.store.get(token);
        if (value !== void 0) {
          return value;
        }
        const raw = this.getRaw(token);
        if (raw !== void 0) {
          this.hydrate(token, raw);
          return this.get(token);
        }
      }
      /**
       * Retrieves the raw assigned value of a token from the nearest assigned node.
       * @param token - The token to retrieve a raw value for
       * @returns
       */
      getRaw(token) {
        var _a;
        if (this.assignedValues.has(token)) {
          return this.assignedValues.get(token);
        }
        return (_a = DesignTokenNode.findClosestAssignedNode(token, this)) === null || _a === void 0 ? void 0 : _a.getRaw(token);
      }
      /**
       * Sets a token to a value for a node
       * @param token - The token to set
       * @param value - The value to set the token to
       */
      set(token, value) {
        if (DesignTokenImpl.isDerivedDesignTokenValue(this.assignedValues.get(token))) {
          this.tearDownBindingObserver(token);
        }
        this.assignedValues.set(token, value);
        if (DesignTokenImpl.isDerivedDesignTokenValue(value)) {
          this.setupBindingObserver(token, value);
        } else {
          this.store.set(token, value);
        }
      }
      /**
       * Deletes a token value for the node.
       * @param token - The token to delete the value for
       */
      delete(token) {
        this.assignedValues.delete(token);
        this.tearDownBindingObserver(token);
        const upstream = this.getRaw(token);
        if (upstream) {
          this.hydrate(token, upstream);
        } else {
          this.store.delete(token);
        }
      }
      /**
       * Invoked when the DesignTokenNode.target is attached to the document
       */
      bind() {
        const parent = DesignTokenNode.findParent(this);
        if (parent) {
          parent.appendChild(this);
        }
        for (const key of this.assignedValues.keys()) {
          key.notify(this.target);
        }
      }
      /**
       * Invoked when the DesignTokenNode.target is detached from the document
       */
      unbind() {
        if (this.parent) {
          const parent = childToParent.get(this);
          parent.removeChild(this);
        }
      }
      /**
       * Appends a child to a parent DesignTokenNode.
       * @param child - The child to append to the node
       */
      appendChild(child) {
        if (child.parent) {
          childToParent.get(child).removeChild(child);
        }
        const reParent = this.children.filter((x2) => child.contains(x2));
        childToParent.set(child, this);
        this.children.push(child);
        reParent.forEach((x2) => child.appendChild(x2));
        Observable.getNotifier(this.store).subscribe(child);
        for (const [token, value] of this.store.all()) {
          child.hydrate(token, this.bindingObservers.has(token) ? this.getRaw(token) : value);
        }
      }
      /**
       * Removes a child from a node.
       * @param child - The child to remove.
       */
      removeChild(child) {
        const childIndex = this.children.indexOf(child);
        if (childIndex !== -1) {
          this.children.splice(childIndex, 1);
        }
        Observable.getNotifier(this.store).unsubscribe(child);
        return child.parent === this ? childToParent.delete(child) : false;
      }
      /**
       * Tests whether a provided node is contained by
       * the calling node.
       * @param test - The node to test
       */
      contains(test) {
        return composedContains(this.target, test.target);
      }
      /**
       * Instructs the node to reflect a design token for the provided token.
       * @param token - The design token to reflect
       */
      reflectToCSS(token) {
        if (!this.isReflecting(token)) {
          this.reflecting.add(token);
          DesignTokenNode.cssCustomPropertyReflector.startReflection(token, this.target);
        }
      }
      /**
       * Stops reflecting a DesignToken to CSS
       * @param token - The design token to stop reflecting
       */
      stopReflectToCSS(token) {
        if (this.isReflecting(token)) {
          this.reflecting.delete(token);
          DesignTokenNode.cssCustomPropertyReflector.stopReflection(token, this.target);
        }
      }
      /**
       * Determines if a token is being reflected to CSS for a node.
       * @param token - The token to check for reflection
       * @returns
       */
      isReflecting(token) {
        return this.reflecting.has(token);
      }
      /**
       * Handle changes to upstream tokens
       * @param source - The parent DesignTokenNode
       * @param property - The token ID that changed
       */
      handleChange(source, property) {
        const token = DesignTokenImpl.getTokenById(property);
        if (!token) {
          return;
        }
        this.hydrate(token, this.getRaw(token));
      }
      /**
       * Hydrates a token with a DesignTokenValue, making retrieval available.
       * @param token - The token to hydrate
       * @param value - The value to hydrate
       */
      hydrate(token, value) {
        if (!this.has(token)) {
          const observer = this.bindingObservers.get(token);
          if (DesignTokenImpl.isDerivedDesignTokenValue(value)) {
            if (observer) {
              if (observer.source !== value) {
                this.tearDownBindingObserver(token);
                this.setupBindingObserver(token, value);
              }
            } else {
              this.setupBindingObserver(token, value);
            }
          } else {
            if (observer) {
              this.tearDownBindingObserver(token);
            }
            this.store.set(token, value);
          }
        }
      }
      /**
       * Sets up a binding observer for a derived token value that notifies token
       * subscribers on change.
       *
       * @param token - The token to notify when the binding updates
       * @param source - The binding source
       */
      setupBindingObserver(token, source) {
        const binding = new DesignTokenBindingObserver(source, token, this);
        this.bindingObservers.set(token, binding);
        return binding;
      }
      /**
       * Tear down a binding observer for a token.
       */
      tearDownBindingObserver(token) {
        if (this.bindingObservers.has(token)) {
          this.bindingObservers.get(token).disconnect();
          this.bindingObservers.delete(token);
          return true;
        }
        return false;
      }
    }
    DesignTokenNode.cssCustomPropertyReflector = new CustomPropertyReflector();
    __decorate$1([
      observable
    ], DesignTokenNode.prototype, "children", void 0);
    function create$1(nameOrConfig) {
      return DesignTokenImpl.from(nameOrConfig);
    }
    const DesignToken = Object.freeze({
      create: create$1,
      /**
       * Informs DesignToken that an HTMLElement for which tokens have
       * been set has been connected to the document.
       *
       * The browser does not provide a reliable mechanism to observe an HTMLElement's connectedness
       * in all scenarios, so invoking this method manually is necessary when:
       *
       * 1. Token values are set for an HTMLElement.
       * 2. The HTMLElement does not inherit from FASTElement.
       * 3. The HTMLElement is not connected to the document when token values are set.
       *
       * @param element - The element to notify
       * @returns - true if notification was successful, otherwise false.
       */
      notifyConnection(element) {
        if (!element.isConnected || !DesignTokenNode.existsFor(element)) {
          return false;
        }
        DesignTokenNode.getOrCreate(element).bind();
        return true;
      },
      /**
       * Informs DesignToken that an HTMLElement for which tokens have
       * been set has been disconnected to the document.
       *
       * The browser does not provide a reliable mechanism to observe an HTMLElement's connectedness
       * in all scenarios, so invoking this method manually is necessary when:
       *
       * 1. Token values are set for an HTMLElement.
       * 2. The HTMLElement does not inherit from FASTElement.
       *
       * @param element - The element to notify
       * @returns - true if notification was successful, otherwise false.
       */
      notifyDisconnection(element) {
        if (element.isConnected || !DesignTokenNode.existsFor(element)) {
          return false;
        }
        DesignTokenNode.getOrCreate(element).unbind();
        return true;
      },
      /**
       * Registers and element or document as a DesignToken root.
       * {@link CSSDesignToken | CSSDesignTokens} with default values assigned via
       * {@link (DesignToken:interface).withDefault} will emit CSS custom properties to all
       * registered roots.
       * @param target - The root to register
       */
      registerRoot(target = defaultElement) {
        RootStyleSheetTarget.registerRoot(target);
      },
      /**
       * Unregister an element or document as a DesignToken root.
       * @param target - The root to deregister
       */
      unregisterRoot(target = defaultElement) {
        RootStyleSheetTarget.unregisterRoot(target);
      }
    });
    const ElementDisambiguation = Object.freeze({
      /**
       * Skip defining the element but still call the provided callback passed
       * to DesignSystemRegistrationContext.tryDefineElement
       */
      definitionCallbackOnly: null,
      /**
       * Ignore the duplicate element entirely.
       */
      ignoreDuplicate: Symbol()
    });
    const elementTypesByTag = /* @__PURE__ */ new Map();
    const elementTagsByType = /* @__PURE__ */ new Map();
    let rootDesignSystem = null;
    const designSystemKey = DI.createInterface((x2) => x2.cachedCallback((handler) => {
      if (rootDesignSystem === null) {
        rootDesignSystem = new DefaultDesignSystem(null, handler);
      }
      return rootDesignSystem;
    }));
    const DesignSystem = Object.freeze({
      /**
       * Returns the HTML element name that the type is defined as.
       * @param type - The type to lookup.
       * @public
       */
      tagFor(type) {
        return elementTagsByType.get(type);
      },
      /**
       * Searches the DOM hierarchy for the design system that is responsible
       * for the provided element.
       * @param element - The element to locate the design system for.
       * @returns The located design system.
       * @public
       */
      responsibleFor(element) {
        const owned = element.$$designSystem$$;
        if (owned) {
          return owned;
        }
        const container2 = DI.findResponsibleContainer(element);
        return container2.get(designSystemKey);
      },
      /**
       * Gets the DesignSystem if one is explicitly defined on the provided element;
       * otherwise creates a design system defined directly on the element.
       * @param element - The element to get or create a design system for.
       * @returns The design system.
       * @public
       */
      getOrCreate(node) {
        if (!node) {
          if (rootDesignSystem === null) {
            rootDesignSystem = DI.getOrCreateDOMContainer().get(designSystemKey);
          }
          return rootDesignSystem;
        }
        const owned = node.$$designSystem$$;
        if (owned) {
          return owned;
        }
        const container2 = DI.getOrCreateDOMContainer(node);
        if (container2.has(designSystemKey, false)) {
          return container2.get(designSystemKey);
        } else {
          const system = new DefaultDesignSystem(node, container2);
          container2.register(Registration.instance(designSystemKey, system));
          return system;
        }
      }
    });
    function extractTryDefineElementParams(params, elementDefinitionType, elementDefinitionCallback) {
      if (typeof params === "string") {
        return {
          name: params,
          type: elementDefinitionType,
          callback: elementDefinitionCallback
        };
      } else {
        return params;
      }
    }
    class DefaultDesignSystem {
      constructor(owner, container2) {
        this.owner = owner;
        this.container = container2;
        this.designTokensInitialized = false;
        this.prefix = "fast";
        this.shadowRootMode = void 0;
        this.disambiguate = () => ElementDisambiguation.definitionCallbackOnly;
        if (owner !== null) {
          owner.$$designSystem$$ = this;
        }
      }
      withPrefix(prefix) {
        this.prefix = prefix;
        return this;
      }
      withShadowRootMode(mode) {
        this.shadowRootMode = mode;
        return this;
      }
      withElementDisambiguation(callback) {
        this.disambiguate = callback;
        return this;
      }
      withDesignTokenRoot(root2) {
        this.designTokenRoot = root2;
        return this;
      }
      register(...registrations) {
        const container2 = this.container;
        const elementDefinitionEntries = [];
        const disambiguate = this.disambiguate;
        const shadowRootMode = this.shadowRootMode;
        const context = {
          elementPrefix: this.prefix,
          tryDefineElement(params, elementDefinitionType, elementDefinitionCallback) {
            const extractedParams = extractTryDefineElementParams(params, elementDefinitionType, elementDefinitionCallback);
            const { name, callback, baseClass } = extractedParams;
            let { type } = extractedParams;
            let elementName = name;
            let typeFoundByName = elementTypesByTag.get(elementName);
            let needsDefine = true;
            while (typeFoundByName) {
              const result = disambiguate(elementName, type, typeFoundByName);
              switch (result) {
                case ElementDisambiguation.ignoreDuplicate:
                  return;
                case ElementDisambiguation.definitionCallbackOnly:
                  needsDefine = false;
                  typeFoundByName = void 0;
                  break;
                default:
                  elementName = result;
                  typeFoundByName = elementTypesByTag.get(elementName);
                  break;
              }
            }
            if (needsDefine) {
              if (elementTagsByType.has(type) || type === FoundationElement) {
                type = class extends type {
                };
              }
              elementTypesByTag.set(elementName, type);
              elementTagsByType.set(type, elementName);
              if (baseClass) {
                elementTagsByType.set(baseClass, elementName);
              }
            }
            elementDefinitionEntries.push(new ElementDefinitionEntry(container2, elementName, type, shadowRootMode, callback, needsDefine));
          }
        };
        if (!this.designTokensInitialized) {
          this.designTokensInitialized = true;
          if (this.designTokenRoot !== null) {
            DesignToken.registerRoot(this.designTokenRoot);
          }
        }
        container2.registerWithContext(context, ...registrations);
        for (const entry of elementDefinitionEntries) {
          entry.callback(entry);
          if (entry.willDefine && entry.definition !== null) {
            entry.definition.define();
          }
        }
        return this;
      }
    }
    class ElementDefinitionEntry {
      constructor(container2, name, type, shadowRootMode, callback, willDefine) {
        this.container = container2;
        this.name = name;
        this.type = type;
        this.shadowRootMode = shadowRootMode;
        this.callback = callback;
        this.willDefine = willDefine;
        this.definition = null;
      }
      definePresentation(presentation) {
        ComponentPresentation.define(this.name, presentation, this.container);
      }
      defineElement(definition) {
        this.definition = new FASTElementDefinition(this.type, Object.assign(Object.assign({}, definition), { name: this.name }));
      }
      tagFor(type) {
        return DesignSystem.tagFor(type);
      }
    }
    const dividerTemplate = (context, definition) => html`
    <template role="${(x2) => x2.role}" aria-orientation="${(x2) => x2.orientation}"></template>
`;
    const DividerRole = {
      /**
       * The divider semantically separates content
       */
      separator: "separator",
      /**
       * The divider has no semantic value and is for visual presentation only.
       */
      presentation: "presentation"
    };
    let Divider$1 = class Divider extends FoundationElement {
      constructor() {
        super(...arguments);
        this.role = DividerRole.separator;
        this.orientation = Orientation.horizontal;
      }
    };
    __decorate$1([
      attr
    ], Divider$1.prototype, "role", void 0);
    __decorate$1([
      attr
    ], Divider$1.prototype, "orientation", void 0);
    const listboxOptionTemplate = (context, definition) => html`
    <template
        aria-checked="${(x2) => x2.ariaChecked}"
        aria-disabled="${(x2) => x2.ariaDisabled}"
        aria-posinset="${(x2) => x2.ariaPosInSet}"
        aria-selected="${(x2) => x2.ariaSelected}"
        aria-setsize="${(x2) => x2.ariaSetSize}"
        class="${(x2) => [x2.checked && "checked", x2.selected && "selected", x2.disabled && "disabled"].filter(Boolean).join(" ")}"
        role="option"
    >
        ${startSlotTemplate(context, definition)}
        <span class="content" part="content">
            <slot ${slotted("content")}></slot>
        </span>
        ${endSlotTemplate(context, definition)}
    </template>
`;
    class ListboxElement extends Listbox {
      constructor() {
        super(...arguments);
        this.activeIndex = -1;
        this.rangeStartIndex = -1;
      }
      /**
       * Returns the last checked option.
       *
       * @internal
       */
      get activeOption() {
        return this.options[this.activeIndex];
      }
      /**
       * Returns the list of checked options.
       *
       * @internal
       */
      get checkedOptions() {
        var _a;
        return (_a = this.options) === null || _a === void 0 ? void 0 : _a.filter((o) => o.checked);
      }
      /**
       * Returns the index of the first selected option.
       *
       * @internal
       */
      get firstSelectedOptionIndex() {
        return this.options.indexOf(this.firstSelectedOption);
      }
      /**
       * Updates the `ariaActiveDescendant` property when the active index changes.
       *
       * @param prev - the previous active index
       * @param next - the next active index
       *
       * @internal
       */
      activeIndexChanged(prev, next) {
        var _a, _b;
        this.ariaActiveDescendant = (_b = (_a = this.options[next]) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : "";
        this.focusAndScrollOptionIntoView();
      }
      /**
       * Toggles the checked state for the currently active option.
       *
       * @remarks
       * Multiple-selection mode only.
       *
       * @internal
       */
      checkActiveIndex() {
        if (!this.multiple) {
          return;
        }
        const activeItem = this.activeOption;
        if (activeItem) {
          activeItem.checked = true;
        }
      }
      /**
       * Sets the active index to the first option and marks it as checked.
       *
       * @remarks
       * Multi-selection mode only.
       *
       * @param preserveChecked - mark all options unchecked before changing the active index
       *
       * @internal
       */
      checkFirstOption(preserveChecked = false) {
        if (preserveChecked) {
          if (this.rangeStartIndex === -1) {
            this.rangeStartIndex = this.activeIndex + 1;
          }
          this.options.forEach((o, i) => {
            o.checked = inRange(i, this.rangeStartIndex);
          });
        } else {
          this.uncheckAllOptions();
        }
        this.activeIndex = 0;
        this.checkActiveIndex();
      }
      /**
       * Decrements the active index and sets the matching option as checked.
       *
       * @remarks
       * Multi-selection mode only.
       *
       * @param preserveChecked - mark all options unchecked before changing the active index
       *
       * @internal
       */
      checkLastOption(preserveChecked = false) {
        if (preserveChecked) {
          if (this.rangeStartIndex === -1) {
            this.rangeStartIndex = this.activeIndex;
          }
          this.options.forEach((o, i) => {
            o.checked = inRange(i, this.rangeStartIndex, this.options.length);
          });
        } else {
          this.uncheckAllOptions();
        }
        this.activeIndex = this.options.length - 1;
        this.checkActiveIndex();
      }
      /**
       * @override
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        this.addEventListener("focusout", this.focusoutHandler);
      }
      /**
       * @override
       * @internal
       */
      disconnectedCallback() {
        this.removeEventListener("focusout", this.focusoutHandler);
        super.disconnectedCallback();
      }
      /**
       * Increments the active index and marks the matching option as checked.
       *
       * @remarks
       * Multiple-selection mode only.
       *
       * @param preserveChecked - mark all options unchecked before changing the active index
       *
       * @internal
       */
      checkNextOption(preserveChecked = false) {
        if (preserveChecked) {
          if (this.rangeStartIndex === -1) {
            this.rangeStartIndex = this.activeIndex;
          }
          this.options.forEach((o, i) => {
            o.checked = inRange(i, this.rangeStartIndex, this.activeIndex + 1);
          });
        } else {
          this.uncheckAllOptions();
        }
        this.activeIndex += this.activeIndex < this.options.length - 1 ? 1 : 0;
        this.checkActiveIndex();
      }
      /**
       * Decrements the active index and marks the matching option as checked.
       *
       * @remarks
       * Multiple-selection mode only.
       *
       * @param preserveChecked - mark all options unchecked before changing the active index
       *
       * @internal
       */
      checkPreviousOption(preserveChecked = false) {
        if (preserveChecked) {
          if (this.rangeStartIndex === -1) {
            this.rangeStartIndex = this.activeIndex;
          }
          if (this.checkedOptions.length === 1) {
            this.rangeStartIndex += 1;
          }
          this.options.forEach((o, i) => {
            o.checked = inRange(i, this.activeIndex, this.rangeStartIndex);
          });
        } else {
          this.uncheckAllOptions();
        }
        this.activeIndex -= this.activeIndex > 0 ? 1 : 0;
        this.checkActiveIndex();
      }
      /**
       * Handles click events for listbox options.
       *
       * @param e - the event object
       *
       * @override
       * @internal
       */
      clickHandler(e2) {
        var _a;
        if (!this.multiple) {
          return super.clickHandler(e2);
        }
        const captured = (_a = e2.target) === null || _a === void 0 ? void 0 : _a.closest(`[role=option]`);
        if (!captured || captured.disabled) {
          return;
        }
        this.uncheckAllOptions();
        this.activeIndex = this.options.indexOf(captured);
        this.checkActiveIndex();
        this.toggleSelectedForAllCheckedOptions();
        return true;
      }
      /**
       * @override
       * @internal
       */
      focusAndScrollOptionIntoView() {
        super.focusAndScrollOptionIntoView(this.activeOption);
      }
      /**
       * In multiple-selection mode:
       * If any options are selected, the first selected option is checked when
       * the listbox receives focus. If no options are selected, the first
       * selectable option is checked.
       *
       * @override
       * @internal
       */
      focusinHandler(e2) {
        if (!this.multiple) {
          return super.focusinHandler(e2);
        }
        if (!this.shouldSkipFocus && e2.target === e2.currentTarget) {
          this.uncheckAllOptions();
          if (this.activeIndex === -1) {
            this.activeIndex = this.firstSelectedOptionIndex !== -1 ? this.firstSelectedOptionIndex : 0;
          }
          this.checkActiveIndex();
          this.setSelectedOptions();
          this.focusAndScrollOptionIntoView();
        }
        this.shouldSkipFocus = false;
      }
      /**
       * Unchecks all options when the listbox loses focus.
       *
       * @internal
       */
      focusoutHandler(e2) {
        if (this.multiple) {
          this.uncheckAllOptions();
        }
      }
      /**
       * Handles keydown actions for listbox navigation and typeahead
       *
       * @override
       * @internal
       */
      keydownHandler(e2) {
        if (!this.multiple) {
          return super.keydownHandler(e2);
        }
        if (this.disabled) {
          return true;
        }
        const { key, shiftKey } = e2;
        this.shouldSkipFocus = false;
        switch (key) {
          case keyHome: {
            this.checkFirstOption(shiftKey);
            return;
          }
          case keyArrowDown: {
            this.checkNextOption(shiftKey);
            return;
          }
          case keyArrowUp: {
            this.checkPreviousOption(shiftKey);
            return;
          }
          case keyEnd: {
            this.checkLastOption(shiftKey);
            return;
          }
          case keyTab: {
            this.focusAndScrollOptionIntoView();
            return true;
          }
          case keyEscape: {
            this.uncheckAllOptions();
            this.checkActiveIndex();
            return true;
          }
          case keySpace: {
            e2.preventDefault();
            if (this.typeAheadExpired) {
              this.toggleSelectedForAllCheckedOptions();
              return;
            }
          }
          default: {
            if (key.length === 1) {
              this.handleTypeAhead(`${key}`);
            }
            return true;
          }
        }
      }
      /**
       * Prevents `focusin` events from firing before `click` events when the
       * element is unfocused.
       *
       * @override
       * @internal
       */
      mousedownHandler(e2) {
        if (e2.offsetX >= 0 && e2.offsetX <= this.scrollWidth) {
          return super.mousedownHandler(e2);
        }
      }
      /**
       * Switches between single-selection and multi-selection mode.
       *
       * @internal
       */
      multipleChanged(prev, next) {
        var _a;
        this.ariaMultiSelectable = next ? "true" : null;
        (_a = this.options) === null || _a === void 0 ? void 0 : _a.forEach((o) => {
          o.checked = next ? false : void 0;
        });
        this.setSelectedOptions();
      }
      /**
       * Sets an option as selected and gives it focus.
       *
       * @override
       * @public
       */
      setSelectedOptions() {
        if (!this.multiple) {
          super.setSelectedOptions();
          return;
        }
        if (this.$fastController.isConnected && this.options) {
          this.selectedOptions = this.options.filter((o) => o.selected);
          this.focusAndScrollOptionIntoView();
        }
      }
      /**
       * Ensures the size is a positive integer when the property is updated.
       *
       * @param prev - the previous size value
       * @param next - the current size value
       *
       * @internal
       */
      sizeChanged(prev, next) {
        var _a;
        const size = Math.max(0, parseInt((_a = next === null || next === void 0 ? void 0 : next.toFixed()) !== null && _a !== void 0 ? _a : "", 10));
        if (size !== next) {
          DOM.queueUpdate(() => {
            this.size = size;
          });
        }
      }
      /**
       * Toggles the selected state of the provided options. If any provided items
       * are in an unselected state, all items are set to selected. If every
       * provided item is selected, they are all unselected.
       *
       * @internal
       */
      toggleSelectedForAllCheckedOptions() {
        const enabledCheckedOptions = this.checkedOptions.filter((o) => !o.disabled);
        const force = !enabledCheckedOptions.every((o) => o.selected);
        enabledCheckedOptions.forEach((o) => o.selected = force);
        this.selectedIndex = this.options.indexOf(enabledCheckedOptions[enabledCheckedOptions.length - 1]);
        this.setSelectedOptions();
      }
      /**
       * @override
       * @internal
       */
      typeaheadBufferChanged(prev, next) {
        if (!this.multiple) {
          super.typeaheadBufferChanged(prev, next);
          return;
        }
        if (this.$fastController.isConnected) {
          const typeaheadMatches = this.getTypeaheadMatches();
          const activeIndex = this.options.indexOf(typeaheadMatches[0]);
          if (activeIndex > -1) {
            this.activeIndex = activeIndex;
            this.uncheckAllOptions();
            this.checkActiveIndex();
          }
          this.typeAheadExpired = false;
        }
      }
      /**
       * Unchecks all options.
       *
       * @remarks
       * Multiple-selection mode only.
       *
       * @param preserveChecked - reset the rangeStartIndex
       *
       * @internal
       */
      uncheckAllOptions(preserveChecked = false) {
        this.options.forEach((o) => o.checked = this.multiple ? false : void 0);
        if (!preserveChecked) {
          this.rangeStartIndex = -1;
        }
      }
    }
    __decorate$1([
      observable
    ], ListboxElement.prototype, "activeIndex", void 0);
    __decorate$1([
      attr({ mode: "boolean" })
    ], ListboxElement.prototype, "multiple", void 0);
    __decorate$1([
      attr({ converter: nullableNumberConverter })
    ], ListboxElement.prototype, "size", void 0);
    class _TextField extends FoundationElement {
    }
    class FormAssociatedTextField extends FormAssociated(_TextField) {
      constructor() {
        super(...arguments);
        this.proxy = document.createElement("input");
      }
    }
    const TextFieldType = {
      /**
       * An email TextField
       */
      email: "email",
      /**
       * A password TextField
       */
      password: "password",
      /**
       * A telephone TextField
       */
      tel: "tel",
      /**
       * A text TextField
       */
      text: "text",
      /**
       * A URL TextField
       */
      url: "url"
    };
    let TextField$1 = class TextField extends FormAssociatedTextField {
      constructor() {
        super(...arguments);
        this.type = TextFieldType.text;
      }
      readOnlyChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.readOnly = this.readOnly;
          this.validate();
        }
      }
      autofocusChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.autofocus = this.autofocus;
          this.validate();
        }
      }
      placeholderChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.placeholder = this.placeholder;
        }
      }
      typeChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.type = this.type;
          this.validate();
        }
      }
      listChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.setAttribute("list", this.list);
          this.validate();
        }
      }
      maxlengthChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.maxLength = this.maxlength;
          this.validate();
        }
      }
      minlengthChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.minLength = this.minlength;
          this.validate();
        }
      }
      patternChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.pattern = this.pattern;
          this.validate();
        }
      }
      sizeChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.size = this.size;
        }
      }
      spellcheckChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.spellcheck = this.spellcheck;
        }
      }
      /**
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        this.proxy.setAttribute("type", this.type);
        this.validate();
        if (this.autofocus) {
          DOM.queueUpdate(() => {
            this.focus();
          });
        }
      }
      /**
       * Selects all the text in the text field
       *
       * @public
       */
      select() {
        this.control.select();
        this.$emit("select");
      }
      /**
       * Handles the internal control's `input` event
       * @internal
       */
      handleTextInput() {
        this.value = this.control.value;
      }
      /**
       * Change event handler for inner control.
       * @remarks
       * "Change" events are not `composable` so they will not
       * permeate the shadow DOM boundary. This fn effectively proxies
       * the change event, emitting a `change` event whenever the internal
       * control emits a `change` event
       * @internal
       */
      handleChange() {
        this.$emit("change");
      }
      /** {@inheritDoc (FormAssociated:interface).validate} */
      validate() {
        super.validate(this.control);
      }
    };
    __decorate$1([
      attr({ attribute: "readonly", mode: "boolean" })
    ], TextField$1.prototype, "readOnly", void 0);
    __decorate$1([
      attr({ mode: "boolean" })
    ], TextField$1.prototype, "autofocus", void 0);
    __decorate$1([
      attr
    ], TextField$1.prototype, "placeholder", void 0);
    __decorate$1([
      attr
    ], TextField$1.prototype, "type", void 0);
    __decorate$1([
      attr
    ], TextField$1.prototype, "list", void 0);
    __decorate$1([
      attr({ converter: nullableNumberConverter })
    ], TextField$1.prototype, "maxlength", void 0);
    __decorate$1([
      attr({ converter: nullableNumberConverter })
    ], TextField$1.prototype, "minlength", void 0);
    __decorate$1([
      attr
    ], TextField$1.prototype, "pattern", void 0);
    __decorate$1([
      attr({ converter: nullableNumberConverter })
    ], TextField$1.prototype, "size", void 0);
    __decorate$1([
      attr({ mode: "boolean" })
    ], TextField$1.prototype, "spellcheck", void 0);
    __decorate$1([
      observable
    ], TextField$1.prototype, "defaultSlottedNodes", void 0);
    class DelegatesARIATextbox {
    }
    applyMixins(DelegatesARIATextbox, ARIAGlobalStatesAndProperties);
    applyMixins(TextField$1, StartEnd, DelegatesARIATextbox);
    const progressSegments = 44;
    const progressRingTemplate = (context, definition) => html`
    <template
        role="progressbar"
        aria-valuenow="${(x2) => x2.value}"
        aria-valuemin="${(x2) => x2.min}"
        aria-valuemax="${(x2) => x2.max}"
        class="${(x2) => x2.paused ? "paused" : ""}"
    >
        ${when((x2) => typeof x2.value === "number", html`
                <svg
                    class="progress"
                    part="progress"
                    viewBox="0 0 16 16"
                    slot="determinate"
                >
                    <circle
                        class="background"
                        part="background"
                        cx="8px"
                        cy="8px"
                        r="7px"
                    ></circle>
                    <circle
                        class="determinate"
                        part="determinate"
                        style="stroke-dasharray: ${(x2) => progressSegments * x2.percentComplete / 100}px ${progressSegments}px"
                        cx="8px"
                        cy="8px"
                        r="7px"
                    ></circle>
                </svg>
            `, html`
                <slot name="indeterminate" slot="indeterminate">
                    ${definition.indeterminateIndicator || ""}
                </slot>
            `)}
    </template>
`;
    class BaseProgress extends FoundationElement {
      constructor() {
        super(...arguments);
        this.percentComplete = 0;
      }
      valueChanged() {
        if (this.$fastController.isConnected) {
          this.updatePercentComplete();
        }
      }
      minChanged() {
        if (this.$fastController.isConnected) {
          this.updatePercentComplete();
        }
      }
      maxChanged() {
        if (this.$fastController.isConnected) {
          this.updatePercentComplete();
        }
      }
      /**
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        this.updatePercentComplete();
      }
      updatePercentComplete() {
        const min2 = typeof this.min === "number" ? this.min : 0;
        const max2 = typeof this.max === "number" ? this.max : 100;
        const value = typeof this.value === "number" ? this.value : 0;
        const range2 = max2 - min2;
        this.percentComplete = range2 === 0 ? 0 : Math.fround((value - min2) / range2 * 100);
      }
    }
    __decorate$1([
      attr({ converter: nullableNumberConverter })
    ], BaseProgress.prototype, "value", void 0);
    __decorate$1([
      attr({ converter: nullableNumberConverter })
    ], BaseProgress.prototype, "min", void 0);
    __decorate$1([
      attr({ converter: nullableNumberConverter })
    ], BaseProgress.prototype, "max", void 0);
    __decorate$1([
      attr({ mode: "boolean" })
    ], BaseProgress.prototype, "paused", void 0);
    __decorate$1([
      observable
    ], BaseProgress.prototype, "percentComplete", void 0);
    const radioGroupTemplate = (context, definition) => html`
    <template
        role="radiogroup"
        aria-disabled="${(x2) => x2.disabled}"
        aria-readonly="${(x2) => x2.readOnly}"
        @click="${(x2, c2) => x2.clickHandler(c2.event)}"
        @keydown="${(x2, c2) => x2.keydownHandler(c2.event)}"
        @focusout="${(x2, c2) => x2.focusOutHandler(c2.event)}"
    >
        <slot name="label"></slot>
        <div
            class="positioning-region ${(x2) => x2.orientation === Orientation.horizontal ? "horizontal" : "vertical"}"
            part="positioning-region"
        >
            <slot
                ${slotted({
      property: "slottedRadioButtons",
      filter: elements("[role=radio]")
    })}
            ></slot>
        </div>
    </template>
`;
    let RadioGroup$1 = class RadioGroup extends FoundationElement {
      constructor() {
        super(...arguments);
        this.orientation = Orientation.horizontal;
        this.radioChangeHandler = (e2) => {
          const changedRadio = e2.target;
          if (changedRadio.checked) {
            this.slottedRadioButtons.forEach((radio) => {
              if (radio !== changedRadio) {
                radio.checked = false;
                if (!this.isInsideFoundationToolbar) {
                  radio.setAttribute("tabindex", "-1");
                }
              }
            });
            this.selectedRadio = changedRadio;
            this.value = changedRadio.value;
            changedRadio.setAttribute("tabindex", "0");
            this.focusedRadio = changedRadio;
          }
          e2.stopPropagation();
        };
        this.moveToRadioByIndex = (group, index) => {
          const radio = group[index];
          if (!this.isInsideToolbar) {
            radio.setAttribute("tabindex", "0");
            if (radio.readOnly) {
              this.slottedRadioButtons.forEach((nextRadio) => {
                if (nextRadio !== radio) {
                  nextRadio.setAttribute("tabindex", "-1");
                }
              });
            } else {
              radio.checked = true;
              this.selectedRadio = radio;
            }
          }
          this.focusedRadio = radio;
          radio.focus();
        };
        this.moveRightOffGroup = () => {
          var _a;
          (_a = this.nextElementSibling) === null || _a === void 0 ? void 0 : _a.focus();
        };
        this.moveLeftOffGroup = () => {
          var _a;
          (_a = this.previousElementSibling) === null || _a === void 0 ? void 0 : _a.focus();
        };
        this.focusOutHandler = (e2) => {
          const group = this.slottedRadioButtons;
          const radio = e2.target;
          const index = radio !== null ? group.indexOf(radio) : 0;
          const focusedIndex = this.focusedRadio ? group.indexOf(this.focusedRadio) : -1;
          if (focusedIndex === 0 && index === focusedIndex || focusedIndex === group.length - 1 && focusedIndex === index) {
            if (!this.selectedRadio) {
              this.focusedRadio = group[0];
              this.focusedRadio.setAttribute("tabindex", "0");
              group.forEach((nextRadio) => {
                if (nextRadio !== this.focusedRadio) {
                  nextRadio.setAttribute("tabindex", "-1");
                }
              });
            } else {
              this.focusedRadio = this.selectedRadio;
              if (!this.isInsideFoundationToolbar) {
                this.selectedRadio.setAttribute("tabindex", "0");
                group.forEach((nextRadio) => {
                  if (nextRadio !== this.selectedRadio) {
                    nextRadio.setAttribute("tabindex", "-1");
                  }
                });
              }
            }
          }
          return true;
        };
        this.clickHandler = (e2) => {
          const radio = e2.target;
          if (radio) {
            const group = this.slottedRadioButtons;
            if (radio.checked || group.indexOf(radio) === 0) {
              radio.setAttribute("tabindex", "0");
              this.selectedRadio = radio;
            } else {
              radio.setAttribute("tabindex", "-1");
              this.selectedRadio = null;
            }
            this.focusedRadio = radio;
          }
          e2.preventDefault();
        };
        this.shouldMoveOffGroupToTheRight = (index, group, key) => {
          return index === group.length && this.isInsideToolbar && key === keyArrowRight;
        };
        this.shouldMoveOffGroupToTheLeft = (group, key) => {
          const index = this.focusedRadio ? group.indexOf(this.focusedRadio) - 1 : 0;
          return index < 0 && this.isInsideToolbar && key === keyArrowLeft;
        };
        this.checkFocusedRadio = () => {
          if (this.focusedRadio !== null && !this.focusedRadio.readOnly && !this.focusedRadio.checked) {
            this.focusedRadio.checked = true;
            this.focusedRadio.setAttribute("tabindex", "0");
            this.focusedRadio.focus();
            this.selectedRadio = this.focusedRadio;
          }
        };
        this.moveRight = (e2) => {
          const group = this.slottedRadioButtons;
          let index = 0;
          index = this.focusedRadio ? group.indexOf(this.focusedRadio) + 1 : 1;
          if (this.shouldMoveOffGroupToTheRight(index, group, e2.key)) {
            this.moveRightOffGroup();
            return;
          } else if (index === group.length) {
            index = 0;
          }
          while (index < group.length && group.length > 1) {
            if (!group[index].disabled) {
              this.moveToRadioByIndex(group, index);
              break;
            } else if (this.focusedRadio && index === group.indexOf(this.focusedRadio)) {
              break;
            } else if (index + 1 >= group.length) {
              if (this.isInsideToolbar) {
                break;
              } else {
                index = 0;
              }
            } else {
              index += 1;
            }
          }
        };
        this.moveLeft = (e2) => {
          const group = this.slottedRadioButtons;
          let index = 0;
          index = this.focusedRadio ? group.indexOf(this.focusedRadio) - 1 : 0;
          index = index < 0 ? group.length - 1 : index;
          if (this.shouldMoveOffGroupToTheLeft(group, e2.key)) {
            this.moveLeftOffGroup();
            return;
          }
          while (index >= 0 && group.length > 1) {
            if (!group[index].disabled) {
              this.moveToRadioByIndex(group, index);
              break;
            } else if (this.focusedRadio && index === group.indexOf(this.focusedRadio)) {
              break;
            } else if (index - 1 < 0) {
              index = group.length - 1;
            } else {
              index -= 1;
            }
          }
        };
        this.keydownHandler = (e2) => {
          const key = e2.key;
          if (key in ArrowKeys && this.isInsideFoundationToolbar) {
            return true;
          }
          switch (key) {
            case keyEnter: {
              this.checkFocusedRadio();
              break;
            }
            case keyArrowRight:
            case keyArrowDown: {
              if (this.direction === Direction.ltr) {
                this.moveRight(e2);
              } else {
                this.moveLeft(e2);
              }
              break;
            }
            case keyArrowLeft:
            case keyArrowUp: {
              if (this.direction === Direction.ltr) {
                this.moveLeft(e2);
              } else {
                this.moveRight(e2);
              }
              break;
            }
            default: {
              return true;
            }
          }
        };
      }
      readOnlyChanged() {
        if (this.slottedRadioButtons !== void 0) {
          this.slottedRadioButtons.forEach((radio) => {
            if (this.readOnly) {
              radio.readOnly = true;
            } else {
              radio.readOnly = false;
            }
          });
        }
      }
      disabledChanged() {
        if (this.slottedRadioButtons !== void 0) {
          this.slottedRadioButtons.forEach((radio) => {
            if (this.disabled) {
              radio.disabled = true;
            } else {
              radio.disabled = false;
            }
          });
        }
      }
      nameChanged() {
        if (this.slottedRadioButtons) {
          this.slottedRadioButtons.forEach((radio) => {
            radio.setAttribute("name", this.name);
          });
        }
      }
      valueChanged() {
        if (this.slottedRadioButtons) {
          this.slottedRadioButtons.forEach((radio) => {
            if (radio.value === this.value) {
              radio.checked = true;
              this.selectedRadio = radio;
            }
          });
        }
        this.$emit("change");
      }
      slottedRadioButtonsChanged(oldValue, newValue) {
        if (this.slottedRadioButtons && this.slottedRadioButtons.length > 0) {
          this.setupRadioButtons();
        }
      }
      get parentToolbar() {
        return this.closest('[role="toolbar"]');
      }
      get isInsideToolbar() {
        var _a;
        return (_a = this.parentToolbar) !== null && _a !== void 0 ? _a : false;
      }
      get isInsideFoundationToolbar() {
        var _a;
        return !!((_a = this.parentToolbar) === null || _a === void 0 ? void 0 : _a["$fastController"]);
      }
      /**
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        this.direction = getDirection(this);
        this.setupRadioButtons();
      }
      disconnectedCallback() {
        this.slottedRadioButtons.forEach((radio) => {
          radio.removeEventListener("change", this.radioChangeHandler);
        });
      }
      setupRadioButtons() {
        const checkedRadios = this.slottedRadioButtons.filter((radio) => {
          return radio.hasAttribute("checked");
        });
        const numberOfCheckedRadios = checkedRadios ? checkedRadios.length : 0;
        if (numberOfCheckedRadios > 1) {
          const lastCheckedRadio = checkedRadios[numberOfCheckedRadios - 1];
          lastCheckedRadio.checked = true;
        }
        let foundMatchingVal = false;
        this.slottedRadioButtons.forEach((radio) => {
          if (this.name !== void 0) {
            radio.setAttribute("name", this.name);
          }
          if (this.disabled) {
            radio.disabled = true;
          }
          if (this.readOnly) {
            radio.readOnly = true;
          }
          if (this.value && this.value === radio.value) {
            this.selectedRadio = radio;
            this.focusedRadio = radio;
            radio.checked = true;
            radio.setAttribute("tabindex", "0");
            foundMatchingVal = true;
          } else {
            if (!this.isInsideFoundationToolbar) {
              radio.setAttribute("tabindex", "-1");
            }
            radio.checked = false;
          }
          radio.addEventListener("change", this.radioChangeHandler);
        });
        if (this.value === void 0 && this.slottedRadioButtons.length > 0) {
          const checkedRadios2 = this.slottedRadioButtons.filter((radio) => {
            return radio.hasAttribute("checked");
          });
          const numberOfCheckedRadios2 = checkedRadios2 !== null ? checkedRadios2.length : 0;
          if (numberOfCheckedRadios2 > 0 && !foundMatchingVal) {
            const lastCheckedRadio = checkedRadios2[numberOfCheckedRadios2 - 1];
            lastCheckedRadio.checked = true;
            this.focusedRadio = lastCheckedRadio;
            lastCheckedRadio.setAttribute("tabindex", "0");
          } else {
            this.slottedRadioButtons[0].setAttribute("tabindex", "0");
            this.focusedRadio = this.slottedRadioButtons[0];
          }
        }
      }
    };
    __decorate$1([
      attr({ attribute: "readonly", mode: "boolean" })
    ], RadioGroup$1.prototype, "readOnly", void 0);
    __decorate$1([
      attr({ attribute: "disabled", mode: "boolean" })
    ], RadioGroup$1.prototype, "disabled", void 0);
    __decorate$1([
      attr
    ], RadioGroup$1.prototype, "name", void 0);
    __decorate$1([
      attr
    ], RadioGroup$1.prototype, "value", void 0);
    __decorate$1([
      attr
    ], RadioGroup$1.prototype, "orientation", void 0);
    __decorate$1([
      observable
    ], RadioGroup$1.prototype, "childItems", void 0);
    __decorate$1([
      observable
    ], RadioGroup$1.prototype, "slottedRadioButtons", void 0);
    const radioTemplate = (context, definition) => html`
    <template
        role="radio"
        class="${(x2) => x2.checked ? "checked" : ""} ${(x2) => x2.readOnly ? "readonly" : ""}"
        aria-checked="${(x2) => x2.checked}"
        aria-required="${(x2) => x2.required}"
        aria-disabled="${(x2) => x2.disabled}"
        aria-readonly="${(x2) => x2.readOnly}"
        @keypress="${(x2, c2) => x2.keypressHandler(c2.event)}"
        @click="${(x2, c2) => x2.clickHandler(c2.event)}"
    >
        <div part="control" class="control">
            <slot name="checked-indicator">
                ${definition.checkedIndicator || ""}
            </slot>
        </div>
        <label
            part="label"
            class="${(x2) => x2.defaultSlottedNodes && x2.defaultSlottedNodes.length ? "label" : "label label__hidden"}"
        >
            <slot ${slotted("defaultSlottedNodes")}></slot>
        </label>
    </template>
`;
    class _Radio extends FoundationElement {
    }
    class FormAssociatedRadio extends CheckableFormAssociated(_Radio) {
      constructor() {
        super(...arguments);
        this.proxy = document.createElement("input");
      }
    }
    let Radio$1 = class Radio extends FormAssociatedRadio {
      constructor() {
        super();
        this.initialValue = "on";
        this.keypressHandler = (e2) => {
          switch (e2.key) {
            case keySpace:
              if (!this.checked && !this.readOnly) {
                this.checked = true;
              }
              return;
          }
          return true;
        };
        this.proxy.setAttribute("type", "radio");
      }
      readOnlyChanged() {
        if (this.proxy instanceof HTMLInputElement) {
          this.proxy.readOnly = this.readOnly;
        }
      }
      /**
       * @internal
       */
      defaultCheckedChanged() {
        var _a;
        if (this.$fastController.isConnected && !this.dirtyChecked) {
          if (!this.isInsideRadioGroup()) {
            this.checked = (_a = this.defaultChecked) !== null && _a !== void 0 ? _a : false;
            this.dirtyChecked = false;
          }
        }
      }
      /**
       * @internal
       */
      connectedCallback() {
        var _a, _b;
        super.connectedCallback();
        this.validate();
        if (((_a = this.parentElement) === null || _a === void 0 ? void 0 : _a.getAttribute("role")) !== "radiogroup" && this.getAttribute("tabindex") === null) {
          if (!this.disabled) {
            this.setAttribute("tabindex", "0");
          }
        }
        if (this.checkedAttribute) {
          if (!this.dirtyChecked) {
            if (!this.isInsideRadioGroup()) {
              this.checked = (_b = this.defaultChecked) !== null && _b !== void 0 ? _b : false;
              this.dirtyChecked = false;
            }
          }
        }
      }
      isInsideRadioGroup() {
        const parent = this.closest("[role=radiogroup]");
        return parent !== null;
      }
      /**
       * @internal
       */
      clickHandler(e2) {
        if (!this.disabled && !this.readOnly && !this.checked) {
          this.checked = true;
        }
      }
    };
    __decorate$1([
      attr({ attribute: "readonly", mode: "boolean" })
    ], Radio$1.prototype, "readOnly", void 0);
    __decorate$1([
      observable
    ], Radio$1.prototype, "name", void 0);
    __decorate$1([
      observable
    ], Radio$1.prototype, "defaultSlottedNodes", void 0);
    function whitespaceFilter(value, index, array) {
      return value.nodeType !== Node.TEXT_NODE ? true : typeof value.nodeValue === "string" && !!value.nodeValue.trim().length;
    }
    class _Select extends ListboxElement {
    }
    class FormAssociatedSelect extends FormAssociated(_Select) {
      constructor() {
        super(...arguments);
        this.proxy = document.createElement("select");
      }
    }
    class Select extends FormAssociatedSelect {
      constructor() {
        super(...arguments);
        this.open = false;
        this.forcedPosition = false;
        this.listboxId = uniqueId("listbox-");
        this.maxHeight = 0;
      }
      /**
       * Sets focus and synchronizes ARIA attributes when the open property changes.
       *
       * @param prev - the previous open value
       * @param next - the current open value
       *
       * @internal
       */
      openChanged(prev, next) {
        if (!this.collapsible) {
          return;
        }
        if (this.open) {
          this.ariaControls = this.listboxId;
          this.ariaExpanded = "true";
          this.setPositioning();
          this.focusAndScrollOptionIntoView();
          this.indexWhenOpened = this.selectedIndex;
          DOM.queueUpdate(() => this.focus());
          return;
        }
        this.ariaControls = "";
        this.ariaExpanded = "false";
      }
      /**
       * The component is collapsible when in single-selection mode with no size attribute.
       *
       * @internal
       */
      get collapsible() {
        return !(this.multiple || typeof this.size === "number");
      }
      /**
       * The value property.
       *
       * @public
       */
      get value() {
        Observable.track(this, "value");
        return this._value;
      }
      set value(next) {
        var _a, _b, _c, _d, _e, _f, _g;
        const prev = `${this._value}`;
        if ((_a = this._options) === null || _a === void 0 ? void 0 : _a.length) {
          const selectedIndex = this._options.findIndex((el2) => el2.value === next);
          const prevSelectedValue = (_c = (_b = this._options[this.selectedIndex]) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : null;
          const nextSelectedValue = (_e = (_d = this._options[selectedIndex]) === null || _d === void 0 ? void 0 : _d.value) !== null && _e !== void 0 ? _e : null;
          if (selectedIndex === -1 || prevSelectedValue !== nextSelectedValue) {
            next = "";
            this.selectedIndex = selectedIndex;
          }
          next = (_g = (_f = this.firstSelectedOption) === null || _f === void 0 ? void 0 : _f.value) !== null && _g !== void 0 ? _g : next;
        }
        if (prev !== next) {
          this._value = next;
          super.valueChanged(prev, next);
          Observable.notify(this, "value");
          this.updateDisplayValue();
        }
      }
      /**
       * Sets the value and display value to match the first selected option.
       *
       * @param shouldEmit - if true, the input and change events will be emitted
       *
       * @internal
       */
      updateValue(shouldEmit) {
        var _a, _b;
        if (this.$fastController.isConnected) {
          this.value = (_b = (_a = this.firstSelectedOption) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : "";
        }
        if (shouldEmit) {
          this.$emit("input");
          this.$emit("change", this, {
            bubbles: true,
            composed: void 0
          });
        }
      }
      /**
       * Updates the proxy value when the selected index changes.
       *
       * @param prev - the previous selected index
       * @param next - the next selected index
       *
       * @internal
       */
      selectedIndexChanged(prev, next) {
        super.selectedIndexChanged(prev, next);
        this.updateValue();
      }
      positionChanged(prev, next) {
        this.positionAttribute = next;
        this.setPositioning();
      }
      /**
       * Calculate and apply listbox positioning based on available viewport space.
       *
       * @public
       */
      setPositioning() {
        const currentBox = this.getBoundingClientRect();
        const viewportHeight = window.innerHeight;
        const availableBottom = viewportHeight - currentBox.bottom;
        this.position = this.forcedPosition ? this.positionAttribute : currentBox.top > availableBottom ? SelectPosition.above : SelectPosition.below;
        this.positionAttribute = this.forcedPosition ? this.positionAttribute : this.position;
        this.maxHeight = this.position === SelectPosition.above ? ~~currentBox.top : ~~availableBottom;
      }
      /**
       * The value displayed on the button.
       *
       * @public
       */
      get displayValue() {
        var _a, _b;
        Observable.track(this, "displayValue");
        return (_b = (_a = this.firstSelectedOption) === null || _a === void 0 ? void 0 : _a.text) !== null && _b !== void 0 ? _b : "";
      }
      /**
       * Synchronize the `aria-disabled` property when the `disabled` property changes.
       *
       * @param prev - The previous disabled value
       * @param next - The next disabled value
       *
       * @internal
       */
      disabledChanged(prev, next) {
        if (super.disabledChanged) {
          super.disabledChanged(prev, next);
        }
        this.ariaDisabled = this.disabled ? "true" : "false";
      }
      /**
       * Reset the element to its first selectable option when its parent form is reset.
       *
       * @internal
       */
      formResetCallback() {
        this.setProxyOptions();
        super.setDefaultSelectedOption();
        if (this.selectedIndex === -1) {
          this.selectedIndex = 0;
        }
      }
      /**
       * Handle opening and closing the listbox when the select is clicked.
       *
       * @param e - the mouse event
       * @internal
       */
      clickHandler(e2) {
        if (this.disabled) {
          return;
        }
        if (this.open) {
          const captured = e2.target.closest(`option,[role=option]`);
          if (captured && captured.disabled) {
            return;
          }
        }
        super.clickHandler(e2);
        this.open = this.collapsible && !this.open;
        if (!this.open && this.indexWhenOpened !== this.selectedIndex) {
          this.updateValue(true);
        }
        return true;
      }
      /**
       * Handles focus state when the element or its children lose focus.
       *
       * @param e - The focus event
       * @internal
       */
      focusoutHandler(e2) {
        var _a;
        super.focusoutHandler(e2);
        if (!this.open) {
          return true;
        }
        const focusTarget = e2.relatedTarget;
        if (this.isSameNode(focusTarget)) {
          this.focus();
          return;
        }
        if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.includes(focusTarget))) {
          this.open = false;
          if (this.indexWhenOpened !== this.selectedIndex) {
            this.updateValue(true);
          }
        }
      }
      /**
       * Updates the value when an option's value changes.
       *
       * @param source - the source object
       * @param propertyName - the property to evaluate
       *
       * @internal
       * @override
       */
      handleChange(source, propertyName) {
        super.handleChange(source, propertyName);
        if (propertyName === "value") {
          this.updateValue();
        }
      }
      /**
       * Synchronize the form-associated proxy and updates the value property of the element.
       *
       * @param prev - the previous collection of slotted option elements
       * @param next - the next collection of slotted option elements
       *
       * @internal
       */
      slottedOptionsChanged(prev, next) {
        this.options.forEach((o) => {
          const notifier = Observable.getNotifier(o);
          notifier.unsubscribe(this, "value");
        });
        super.slottedOptionsChanged(prev, next);
        this.options.forEach((o) => {
          const notifier = Observable.getNotifier(o);
          notifier.subscribe(this, "value");
        });
        this.setProxyOptions();
        this.updateValue();
      }
      /**
       * Prevents focus when size is set and a scrollbar is clicked.
       *
       * @param e - the mouse event object
       *
       * @override
       * @internal
       */
      mousedownHandler(e2) {
        var _a;
        if (e2.offsetX >= 0 && e2.offsetX <= ((_a = this.listbox) === null || _a === void 0 ? void 0 : _a.scrollWidth)) {
          return super.mousedownHandler(e2);
        }
        return this.collapsible;
      }
      /**
       * Sets the multiple property on the proxy element.
       *
       * @param prev - the previous multiple value
       * @param next - the current multiple value
       */
      multipleChanged(prev, next) {
        super.multipleChanged(prev, next);
        if (this.proxy) {
          this.proxy.multiple = next;
        }
      }
      /**
       * Updates the selectedness of each option when the list of selected options changes.
       *
       * @param prev - the previous list of selected options
       * @param next - the current list of selected options
       *
       * @override
       * @internal
       */
      selectedOptionsChanged(prev, next) {
        var _a;
        super.selectedOptionsChanged(prev, next);
        (_a = this.options) === null || _a === void 0 ? void 0 : _a.forEach((o, i) => {
          var _a2;
          const proxyOption = (_a2 = this.proxy) === null || _a2 === void 0 ? void 0 : _a2.options.item(i);
          if (proxyOption) {
            proxyOption.selected = o.selected;
          }
        });
      }
      /**
       * Sets the selected index to match the first option with the selected attribute, or
       * the first selectable option.
       *
       * @override
       * @internal
       */
      setDefaultSelectedOption() {
        var _a;
        const options = (_a = this.options) !== null && _a !== void 0 ? _a : Array.from(this.children).filter(Listbox.slottedOptionFilter);
        const selectedIndex = options === null || options === void 0 ? void 0 : options.findIndex((el2) => el2.hasAttribute("selected") || el2.selected || el2.value === this.value);
        if (selectedIndex !== -1) {
          this.selectedIndex = selectedIndex;
          return;
        }
        this.selectedIndex = 0;
      }
      /**
       * Resets and fills the proxy to match the component's options.
       *
       * @internal
       */
      setProxyOptions() {
        if (this.proxy instanceof HTMLSelectElement && this.options) {
          this.proxy.options.length = 0;
          this.options.forEach((option) => {
            const proxyOption = option.proxy || (option instanceof HTMLOptionElement ? option.cloneNode() : null);
            if (proxyOption) {
              this.proxy.options.add(proxyOption);
            }
          });
        }
      }
      /**
       * Handle keyboard interaction for the select.
       *
       * @param e - the keyboard event
       * @internal
       */
      keydownHandler(e2) {
        super.keydownHandler(e2);
        const key = e2.key || e2.key.charCodeAt(0);
        switch (key) {
          case keySpace: {
            e2.preventDefault();
            if (this.collapsible && this.typeAheadExpired) {
              this.open = !this.open;
            }
            break;
          }
          case keyHome:
          case keyEnd: {
            e2.preventDefault();
            break;
          }
          case keyEnter: {
            e2.preventDefault();
            this.open = !this.open;
            break;
          }
          case keyEscape: {
            if (this.collapsible && this.open) {
              e2.preventDefault();
              this.open = false;
            }
            break;
          }
          case keyTab: {
            if (this.collapsible && this.open) {
              e2.preventDefault();
              this.open = false;
            }
            return true;
          }
        }
        if (!this.open && this.indexWhenOpened !== this.selectedIndex) {
          this.updateValue(true);
          this.indexWhenOpened = this.selectedIndex;
        }
        return !(key === keyArrowDown || key === keyArrowUp);
      }
      connectedCallback() {
        super.connectedCallback();
        this.forcedPosition = !!this.positionAttribute;
        this.addEventListener("contentchange", this.updateDisplayValue);
      }
      disconnectedCallback() {
        this.removeEventListener("contentchange", this.updateDisplayValue);
        super.disconnectedCallback();
      }
      /**
       * Updates the proxy's size property when the size attribute changes.
       *
       * @param prev - the previous size
       * @param next - the current size
       *
       * @override
       * @internal
       */
      sizeChanged(prev, next) {
        super.sizeChanged(prev, next);
        if (this.proxy) {
          this.proxy.size = next;
        }
      }
      /**
       *
       * @internal
       */
      updateDisplayValue() {
        if (this.collapsible) {
          Observable.notify(this, "displayValue");
        }
      }
    }
    __decorate$1([
      attr({ attribute: "open", mode: "boolean" })
    ], Select.prototype, "open", void 0);
    __decorate$1([
      volatile
    ], Select.prototype, "collapsible", null);
    __decorate$1([
      observable
    ], Select.prototype, "control", void 0);
    __decorate$1([
      attr({ attribute: "position" })
    ], Select.prototype, "positionAttribute", void 0);
    __decorate$1([
      observable
    ], Select.prototype, "position", void 0);
    __decorate$1([
      observable
    ], Select.prototype, "maxHeight", void 0);
    class DelegatesARIASelect {
    }
    __decorate$1([
      observable
    ], DelegatesARIASelect.prototype, "ariaControls", void 0);
    applyMixins(DelegatesARIASelect, DelegatesARIAListbox);
    applyMixins(Select, StartEnd, DelegatesARIASelect);
    const selectTemplate = (context, definition) => html`
    <template
        class="${(x2) => [
      x2.collapsible && "collapsible",
      x2.collapsible && x2.open && "open",
      x2.disabled && "disabled",
      x2.collapsible && x2.position
    ].filter(Boolean).join(" ")}"
        aria-activedescendant="${(x2) => x2.ariaActiveDescendant}"
        aria-controls="${(x2) => x2.ariaControls}"
        aria-disabled="${(x2) => x2.ariaDisabled}"
        aria-expanded="${(x2) => x2.ariaExpanded}"
        aria-haspopup="${(x2) => x2.collapsible ? "listbox" : null}"
        aria-multiselectable="${(x2) => x2.ariaMultiSelectable}"
        ?open="${(x2) => x2.open}"
        role="combobox"
        tabindex="${(x2) => !x2.disabled ? "0" : null}"
        @click="${(x2, c2) => x2.clickHandler(c2.event)}"
        @focusin="${(x2, c2) => x2.focusinHandler(c2.event)}"
        @focusout="${(x2, c2) => x2.focusoutHandler(c2.event)}"
        @keydown="${(x2, c2) => x2.keydownHandler(c2.event)}"
        @mousedown="${(x2, c2) => x2.mousedownHandler(c2.event)}"
    >
        ${when((x2) => x2.collapsible, html`
                <div
                    class="control"
                    part="control"
                    ?disabled="${(x2) => x2.disabled}"
                    ${ref("control")}
                >
                    ${startSlotTemplate(context, definition)}
                    <slot name="button-container">
                        <div class="selected-value" part="selected-value">
                            <slot name="selected-value">${(x2) => x2.displayValue}</slot>
                        </div>
                        <div aria-hidden="true" class="indicator" part="indicator">
                            <slot name="indicator">
                                ${definition.indicator || ""}
                            </slot>
                        </div>
                    </slot>
                    ${endSlotTemplate(context, definition)}
                </div>
            `)}
        <div
            class="listbox"
            id="${(x2) => x2.listboxId}"
            part="listbox"
            role="listbox"
            ?disabled="${(x2) => x2.disabled}"
            ?hidden="${(x2) => x2.collapsible ? !x2.open : false}"
            ${ref("listbox")}
        >
            <slot
                ${slotted({
      filter: Listbox.slottedOptionFilter,
      flatten: true,
      property: "slottedOptions"
    })}
            ></slot>
        </div>
    </template>
`;
    const tabPanelTemplate = (context, definition) => html`
    <template slot="tabpanel" role="tabpanel">
        <slot></slot>
    </template>
`;
    class TabPanel extends FoundationElement {
    }
    const tabTemplate = (context, definition) => html`
    <template slot="tab" role="tab" aria-disabled="${(x2) => x2.disabled}">
        <slot></slot>
    </template>
`;
    class Tab extends FoundationElement {
    }
    __decorate$1([
      attr({ mode: "boolean" })
    ], Tab.prototype, "disabled", void 0);
    const tabsTemplate = (context, definition) => html`
    <template class="${(x2) => x2.orientation}">
        ${startSlotTemplate(context, definition)}
        <div class="tablist" part="tablist" role="tablist">
            <slot class="tab" name="tab" part="tab" ${slotted("tabs")}></slot>

            ${when((x2) => x2.showActiveIndicator, html`
                    <div
                        ${ref("activeIndicatorRef")}
                        class="activeIndicator"
                        part="activeIndicator"
                    ></div>
                `)}
        </div>
        ${endSlotTemplate(context, definition)}
        <div class="tabpanel" part="tabpanel">
            <slot name="tabpanel" ${slotted("tabpanels")}></slot>
        </div>
    </template>
`;
    const TabsOrientation = {
      vertical: "vertical",
      horizontal: "horizontal"
    };
    class Tabs extends FoundationElement {
      constructor() {
        super(...arguments);
        this.orientation = TabsOrientation.horizontal;
        this.activeindicator = true;
        this.showActiveIndicator = true;
        this.prevActiveTabIndex = 0;
        this.activeTabIndex = 0;
        this.ticking = false;
        this.change = () => {
          this.$emit("change", this.activetab);
        };
        this.isDisabledElement = (el2) => {
          return el2.getAttribute("aria-disabled") === "true";
        };
        this.isHiddenElement = (el2) => {
          return el2.hasAttribute("hidden");
        };
        this.isFocusableElement = (el2) => {
          return !this.isDisabledElement(el2) && !this.isHiddenElement(el2);
        };
        this.setTabs = () => {
          const gridHorizontalProperty = "gridColumn";
          const gridVerticalProperty = "gridRow";
          const gridProperty = this.isHorizontal() ? gridHorizontalProperty : gridVerticalProperty;
          this.activeTabIndex = this.getActiveIndex();
          this.showActiveIndicator = false;
          this.tabs.forEach((tab, index) => {
            if (tab.slot === "tab") {
              const isActiveTab = this.activeTabIndex === index && this.isFocusableElement(tab);
              if (this.activeindicator && this.isFocusableElement(tab)) {
                this.showActiveIndicator = true;
              }
              const tabId = this.tabIds[index];
              const tabpanelId = this.tabpanelIds[index];
              tab.setAttribute("id", tabId);
              tab.setAttribute("aria-selected", isActiveTab ? "true" : "false");
              tab.setAttribute("aria-controls", tabpanelId);
              tab.addEventListener("click", this.handleTabClick);
              tab.addEventListener("keydown", this.handleTabKeyDown);
              tab.setAttribute("tabindex", isActiveTab ? "0" : "-1");
              if (isActiveTab) {
                this.activetab = tab;
                this.activeid = tabId;
              }
            }
            tab.style[gridHorizontalProperty] = "";
            tab.style[gridVerticalProperty] = "";
            tab.style[gridProperty] = `${index + 1}`;
            !this.isHorizontal() ? tab.classList.add("vertical") : tab.classList.remove("vertical");
          });
        };
        this.setTabPanels = () => {
          this.tabpanels.forEach((tabpanel, index) => {
            const tabId = this.tabIds[index];
            const tabpanelId = this.tabpanelIds[index];
            tabpanel.setAttribute("id", tabpanelId);
            tabpanel.setAttribute("aria-labelledby", tabId);
            this.activeTabIndex !== index ? tabpanel.setAttribute("hidden", "") : tabpanel.removeAttribute("hidden");
          });
        };
        this.handleTabClick = (event) => {
          const selectedTab = event.currentTarget;
          if (selectedTab.nodeType === 1 && this.isFocusableElement(selectedTab)) {
            this.prevActiveTabIndex = this.activeTabIndex;
            this.activeTabIndex = this.tabs.indexOf(selectedTab);
            this.setComponent();
          }
        };
        this.handleTabKeyDown = (event) => {
          if (this.isHorizontal()) {
            switch (event.key) {
              case keyArrowLeft:
                event.preventDefault();
                this.adjustBackward(event);
                break;
              case keyArrowRight:
                event.preventDefault();
                this.adjustForward(event);
                break;
            }
          } else {
            switch (event.key) {
              case keyArrowUp:
                event.preventDefault();
                this.adjustBackward(event);
                break;
              case keyArrowDown:
                event.preventDefault();
                this.adjustForward(event);
                break;
            }
          }
          switch (event.key) {
            case keyHome:
              event.preventDefault();
              this.adjust(-this.activeTabIndex);
              break;
            case keyEnd:
              event.preventDefault();
              this.adjust(this.tabs.length - this.activeTabIndex - 1);
              break;
          }
        };
        this.adjustForward = (e2) => {
          const group = this.tabs;
          let index = 0;
          index = this.activetab ? group.indexOf(this.activetab) + 1 : 1;
          if (index === group.length) {
            index = 0;
          }
          while (index < group.length && group.length > 1) {
            if (this.isFocusableElement(group[index])) {
              this.moveToTabByIndex(group, index);
              break;
            } else if (this.activetab && index === group.indexOf(this.activetab)) {
              break;
            } else if (index + 1 >= group.length) {
              index = 0;
            } else {
              index += 1;
            }
          }
        };
        this.adjustBackward = (e2) => {
          const group = this.tabs;
          let index = 0;
          index = this.activetab ? group.indexOf(this.activetab) - 1 : 0;
          index = index < 0 ? group.length - 1 : index;
          while (index >= 0 && group.length > 1) {
            if (this.isFocusableElement(group[index])) {
              this.moveToTabByIndex(group, index);
              break;
            } else if (index - 1 < 0) {
              index = group.length - 1;
            } else {
              index -= 1;
            }
          }
        };
        this.moveToTabByIndex = (group, index) => {
          const tab = group[index];
          this.activetab = tab;
          this.prevActiveTabIndex = this.activeTabIndex;
          this.activeTabIndex = index;
          tab.focus();
          this.setComponent();
        };
      }
      /**
       * @internal
       */
      orientationChanged() {
        if (this.$fastController.isConnected) {
          this.setTabs();
          this.setTabPanels();
          this.handleActiveIndicatorPosition();
        }
      }
      /**
       * @internal
       */
      activeidChanged(oldValue, newValue) {
        if (this.$fastController.isConnected && this.tabs.length <= this.tabpanels.length) {
          this.prevActiveTabIndex = this.tabs.findIndex((item) => item.id === oldValue);
          this.setTabs();
          this.setTabPanels();
          this.handleActiveIndicatorPosition();
        }
      }
      /**
       * @internal
       */
      tabsChanged() {
        if (this.$fastController.isConnected && this.tabs.length <= this.tabpanels.length) {
          this.tabIds = this.getTabIds();
          this.tabpanelIds = this.getTabPanelIds();
          this.setTabs();
          this.setTabPanels();
          this.handleActiveIndicatorPosition();
        }
      }
      /**
       * @internal
       */
      tabpanelsChanged() {
        if (this.$fastController.isConnected && this.tabpanels.length <= this.tabs.length) {
          this.tabIds = this.getTabIds();
          this.tabpanelIds = this.getTabPanelIds();
          this.setTabs();
          this.setTabPanels();
          this.handleActiveIndicatorPosition();
        }
      }
      getActiveIndex() {
        const id2 = this.activeid;
        if (id2 !== void 0) {
          return this.tabIds.indexOf(this.activeid) === -1 ? 0 : this.tabIds.indexOf(this.activeid);
        } else {
          return 0;
        }
      }
      getTabIds() {
        return this.tabs.map((tab) => {
          var _a;
          return (_a = tab.getAttribute("id")) !== null && _a !== void 0 ? _a : `tab-${uniqueId()}`;
        });
      }
      getTabPanelIds() {
        return this.tabpanels.map((tabPanel) => {
          var _a;
          return (_a = tabPanel.getAttribute("id")) !== null && _a !== void 0 ? _a : `panel-${uniqueId()}`;
        });
      }
      setComponent() {
        if (this.activeTabIndex !== this.prevActiveTabIndex) {
          this.activeid = this.tabIds[this.activeTabIndex];
          this.focusTab();
          this.change();
        }
      }
      isHorizontal() {
        return this.orientation === TabsOrientation.horizontal;
      }
      handleActiveIndicatorPosition() {
        if (this.showActiveIndicator && this.activeindicator && this.activeTabIndex !== this.prevActiveTabIndex) {
          if (this.ticking) {
            this.ticking = false;
          } else {
            this.ticking = true;
            this.animateActiveIndicator();
          }
        }
      }
      animateActiveIndicator() {
        this.ticking = true;
        const gridProperty = this.isHorizontal() ? "gridColumn" : "gridRow";
        const translateProperty = this.isHorizontal() ? "translateX" : "translateY";
        const offsetProperty = this.isHorizontal() ? "offsetLeft" : "offsetTop";
        const prev = this.activeIndicatorRef[offsetProperty];
        this.activeIndicatorRef.style[gridProperty] = `${this.activeTabIndex + 1}`;
        const next = this.activeIndicatorRef[offsetProperty];
        this.activeIndicatorRef.style[gridProperty] = `${this.prevActiveTabIndex + 1}`;
        const dif = next - prev;
        this.activeIndicatorRef.style.transform = `${translateProperty}(${dif}px)`;
        this.activeIndicatorRef.classList.add("activeIndicatorTransition");
        this.activeIndicatorRef.addEventListener("transitionend", () => {
          this.ticking = false;
          this.activeIndicatorRef.style[gridProperty] = `${this.activeTabIndex + 1}`;
          this.activeIndicatorRef.style.transform = `${translateProperty}(0px)`;
          this.activeIndicatorRef.classList.remove("activeIndicatorTransition");
        });
      }
      /**
       * The adjust method for FASTTabs
       * @public
       * @remarks
       * This method allows the active index to be adjusted by numerical increments
       */
      adjust(adjustment) {
        const focusableTabs = this.tabs.filter((t2) => this.isFocusableElement(t2));
        const currentActiveTabIndex = focusableTabs.indexOf(this.activetab);
        const nextTabIndex = limit(0, focusableTabs.length - 1, currentActiveTabIndex + adjustment);
        const nextIndex = this.tabs.indexOf(focusableTabs[nextTabIndex]);
        if (nextIndex > -1) {
          this.moveToTabByIndex(this.tabs, nextIndex);
        }
      }
      focusTab() {
        this.tabs[this.activeTabIndex].focus();
      }
      /**
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        this.tabIds = this.getTabIds();
        this.tabpanelIds = this.getTabPanelIds();
        this.activeTabIndex = this.getActiveIndex();
      }
    }
    __decorate$1([
      attr
    ], Tabs.prototype, "orientation", void 0);
    __decorate$1([
      attr
    ], Tabs.prototype, "activeid", void 0);
    __decorate$1([
      observable
    ], Tabs.prototype, "tabs", void 0);
    __decorate$1([
      observable
    ], Tabs.prototype, "tabpanels", void 0);
    __decorate$1([
      attr({ mode: "boolean" })
    ], Tabs.prototype, "activeindicator", void 0);
    __decorate$1([
      observable
    ], Tabs.prototype, "activeIndicatorRef", void 0);
    __decorate$1([
      observable
    ], Tabs.prototype, "showActiveIndicator", void 0);
    applyMixins(Tabs, StartEnd);
    class _TextArea extends FoundationElement {
    }
    class FormAssociatedTextArea extends FormAssociated(_TextArea) {
      constructor() {
        super(...arguments);
        this.proxy = document.createElement("textarea");
      }
    }
    const TextAreaResize = {
      /**
       * No resize.
       */
      none: "none",
      /**
       * Resize vertically and horizontally.
       */
      both: "both",
      /**
       * Resize horizontally.
       */
      horizontal: "horizontal",
      /**
       * Resize vertically.
       */
      vertical: "vertical"
    };
    let TextArea$1 = class TextArea extends FormAssociatedTextArea {
      constructor() {
        super(...arguments);
        this.resize = TextAreaResize.none;
        this.cols = 20;
        this.handleTextInput = () => {
          this.value = this.control.value;
        };
      }
      readOnlyChanged() {
        if (this.proxy instanceof HTMLTextAreaElement) {
          this.proxy.readOnly = this.readOnly;
        }
      }
      autofocusChanged() {
        if (this.proxy instanceof HTMLTextAreaElement) {
          this.proxy.autofocus = this.autofocus;
        }
      }
      listChanged() {
        if (this.proxy instanceof HTMLTextAreaElement) {
          this.proxy.setAttribute("list", this.list);
        }
      }
      maxlengthChanged() {
        if (this.proxy instanceof HTMLTextAreaElement) {
          this.proxy.maxLength = this.maxlength;
        }
      }
      minlengthChanged() {
        if (this.proxy instanceof HTMLTextAreaElement) {
          this.proxy.minLength = this.minlength;
        }
      }
      spellcheckChanged() {
        if (this.proxy instanceof HTMLTextAreaElement) {
          this.proxy.spellcheck = this.spellcheck;
        }
      }
      /**
       * Selects all the text in the text area
       *
       * @public
       */
      select() {
        this.control.select();
        this.$emit("select");
      }
      /**
       * Change event handler for inner control.
       * @remarks
       * "Change" events are not `composable` so they will not
       * permeate the shadow DOM boundary. This fn effectively proxies
       * the change event, emitting a `change` event whenever the internal
       * control emits a `change` event
       * @internal
       */
      handleChange() {
        this.$emit("change");
      }
      /** {@inheritDoc (FormAssociated:interface).validate} */
      validate() {
        super.validate(this.control);
      }
    };
    __decorate$1([
      attr({ mode: "boolean" })
    ], TextArea$1.prototype, "readOnly", void 0);
    __decorate$1([
      attr
    ], TextArea$1.prototype, "resize", void 0);
    __decorate$1([
      attr({ mode: "boolean" })
    ], TextArea$1.prototype, "autofocus", void 0);
    __decorate$1([
      attr({ attribute: "form" })
    ], TextArea$1.prototype, "formId", void 0);
    __decorate$1([
      attr
    ], TextArea$1.prototype, "list", void 0);
    __decorate$1([
      attr({ converter: nullableNumberConverter })
    ], TextArea$1.prototype, "maxlength", void 0);
    __decorate$1([
      attr({ converter: nullableNumberConverter })
    ], TextArea$1.prototype, "minlength", void 0);
    __decorate$1([
      attr
    ], TextArea$1.prototype, "name", void 0);
    __decorate$1([
      attr
    ], TextArea$1.prototype, "placeholder", void 0);
    __decorate$1([
      attr({ converter: nullableNumberConverter, mode: "fromView" })
    ], TextArea$1.prototype, "cols", void 0);
    __decorate$1([
      attr({ converter: nullableNumberConverter, mode: "fromView" })
    ], TextArea$1.prototype, "rows", void 0);
    __decorate$1([
      attr({ mode: "boolean" })
    ], TextArea$1.prototype, "spellcheck", void 0);
    __decorate$1([
      observable
    ], TextArea$1.prototype, "defaultSlottedNodes", void 0);
    applyMixins(TextArea$1, DelegatesARIATextbox);
    const textAreaTemplate = (context, definition) => html`
    <template
        class="
            ${(x2) => x2.readOnly ? "readonly" : ""}
            ${(x2) => x2.resize !== TextAreaResize.none ? `resize-${x2.resize}` : ""}"
    >
        <label
            part="label"
            for="control"
            class="${(x2) => x2.defaultSlottedNodes && x2.defaultSlottedNodes.length ? "label" : "label label__hidden"}"
        >
            <slot ${slotted("defaultSlottedNodes")}></slot>
        </label>
        <textarea
            part="control"
            class="control"
            id="control"
            ?autofocus="${(x2) => x2.autofocus}"
            cols="${(x2) => x2.cols}"
            ?disabled="${(x2) => x2.disabled}"
            form="${(x2) => x2.form}"
            list="${(x2) => x2.list}"
            maxlength="${(x2) => x2.maxlength}"
            minlength="${(x2) => x2.minlength}"
            name="${(x2) => x2.name}"
            placeholder="${(x2) => x2.placeholder}"
            ?readonly="${(x2) => x2.readOnly}"
            ?required="${(x2) => x2.required}"
            rows="${(x2) => x2.rows}"
            ?spellcheck="${(x2) => x2.spellcheck}"
            :value="${(x2) => x2.value}"
            aria-atomic="${(x2) => x2.ariaAtomic}"
            aria-busy="${(x2) => x2.ariaBusy}"
            aria-controls="${(x2) => x2.ariaControls}"
            aria-current="${(x2) => x2.ariaCurrent}"
            aria-describedby="${(x2) => x2.ariaDescribedby}"
            aria-details="${(x2) => x2.ariaDetails}"
            aria-disabled="${(x2) => x2.ariaDisabled}"
            aria-errormessage="${(x2) => x2.ariaErrormessage}"
            aria-flowto="${(x2) => x2.ariaFlowto}"
            aria-haspopup="${(x2) => x2.ariaHaspopup}"
            aria-hidden="${(x2) => x2.ariaHidden}"
            aria-invalid="${(x2) => x2.ariaInvalid}"
            aria-keyshortcuts="${(x2) => x2.ariaKeyshortcuts}"
            aria-label="${(x2) => x2.ariaLabel}"
            aria-labelledby="${(x2) => x2.ariaLabelledby}"
            aria-live="${(x2) => x2.ariaLive}"
            aria-owns="${(x2) => x2.ariaOwns}"
            aria-relevant="${(x2) => x2.ariaRelevant}"
            aria-roledescription="${(x2) => x2.ariaRoledescription}"
            @input="${(x2, c2) => x2.handleTextInput()}"
            @change="${(x2) => x2.handleChange()}"
            ${ref("control")}
        ></textarea>
    </template>
`;
    const textFieldTemplate = (context, definition) => html`
    <template
        class="
            ${(x2) => x2.readOnly ? "readonly" : ""}
        "
    >
        <label
            part="label"
            for="control"
            class="${(x2) => x2.defaultSlottedNodes && x2.defaultSlottedNodes.length ? "label" : "label label__hidden"}"
        >
            <slot
                ${slotted({ property: "defaultSlottedNodes", filter: whitespaceFilter })}
            ></slot>
        </label>
        <div class="root" part="root">
            ${startSlotTemplate(context, definition)}
            <input
                class="control"
                part="control"
                id="control"
                @input="${(x2) => x2.handleTextInput()}"
                @change="${(x2) => x2.handleChange()}"
                ?autofocus="${(x2) => x2.autofocus}"
                ?disabled="${(x2) => x2.disabled}"
                list="${(x2) => x2.list}"
                maxlength="${(x2) => x2.maxlength}"
                minlength="${(x2) => x2.minlength}"
                pattern="${(x2) => x2.pattern}"
                placeholder="${(x2) => x2.placeholder}"
                ?readonly="${(x2) => x2.readOnly}"
                ?required="${(x2) => x2.required}"
                size="${(x2) => x2.size}"
                ?spellcheck="${(x2) => x2.spellcheck}"
                :value="${(x2) => x2.value}"
                type="${(x2) => x2.type}"
                aria-atomic="${(x2) => x2.ariaAtomic}"
                aria-busy="${(x2) => x2.ariaBusy}"
                aria-controls="${(x2) => x2.ariaControls}"
                aria-current="${(x2) => x2.ariaCurrent}"
                aria-describedby="${(x2) => x2.ariaDescribedby}"
                aria-details="${(x2) => x2.ariaDetails}"
                aria-disabled="${(x2) => x2.ariaDisabled}"
                aria-errormessage="${(x2) => x2.ariaErrormessage}"
                aria-flowto="${(x2) => x2.ariaFlowto}"
                aria-haspopup="${(x2) => x2.ariaHaspopup}"
                aria-hidden="${(x2) => x2.ariaHidden}"
                aria-invalid="${(x2) => x2.ariaInvalid}"
                aria-keyshortcuts="${(x2) => x2.ariaKeyshortcuts}"
                aria-label="${(x2) => x2.ariaLabel}"
                aria-labelledby="${(x2) => x2.ariaLabelledby}"
                aria-live="${(x2) => x2.ariaLive}"
                aria-owns="${(x2) => x2.ariaOwns}"
                aria-relevant="${(x2) => x2.ariaRelevant}"
                aria-roledescription="${(x2) => x2.ariaRoledescription}"
                ${ref("control")}
            />
            ${endSlotTemplate(context, definition)}
        </div>
    </template>
`;
    const disabledCursor = "not-allowed";
    const hidden = `:host([hidden]){display:none}`;
    function display(displayValue) {
      return `${hidden}:host{display:${displayValue}}`;
    }
    const focusVisible = canUseFocusVisible() ? "focus-visible" : "focus";
    const reservedReactProperties = /* @__PURE__ */ new Set([
      "children",
      "localName",
      "ref",
      "style",
      "className"
    ]);
    const emptyProps = Object.freeze(/* @__PURE__ */ Object.create(null));
    const DEFAULT_CACHE_NAME = "_default";
    const wrappersCache = /* @__PURE__ */ new Map();
    function setRef(ref2, value) {
      if (typeof ref2 === "function") {
        ref2(value);
      } else {
        ref2.current = value;
      }
    }
    function getTagName(type, config) {
      if (!config.name) {
        const definition = FASTElementDefinition.forType(type);
        if (definition) {
          config.name = definition.name;
        } else {
          throw new Error("React wrappers must wrap a FASTElement or be configured with a name.");
        }
      }
      return config.name;
    }
    function getElementEvents(config) {
      return config.events || (config.events = {});
    }
    function keyIsValid(type, config, name) {
      if (reservedReactProperties.has(name)) {
        console.warn(`${getTagName(type, config)} contains property ${name} which is a React reserved property. It will be used by React and not set on the element.`);
        return false;
      }
      return true;
    }
    function getElementKeys(type, config) {
      if (!config.keys) {
        if (config.properties) {
          config.keys = new Set(config.properties.concat(Object.keys(getElementEvents(config))));
        } else {
          const keys2 = new Set(Object.keys(getElementEvents(config)));
          const accessors = Observable.getAccessors(type.prototype);
          if (accessors.length > 0) {
            for (const a of accessors) {
              if (keyIsValid(type, config, a.name)) {
                keys2.add(a.name);
              }
            }
          } else {
            for (const p2 in type.prototype) {
              if (!(p2 in HTMLElement.prototype) && keyIsValid(type, config, p2)) {
                keys2.add(p2);
              }
            }
          }
          config.keys = keys2;
        }
      }
      return config.keys;
    }
    function provideReactWrapper(React2, designSystem) {
      let registrations = [];
      const registry = {
        register(container2, ...rest) {
          registrations.forEach((x2) => x2.register(container2, ...rest));
          registrations = [];
        }
      };
      function wrap2(type, config = {}) {
        var _a, _b;
        if (type instanceof FoundationElementRegistry) {
          if (designSystem) {
            designSystem.register(type);
          } else {
            registrations.push(type);
          }
          type = type.type;
        }
        const cachedCandidates = wrappersCache.get(type);
        if (cachedCandidates) {
          const cachedWrapper = cachedCandidates.get((_a = config.name) !== null && _a !== void 0 ? _a : DEFAULT_CACHE_NAME);
          if (cachedWrapper) {
            return cachedWrapper;
          }
        }
        class ReactComponent extends React2.Component {
          constructor() {
            super(...arguments);
            this._element = null;
          }
          _updateElement(oldProps) {
            const element = this._element;
            if (element === null) {
              return;
            }
            const currentProps = this.props;
            const previousProps = oldProps || emptyProps;
            const events = getElementEvents(config);
            for (const key in this._elementProps) {
              const newValue = currentProps[key];
              const event = events[key];
              if (event === void 0) {
                element[key] = newValue;
              } else {
                const oldValue = previousProps[key];
                if (newValue === oldValue) {
                  continue;
                }
                if (oldValue !== void 0) {
                  element.removeEventListener(event, oldValue);
                }
                if (newValue !== void 0) {
                  element.addEventListener(event, newValue);
                }
              }
            }
          }
          componentDidMount() {
            this._updateElement();
          }
          componentDidUpdate(old) {
            this._updateElement(old);
          }
          render() {
            const userRef = this.props.__forwardedRef;
            if (this._ref === void 0 || this._userRef !== userRef) {
              this._ref = (value) => {
                if (this._element === null) {
                  this._element = value;
                }
                if (userRef !== null) {
                  setRef(userRef, value);
                }
                this._userRef = userRef;
              };
            }
            const newReactProps = { ref: this._ref };
            const newElementProps = this._elementProps = {};
            const elementKeys = getElementKeys(type, config);
            const currentProps = this.props;
            for (const k2 in currentProps) {
              const v2 = currentProps[k2];
              if (elementKeys.has(k2)) {
                newElementProps[k2] = v2;
              } else {
                newReactProps[k2 === "className" ? "class" : k2] = v2;
              }
            }
            return React2.createElement(getTagName(type, config), newReactProps);
          }
        }
        const reactComponent = React2.forwardRef((props, ref2) => React2.createElement(ReactComponent, Object.assign(Object.assign({}, props), { __forwardedRef: ref2 }), props === null || props === void 0 ? void 0 : props.children));
        if (!wrappersCache.has(type)) {
          wrappersCache.set(type, /* @__PURE__ */ new Map());
        }
        wrappersCache.get(type).set((_b = config.name) !== null && _b !== void 0 ? _b : DEFAULT_CACHE_NAME, reactComponent);
        return reactComponent;
      }
      return { wrap: wrap2, registry };
    }
    function provideVSCodeDesignSystem(element) {
      return DesignSystem.getOrCreate(element).withPrefix("vscode");
    }
    function initThemeChangeListener(tokenMappings2) {
      window.addEventListener("load", () => {
        const observer = new MutationObserver(() => {
          applyCurrentTheme(tokenMappings2);
        });
        observer.observe(document.body, {
          attributes: true,
          attributeFilter: ["class"]
        });
        applyCurrentTheme(tokenMappings2);
      });
    }
    function applyCurrentTheme(tokenMappings2) {
      const styles = getComputedStyle(document.body);
      const body = document.querySelector("body");
      if (body) {
        const themeKind = body.getAttribute("data-vscode-theme-kind");
        for (const [vscodeTokenName, toolkitToken] of tokenMappings2) {
          let value = styles.getPropertyValue(vscodeTokenName).toString();
          if (themeKind === "vscode-high-contrast") {
            if (value.length === 0 && toolkitToken.name.includes("background")) {
              value = "transparent";
            }
            if (toolkitToken.name === "button-icon-hover-background") {
              value = "transparent";
            }
          } else if (themeKind === "vscode-high-contrast-light") {
            if (value.length === 0 && toolkitToken.name.includes("background")) {
              switch (toolkitToken.name) {
                case "button-primary-hover-background":
                  value = "#0F4A85";
                  break;
                case "button-secondary-hover-background":
                  value = "transparent";
                  break;
                case "button-icon-hover-background":
                  value = "transparent";
                  break;
              }
            }
          } else {
            if (toolkitToken.name === "contrast-active-border") {
              value = "transparent";
            }
          }
          toolkitToken.setValueFor(body, value);
        }
      }
    }
    const tokenMappings = /* @__PURE__ */ new Map();
    let isThemeListenerInitialized = false;
    function create(name, vscodeThemeVar) {
      const designToken = DesignToken.create(name);
      if (vscodeThemeVar) {
        if (vscodeThemeVar.includes("--fake-vscode-token")) {
          const uniqueId2 = "id" + Math.random().toString(16).slice(2);
          vscodeThemeVar = `${vscodeThemeVar}-${uniqueId2}`;
        }
        tokenMappings.set(vscodeThemeVar, designToken);
      }
      if (!isThemeListenerInitialized) {
        initThemeChangeListener(tokenMappings);
        isThemeListenerInitialized = true;
      }
      return designToken;
    }
    const background = create("background", "--vscode-editor-background").withDefault("#1e1e1e");
    const borderWidth = create("border-width").withDefault(1);
    const contrastActiveBorder = create("contrast-active-border", "--vscode-contrastActiveBorder").withDefault("#f38518");
    create("contrast-border", "--vscode-contrastBorder").withDefault("#6fc3df");
    const cornerRadius = create("corner-radius").withDefault(0);
    const cornerRadiusRound = create("corner-radius-round").withDefault(2);
    const designUnit = create("design-unit").withDefault(4);
    const disabledOpacity = create("disabled-opacity").withDefault(0.4);
    const focusBorder = create("focus-border", "--vscode-focusBorder").withDefault("#007fd4");
    const fontFamily = create("font-family", "--vscode-font-family").withDefault("-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol");
    create("font-weight", "--vscode-font-weight").withDefault("400");
    const foreground = create("foreground", "--vscode-foreground").withDefault("#cccccc");
    const inputHeight = create("input-height").withDefault("26");
    const inputMinWidth = create("input-min-width").withDefault("100px");
    const typeRampBaseFontSize = create("type-ramp-base-font-size", "--vscode-font-size").withDefault("13px");
    const typeRampBaseLineHeight = create("type-ramp-base-line-height").withDefault("normal");
    const typeRampMinus1FontSize = create("type-ramp-minus1-font-size").withDefault("11px");
    const typeRampMinus1LineHeight = create("type-ramp-minus1-line-height").withDefault("16px");
    create("type-ramp-minus2-font-size").withDefault("9px");
    create("type-ramp-minus2-line-height").withDefault("16px");
    create("type-ramp-plus1-font-size").withDefault("16px");
    create("type-ramp-plus1-line-height").withDefault("24px");
    const scrollbarWidth = create("scrollbarWidth").withDefault("10px");
    const scrollbarHeight = create("scrollbarHeight").withDefault("10px");
    const scrollbarSliderBackground = create("scrollbar-slider-background", "--vscode-scrollbarSlider-background").withDefault("#79797966");
    const scrollbarSliderHoverBackground = create("scrollbar-slider-hover-background", "--vscode-scrollbarSlider-hoverBackground").withDefault("#646464b3");
    const scrollbarSliderActiveBackground = create("scrollbar-slider-active-background", "--vscode-scrollbarSlider-activeBackground").withDefault("#bfbfbf66");
    const badgeBackground = create("badge-background", "--vscode-badge-background").withDefault("#4d4d4d");
    const badgeForeground = create("badge-foreground", "--vscode-badge-foreground").withDefault("#ffffff");
    const buttonBorder = create("button-border", "--vscode-button-border").withDefault("transparent");
    const buttonIconBackground = create("button-icon-background").withDefault("transparent");
    const buttonIconCornerRadius = create("button-icon-corner-radius").withDefault("5px");
    const buttonIconFocusBorderOffset = create("button-icon-outline-offset").withDefault(0);
    const buttonIconHoverBackground = create("button-icon-hover-background", "--fake-vscode-token").withDefault("rgba(90, 93, 94, 0.31)");
    const buttonIconPadding = create("button-icon-padding").withDefault("3px");
    const buttonPrimaryBackground = create("button-primary-background", "--vscode-button-background").withDefault("#0e639c");
    const buttonPrimaryForeground = create("button-primary-foreground", "--vscode-button-foreground").withDefault("#ffffff");
    const buttonPrimaryHoverBackground = create("button-primary-hover-background", "--vscode-button-hoverBackground").withDefault("#1177bb");
    const buttonSecondaryBackground = create("button-secondary-background", "--vscode-button-secondaryBackground").withDefault("#3a3d41");
    const buttonSecondaryForeground = create("button-secondary-foreground", "--vscode-button-secondaryForeground").withDefault("#ffffff");
    const buttonSecondaryHoverBackground = create("button-secondary-hover-background", "--vscode-button-secondaryHoverBackground").withDefault("#45494e");
    const buttonPaddingHorizontal = create("button-padding-horizontal").withDefault("11px");
    const buttonPaddingVertical = create("button-padding-vertical").withDefault("4px");
    const checkboxBackground = create("checkbox-background", "--vscode-checkbox-background").withDefault("#3c3c3c");
    const checkboxBorder = create("checkbox-border", "--vscode-checkbox-border").withDefault("#3c3c3c");
    const checkboxCornerRadius = create("checkbox-corner-radius").withDefault(3);
    create("checkbox-foreground", "--vscode-checkbox-foreground").withDefault("#f0f0f0");
    const listActiveSelectionBackground = create("list-active-selection-background", "--vscode-list-activeSelectionBackground").withDefault("#094771");
    const listActiveSelectionForeground = create("list-active-selection-foreground", "--vscode-list-activeSelectionForeground").withDefault("#ffffff");
    const listHoverBackground = create("list-hover-background", "--vscode-list-hoverBackground").withDefault("#2a2d2e");
    const dividerBackground = create("divider-background", "--vscode-settings-dropdownListBorder").withDefault("#454545");
    const dropdownBackground = create("dropdown-background", "--vscode-dropdown-background").withDefault("#3c3c3c");
    const dropdownBorder = create("dropdown-border", "--vscode-dropdown-border").withDefault("#3c3c3c");
    create("dropdown-foreground", "--vscode-dropdown-foreground").withDefault("#f0f0f0");
    const dropdownListMaxHeight = create("dropdown-list-max-height").withDefault("200px");
    const inputBackground = create("input-background", "--vscode-input-background").withDefault("#3c3c3c");
    const inputForeground = create("input-foreground", "--vscode-input-foreground").withDefault("#cccccc");
    create("input-placeholder-foreground", "--vscode-input-placeholderForeground").withDefault("#cccccc");
    const linkActiveForeground = create("link-active-foreground", "--vscode-textLink-activeForeground").withDefault("#3794ff");
    const linkForeground = create("link-foreground", "--vscode-textLink-foreground").withDefault("#3794ff");
    const progressBackground = create("progress-background", "--vscode-progressBar-background").withDefault("#0e70c0");
    const panelTabActiveBorder = create("panel-tab-active-border", "--vscode-panelTitle-activeBorder").withDefault("#e7e7e7");
    const panelTabActiveForeground = create("panel-tab-active-foreground", "--vscode-panelTitle-activeForeground").withDefault("#e7e7e7");
    const panelTabForeground = create("panel-tab-foreground", "--vscode-panelTitle-inactiveForeground").withDefault("#e7e7e799");
    create("panel-view-background", "--vscode-panel-background").withDefault("#1e1e1e");
    create("panel-view-border", "--vscode-panel-border").withDefault("#80808059");
    const tagCornerRadius = create("tag-corner-radius").withDefault("2px");
    const badgeStyles = (context, definition) => css`
	${display("inline-block")} :host {
		box-sizing: border-box;
		font-family: ${fontFamily};
		font-size: ${typeRampMinus1FontSize};
		line-height: ${typeRampMinus1LineHeight};
		text-align: center;
	}
	.control {
		align-items: center;
		background-color: ${badgeBackground};
		border: calc(${borderWidth} * 1px) solid ${buttonBorder};
		border-radius: 11px;
		box-sizing: border-box;
		color: ${badgeForeground};
		display: flex;
		height: calc(${designUnit} * 4px);
		justify-content: center;
		min-width: calc(${designUnit} * 4px + 2px);
		min-height: calc(${designUnit} * 4px + 2px);
		padding: 3px 6px;
	}
`;
    class Badge extends Badge$1 {
      /**
       * Component lifecycle method that runs when the component is inserted
       * into the DOM.
       *
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        if (!this.circular) {
          this.circular = true;
        }
      }
    }
    const vsCodeBadge = Badge.compose({
      baseName: "badge",
      template: badgeTemplate,
      styles: badgeStyles
    });
    function __decorate(decorators, target, key, desc) {
      var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r2 = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d2 = decorators[i])
            r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
      return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
    }
    typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e2 = new Error(message);
      return e2.name = "SuppressedError", e2.error = error, e2.suppressed = suppressed, e2;
    };
    const BaseButtonStyles = css`
	${display("inline-flex")} :host {
		outline: none;
		font-family: ${fontFamily};
		font-size: ${typeRampBaseFontSize};
		line-height: ${typeRampBaseLineHeight};
		color: ${buttonPrimaryForeground};
		background: ${buttonPrimaryBackground};
		border-radius: calc(${cornerRadiusRound} * 1px);
		fill: currentColor;
		cursor: pointer;
	}
	.control {
		background: transparent;
		height: inherit;
		flex-grow: 1;
		box-sizing: border-box;
		display: inline-flex;
		justify-content: center;
		align-items: center;
		padding: ${buttonPaddingVertical} ${buttonPaddingHorizontal};
		white-space: wrap;
		outline: none;
		text-decoration: none;
		border: calc(${borderWidth} * 1px) solid ${buttonBorder};
		color: inherit;
		border-radius: inherit;
		fill: inherit;
		cursor: inherit;
		font-family: inherit;
	}
	:host(:hover) {
		background: ${buttonPrimaryHoverBackground};
	}
	:host(:active) {
		background: ${buttonPrimaryBackground};
	}
	.control:${focusVisible} {
		outline: calc(${borderWidth} * 1px) solid ${focusBorder};
		outline-offset: calc(${borderWidth} * 2px);
	}
	.control::-moz-focus-inner {
		border: 0;
	}
	:host([disabled]) {
		opacity: ${disabledOpacity};
		background: ${buttonPrimaryBackground};
		cursor: ${disabledCursor};
	}
	.content {
		display: flex;
	}
	.start {
		display: flex;
	}
	::slotted(svg),
	::slotted(span) {
		width: calc(${designUnit} * 4px);
		height: calc(${designUnit} * 4px);
	}
	.start {
		margin-inline-end: 8px;
	}
`;
    const PrimaryButtonStyles = css`
	:host([appearance='primary']) {
		background: ${buttonPrimaryBackground};
		color: ${buttonPrimaryForeground};
	}
	:host([appearance='primary']:hover) {
		background: ${buttonPrimaryHoverBackground};
	}
	:host([appearance='primary']:active) .control:active {
		background: ${buttonPrimaryBackground};
	}
	:host([appearance='primary']) .control:${focusVisible} {
		outline: calc(${borderWidth} * 1px) solid ${focusBorder};
		outline-offset: calc(${borderWidth} * 2px);
	}
	:host([appearance='primary'][disabled]) {
		background: ${buttonPrimaryBackground};
	}
`;
    const SecondaryButtonStyles = css`
	:host([appearance='secondary']) {
		background: ${buttonSecondaryBackground};
		color: ${buttonSecondaryForeground};
	}
	:host([appearance='secondary']:hover) {
		background: ${buttonSecondaryHoverBackground};
	}
	:host([appearance='secondary']:active) .control:active {
		background: ${buttonSecondaryBackground};
	}
	:host([appearance='secondary']) .control:${focusVisible} {
		outline: calc(${borderWidth} * 1px) solid ${focusBorder};
		outline-offset: calc(${borderWidth} * 2px);
	}
	:host([appearance='secondary'][disabled]) {
		background: ${buttonSecondaryBackground};
	}
`;
    const IconButtonStyles = css`
	:host([appearance='icon']) {
		background: ${buttonIconBackground};
		border-radius: ${buttonIconCornerRadius};
		color: ${foreground};
	}
	:host([appearance='icon']:hover) {
		background: ${buttonIconHoverBackground};
		outline: 1px dotted ${contrastActiveBorder};
		outline-offset: -1px;
	}
	:host([appearance='icon']) .control {
		padding: ${buttonIconPadding};
		border: none;
	}
	:host([appearance='icon']:active) .control:active {
		background: ${buttonIconHoverBackground};
	}
	:host([appearance='icon']) .control:${focusVisible} {
		outline: calc(${borderWidth} * 1px) solid ${focusBorder};
		outline-offset: ${buttonIconFocusBorderOffset};
	}
	:host([appearance='icon'][disabled]) {
		background: ${buttonIconBackground};
	}
`;
    const buttonStyles = (context, definition) => css`
	${BaseButtonStyles}
	${PrimaryButtonStyles}
	${SecondaryButtonStyles}
	${IconButtonStyles}
`;
    class Button extends Button$1 {
      /**
       * Component lifecycle method that runs when the component is inserted
       * into the DOM.
       *
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        if (!this.appearance) {
          const appearanceValue = this.getAttribute("appearance");
          this.appearance = appearanceValue;
        }
      }
      /**
       * Component lifecycle method that runs when an attribute of the
       * element is changed.
       *
       * @param attrName - The attribute that was changed
       * @param oldVal - The old value of the attribute
       * @param newVal - The new value of the attribute
       *
       * @internal
       */
      attributeChangedCallback(attrName, oldVal, newVal) {
        if (attrName === "appearance" && newVal === "icon") {
          const ariaLabelValue = this.getAttribute("aria-label");
          if (!ariaLabelValue) {
            this.ariaLabel = "Icon Button";
          }
        }
        if (attrName === "aria-label") {
          this.ariaLabel = newVal;
        }
        if (attrName === "disabled") {
          this.disabled = newVal !== null;
        }
      }
    }
    __decorate([
      attr
    ], Button.prototype, "appearance", void 0);
    const vsCodeButton = Button.compose({
      baseName: "button",
      template: buttonTemplate,
      styles: buttonStyles,
      shadowOptions: {
        delegatesFocus: true
      }
    });
    const checkboxStyles = (context, defintiion) => css`
	${display("inline-flex")} :host {
		align-items: center;
		outline: none;
		margin: calc(${designUnit} * 1px) 0;
		user-select: none;
		font-size: ${typeRampBaseFontSize};
		line-height: ${typeRampBaseLineHeight};
	}
	.control {
		position: relative;
		width: calc(${designUnit} * 4px + 2px);
		height: calc(${designUnit} * 4px + 2px);
		box-sizing: border-box;
		border-radius: calc(${checkboxCornerRadius} * 1px);
		border: calc(${borderWidth} * 1px) solid ${checkboxBorder};
		background: ${checkboxBackground};
		outline: none;
		cursor: pointer;
	}
	.label {
		font-family: ${fontFamily};
		color: ${foreground};
		padding-inline-start: calc(${designUnit} * 2px + 2px);
		margin-inline-end: calc(${designUnit} * 2px + 2px);
		cursor: pointer;
	}
	.label__hidden {
		display: none;
		visibility: hidden;
	}
	.checked-indicator {
		width: 100%;
		height: 100%;
		display: block;
		fill: ${foreground};
		opacity: 0;
		pointer-events: none;
	}
	.indeterminate-indicator {
		border-radius: 2px;
		background: ${foreground};
		position: absolute;
		top: 50%;
		left: 50%;
		width: 50%;
		height: 50%;
		transform: translate(-50%, -50%);
		opacity: 0;
	}
	:host(:enabled) .control:hover {
		background: ${checkboxBackground};
		border-color: ${checkboxBorder};
	}
	:host(:enabled) .control:active {
		background: ${checkboxBackground};
		border-color: ${focusBorder};
	}
	:host(:${focusVisible}) .control {
		border: calc(${borderWidth} * 1px) solid ${focusBorder};
	}
	:host(.disabled) .label,
	:host(.readonly) .label,
	:host(.readonly) .control,
	:host(.disabled) .control {
		cursor: ${disabledCursor};
	}
	:host(.checked:not(.indeterminate)) .checked-indicator,
	:host(.indeterminate) .indeterminate-indicator {
		opacity: 1;
	}
	:host(.disabled) {
		opacity: ${disabledOpacity};
	}
`;
    class Checkbox extends Checkbox$1 {
      /**
       * Component lifecycle method that runs when the component is inserted
       * into the DOM.
       *
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        if (this.textContent) {
          this.setAttribute("aria-label", this.textContent);
        } else {
          this.setAttribute("aria-label", "Checkbox");
        }
      }
    }
    const vsCodeCheckbox = Checkbox.compose({
      baseName: "checkbox",
      template: checkboxTemplate,
      styles: checkboxStyles,
      checkedIndicator: `
		<svg 
			part="checked-indicator"
			class="checked-indicator"
			width="16" 
			height="16" 
			viewBox="0 0 16 16" 
			xmlns="http://www.w3.org/2000/svg" 
			fill="currentColor"
		>
			<path 
				fill-rule="evenodd" 
				clip-rule="evenodd" 
				d="M14.431 3.323l-8.47 10-.79-.036-3.35-4.77.818-.574 2.978 4.24 8.051-9.506.764.646z"
			/>
		</svg>
	`,
      indeterminateIndicator: `
		<div part="indeterminate-indicator" class="indeterminate-indicator"></div>
	`
    });
    const dataGridStyles = (context, definition) => css`
	:host {
		display: flex;
		position: relative;
		flex-direction: column;
		width: 100%;
	}
`;
    const dataGridRowStyles = (context, definition) => css`
	:host {
		display: grid;
		padding: calc((${designUnit} / 4) * 1px) 0;
		box-sizing: border-box;
		width: 100%;
		background: transparent;
	}
	:host(.header) {
	}
	:host(.sticky-header) {
		background: ${background};
		position: sticky;
		top: 0;
	}
	:host(:hover) {
		background: ${listHoverBackground};
		outline: 1px dotted ${contrastActiveBorder};
		outline-offset: -1px;
	}
`;
    const dataGridCellStyles = (context, definition) => css`
	:host {
		padding: calc(${designUnit} * 1px) calc(${designUnit} * 3px);
		color: ${foreground};
		opacity: 1;
		box-sizing: border-box;
		font-family: ${fontFamily};
		font-size: ${typeRampBaseFontSize};
		line-height: ${typeRampBaseLineHeight};
		font-weight: 400;
		border: solid calc(${borderWidth} * 1px) transparent;
		border-radius: calc(${cornerRadius} * 1px);
		white-space: wrap;
		overflow-wrap: anywhere;
	}
	:host(.column-header) {
		font-weight: 600;
	}
	:host(:${focusVisible}),
	:host(:focus),
	:host(:active) {
		background: ${listActiveSelectionBackground};
		border: solid calc(${borderWidth} * 1px) ${focusBorder};
		color: ${listActiveSelectionForeground};
		outline: none;
	}
	:host(:${focusVisible}) ::slotted(*),
	:host(:focus) ::slotted(*),
	:host(:active) ::slotted(*) {
		color: ${listActiveSelectionForeground} !important;
	}
`;
    class DataGrid extends DataGrid$1 {
      /**
       * Component lifecycle method that runs when the component is inserted
       * into the DOM.
       *
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        const ariaLabelValue = this.getAttribute("aria-label");
        if (!ariaLabelValue) {
          this.setAttribute("aria-label", "Data Grid");
        }
      }
    }
    const vsCodeDataGrid = DataGrid.compose({
      baseName: "data-grid",
      baseClass: DataGrid$1,
      template: dataGridTemplate,
      styles: dataGridStyles
    });
    class DataGridRow extends DataGridRow$1 {
    }
    const vsCodeDataGridRow = DataGridRow.compose({
      baseName: "data-grid-row",
      baseClass: DataGridRow$1,
      template: dataGridRowTemplate,
      styles: dataGridRowStyles
    });
    class DataGridCell extends DataGridCell$1 {
    }
    const vsCodeDataGridCell = DataGridCell.compose({
      baseName: "data-grid-cell",
      baseClass: DataGridCell$1,
      template: dataGridCellTemplate,
      styles: dataGridCellStyles
    });
    const dividerStyles = (context, definition) => css`
	${display("block")} :host {
		border: none;
		border-top: calc(${borderWidth} * 1px) solid ${dividerBackground};
		box-sizing: content-box;
		height: 0;
		margin: calc(${designUnit} * 1px) 0;
		width: 100%;
	}
`;
    class Divider extends Divider$1 {
    }
    const vsCodeDivider = Divider.compose({
      baseName: "divider",
      template: dividerTemplate,
      styles: dividerStyles
    });
    const dropdownStyles = (context, definition) => css`
	${display("inline-flex")} :host {
		background: ${dropdownBackground};
		border-radius: calc(${cornerRadiusRound} * 1px);
		box-sizing: border-box;
		color: ${foreground};
		contain: contents;
		font-family: ${fontFamily};
		height: calc(${inputHeight} * 1px);
		position: relative;
		user-select: none;
		min-width: ${inputMinWidth};
		outline: none;
		vertical-align: top;
	}
	.control {
		align-items: center;
		box-sizing: border-box;
		border: calc(${borderWidth} * 1px) solid ${dropdownBorder};
		border-radius: calc(${cornerRadiusRound} * 1px);
		cursor: pointer;
		display: flex;
		font-family: inherit;
		font-size: ${typeRampBaseFontSize};
		line-height: ${typeRampBaseLineHeight};
		min-height: 100%;
		padding: 2px 6px 2px 8px;
		width: 100%;
	}
	.listbox {
		background: ${dropdownBackground};
		border: calc(${borderWidth} * 1px) solid ${focusBorder};
		border-radius: calc(${cornerRadiusRound} * 1px);
		box-sizing: border-box;
		display: inline-flex;
		flex-direction: column;
		left: 0;
		max-height: ${dropdownListMaxHeight};
		padding: 0;
		overflow-y: auto;
		position: absolute;
		width: 100%;
		z-index: 1;
	}
	.listbox[hidden] {
		display: none;
	}
	:host(:${focusVisible}) .control {
		border-color: ${focusBorder};
	}
	:host(:not([disabled]):hover) {
		background: ${dropdownBackground};
		border-color: ${dropdownBorder};
	}
	:host(:${focusVisible}) ::slotted([aria-selected="true"][role="option"]:not([disabled])) {
		background: ${listActiveSelectionBackground};
		border: calc(${borderWidth} * 1px) solid transparent;
		color: ${listActiveSelectionForeground};
	}
	:host([disabled]) {
		cursor: ${disabledCursor};
		opacity: ${disabledOpacity};
	}
	:host([disabled]) .control {
		cursor: ${disabledCursor};
		user-select: none;
	}
	:host([disabled]:hover) {
		background: ${dropdownBackground};
		color: ${foreground};
		fill: currentcolor;
	}
	:host(:not([disabled])) .control:active {
		border-color: ${focusBorder};
	}
	:host(:empty) .listbox {
		display: none;
	}
	:host([open]) .control {
		border-color: ${focusBorder};
	}
	:host([open][position='above']) .listbox {
		border-bottom-left-radius: 0;
		border-bottom-right-radius: 0;
	}
	:host([open][position='below']) .listbox {
		border-top-left-radius: 0;
		border-top-right-radius: 0;
	}
	:host([open][position='above']) .listbox {
		bottom: calc(${inputHeight} * 1px);
	}
	:host([open][position='below']) .listbox {
		top: calc(${inputHeight} * 1px);
	}
	.selected-value {
		flex: 1 1 auto;
		font-family: inherit;
		overflow: hidden;
		text-align: start;
		text-overflow: ellipsis;
		white-space: nowrap;
	}
	.indicator {
		flex: 0 0 auto;
		margin-inline-start: 1em;
	}
	slot[name='listbox'] {
		display: none;
		width: 100%;
	}
	:host([open]) slot[name='listbox'] {
		display: flex;
		position: absolute;
	}
	.end {
		margin-inline-start: auto;
	}
	.start,
	.end,
	.indicator,
	.select-indicator,
	::slotted(svg),
	::slotted(span) {
		fill: currentcolor;
		height: 1em;
		min-height: calc(${designUnit} * 4px);
		min-width: calc(${designUnit} * 4px);
		width: 1em;
	}
	::slotted([role='option']),
	::slotted(option) {
		flex: 0 0 auto;
	}
`;
    class Dropdown extends Select {
    }
    const vsCodeDropdown = Dropdown.compose({
      baseName: "dropdown",
      template: selectTemplate,
      styles: dropdownStyles,
      indicator: `
		<svg 
			class="select-indicator"
			part="select-indicator"
			width="16" 
			height="16" 
			viewBox="0 0 16 16" 
			xmlns="http://www.w3.org/2000/svg" 
			fill="currentColor"
		>
			<path 
				fill-rule="evenodd" 
				clip-rule="evenodd" 
				d="M7.976 10.072l4.357-4.357.62.618L8.284 11h-.618L3 6.333l.619-.618 4.357 4.357z"
			/>
		</svg>
	`
    });
    const linkStyles = (context, definition) => css`
	${display("inline-flex")} :host {
		background: transparent;
		box-sizing: border-box;
		color: ${linkForeground};
		cursor: pointer;
		fill: currentcolor;
		font-family: ${fontFamily};
		font-size: ${typeRampBaseFontSize};
		line-height: ${typeRampBaseLineHeight};
		outline: none;
	}
	.control {
		background: transparent;
		border: calc(${borderWidth} * 1px) solid transparent;
		border-radius: calc(${cornerRadius} * 1px);
		box-sizing: border-box;
		color: inherit;
		cursor: inherit;
		fill: inherit;
		font-family: inherit;
		height: inherit;
		padding: 0;
		outline: none;
		text-decoration: none;
		word-break: break-word;
	}
	.control::-moz-focus-inner {
		border: 0;
	}
	:host(:hover) {
		color: ${linkActiveForeground};
	}
	:host(:hover) .content {
		text-decoration: underline;
	}
	:host(:active) {
		background: transparent;
		color: ${linkActiveForeground};
	}
	:host(:${focusVisible}) .control,
	:host(:focus) .control {
		border: calc(${borderWidth} * 1px) solid ${focusBorder};
	}
`;
    class Link extends Anchor {
    }
    const vsCodeLink = Link.compose({
      baseName: "link",
      template: anchorTemplate,
      styles: linkStyles,
      shadowOptions: {
        delegatesFocus: true
      }
    });
    const optionStyles = (context, definition) => css`
	${display("inline-flex")} :host {
		font-family: var(--body-font);
		border-radius: ${cornerRadius};
		border: calc(${borderWidth} * 1px) solid transparent;
		box-sizing: border-box;
		color: ${foreground};
		cursor: pointer;
		fill: currentcolor;
		font-size: ${typeRampBaseFontSize};
		line-height: ${typeRampBaseLineHeight};
		margin: 0;
		outline: none;
		overflow: hidden;
		padding: 0 calc((${designUnit} / 2) * 1px)
			calc((${designUnit} / 4) * 1px);
		user-select: none;
		white-space: nowrap;
	}
	:host(:${focusVisible}) {
		border-color: ${focusBorder};
		background: ${listActiveSelectionBackground};
		color: ${foreground};
	}
	:host([aria-selected='true']) {
		background: ${listActiveSelectionBackground};
		border: calc(${borderWidth} * 1px) solid transparent;
		color: ${listActiveSelectionForeground};
	}
	:host(:active) {
		background: ${listActiveSelectionBackground};
		color: ${listActiveSelectionForeground};
	}
	:host(:not([aria-selected='true']):hover) {
		background: ${listActiveSelectionBackground};
		border: calc(${borderWidth} * 1px) solid transparent;
		color: ${listActiveSelectionForeground};
	}
	:host(:not([aria-selected='true']):active) {
		background: ${listActiveSelectionBackground};
		color: ${foreground};
	}
	:host([disabled]) {
		cursor: ${disabledCursor};
		opacity: ${disabledOpacity};
	}
	:host([disabled]:hover) {
		background-color: inherit;
	}
	.content {
		grid-column-start: 2;
		justify-self: start;
		overflow: hidden;
		text-overflow: ellipsis;
	}
`;
    let Option$1 = class Option extends ListboxOption {
      /**
       * Component lifecycle method that runs when the component is inserted
       * into the DOM.
       *
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        if (this.textContent) {
          this.setAttribute("aria-label", this.textContent);
        } else {
          this.setAttribute("aria-label", "Option");
        }
      }
    };
    const vsCodeOption = Option$1.compose({
      baseName: "option",
      template: listboxOptionTemplate,
      styles: optionStyles
    });
    const panelsStyles = (context, definition) => css`
	${display("grid")} :host {
		box-sizing: border-box;
		font-family: ${fontFamily};
		font-size: ${typeRampBaseFontSize};
		line-height: ${typeRampBaseLineHeight};
		color: ${foreground};
		grid-template-columns: auto 1fr auto;
		grid-template-rows: auto 1fr;
		overflow-x: auto;
	}
	.tablist {
		display: grid;
		grid-template-rows: auto auto;
		grid-template-columns: auto;
		column-gap: calc(${designUnit} * 8px);
		position: relative;
		width: max-content;
		align-self: end;
		padding: calc(${designUnit} * 1px) calc(${designUnit} * 1px) 0;
		box-sizing: border-box;
	}
	.start,
	.end {
		align-self: center;
	}
	.activeIndicator {
		grid-row: 2;
		grid-column: 1;
		width: 100%;
		height: calc((${designUnit} / 4) * 1px);
		justify-self: center;
		background: ${panelTabActiveForeground};
		margin: 0;
		border-radius: calc(${cornerRadius} * 1px);
	}
	.activeIndicatorTransition {
		transition: transform 0.01s linear;
	}
	.tabpanel {
		grid-row: 2;
		grid-column-start: 1;
		grid-column-end: 4;
		position: relative;
	}
`;
    const panelTabStyles = (context, definition) => css`
	${display("inline-flex")} :host {
		box-sizing: border-box;
		font-family: ${fontFamily};
		font-size: ${typeRampBaseFontSize};
		line-height: ${typeRampBaseLineHeight};
		height: calc(${designUnit} * 7px);
		padding: calc(${designUnit} * 1px) 0;
		color: ${panelTabForeground};
		fill: currentcolor;
		border-radius: calc(${cornerRadius} * 1px);
		border: solid calc(${borderWidth} * 1px) transparent;
		align-items: center;
		justify-content: center;
		grid-row: 1;
		cursor: pointer;
	}
	:host(:hover) {
		color: ${panelTabActiveForeground};
		fill: currentcolor;
	}
	:host(:active) {
		color: ${panelTabActiveForeground};
		fill: currentcolor;
	}
	:host([aria-selected='true']) {
		background: transparent;
		color: ${panelTabActiveForeground};
		fill: currentcolor;
	}
	:host([aria-selected='true']:hover) {
		background: transparent;
		color: ${panelTabActiveForeground};
		fill: currentcolor;
	}
	:host([aria-selected='true']:active) {
		background: transparent;
		color: ${panelTabActiveForeground};
		fill: currentcolor;
	}
	:host(:${focusVisible}) {
		outline: none;
		border: solid calc(${borderWidth} * 1px) ${panelTabActiveBorder};
	}
	:host(:focus) {
		outline: none;
	}
	::slotted(vscode-badge) {
		margin-inline-start: calc(${designUnit} * 2px);
	}
`;
    const panelViewStyles = (context, definition) => css`
	${display("flex")} :host {
		color: inherit;
		background-color: transparent;
		border: solid calc(${borderWidth} * 1px) transparent;
		box-sizing: border-box;
		font-size: ${typeRampBaseFontSize};
		line-height: ${typeRampBaseLineHeight};
		padding: 10px calc((${designUnit} + 2) * 1px);
	}
`;
    class Panels extends Tabs {
      /**
       * Component lifecycle method that runs when the component is inserted
       * into the DOM.
       *
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        if (this.orientation) {
          this.orientation = TabsOrientation.horizontal;
        }
        const ariaLabelValue = this.getAttribute("aria-label");
        if (!ariaLabelValue) {
          this.setAttribute("aria-label", "Panels");
        }
      }
    }
    const vsCodePanels = Panels.compose({
      baseName: "panels",
      template: tabsTemplate,
      styles: panelsStyles
    });
    class PanelTab extends Tab {
      /**
       * Component lifecycle method that runs when the component is inserted
       * into the DOM.
       *
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        if (this.disabled) {
          this.disabled = false;
        }
        if (this.textContent) {
          this.setAttribute("aria-label", this.textContent);
        }
      }
    }
    const vsCodePanelTab = PanelTab.compose({
      baseName: "panel-tab",
      template: tabTemplate,
      styles: panelTabStyles
    });
    class PanelView extends TabPanel {
    }
    const vsCodePanelView = PanelView.compose({
      baseName: "panel-view",
      template: tabPanelTemplate,
      styles: panelViewStyles
    });
    const progressRingStyles = (context, definition) => css`
	${display("flex")} :host {
		align-items: center;
		outline: none;
		height: calc(${designUnit} * 7px);
		width: calc(${designUnit} * 7px);
		margin: 0;
	}
	.progress {
		height: 100%;
		width: 100%;
	}
	.background {
		fill: none;
		stroke: transparent;
		stroke-width: calc(${designUnit} / 2 * 1px);
	}
	.indeterminate-indicator-1 {
		fill: none;
		stroke: ${progressBackground};
		stroke-width: calc(${designUnit} / 2 * 1px);
		stroke-linecap: square;
		transform-origin: 50% 50%;
		transform: rotate(-90deg);
		transition: all 0.2s ease-in-out;
		animation: spin-infinite 2s linear infinite;
	}
	@keyframes spin-infinite {
		0% {
			stroke-dasharray: 0.01px 43.97px;
			transform: rotate(0deg);
		}
		50% {
			stroke-dasharray: 21.99px 21.99px;
			transform: rotate(450deg);
		}
		100% {
			stroke-dasharray: 0.01px 43.97px;
			transform: rotate(1080deg);
		}
	}
`;
    class ProgressRing extends BaseProgress {
      /**
       * Component lifecycle method that runs when the component is inserted
       * into the DOM.
       *
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        if (this.paused) {
          this.paused = false;
        }
        this.setAttribute("aria-label", "Loading");
        this.setAttribute("aria-live", "assertive");
        this.setAttribute("role", "alert");
      }
      /**
       * Component lifecycle method that runs when an attribute of the
       * element is changed.
       *
       * @param attrName - The attribute that was changed
       * @param oldVal - The old value of the attribute
       * @param newVal - The new value of the attribute
       *
       * @internal
       */
      attributeChangedCallback(attrName, oldVal, newVal) {
        if (attrName === "value") {
          this.removeAttribute("value");
        }
      }
    }
    const vsCodeProgressRing = ProgressRing.compose({
      baseName: "progress-ring",
      template: progressRingTemplate,
      styles: progressRingStyles,
      indeterminateIndicator: `
		<svg class="progress" part="progress" viewBox="0 0 16 16">
			<circle
				class="background"
				part="background"
				cx="8px"
				cy="8px"
				r="7px"
			></circle>
			<circle
				class="indeterminate-indicator-1"
				part="indeterminate-indicator-1"
				cx="8px"
				cy="8px"
				r="7px"
			></circle>
		</svg>
	`
    });
    const radioGroupStyles = (context, definition) => css`
	${display("flex")} :host {
		align-items: flex-start;
		margin: calc(${designUnit} * 1px) 0;
		flex-direction: column;
	}
	.positioning-region {
		display: flex;
		flex-wrap: wrap;
	}
	:host([orientation='vertical']) .positioning-region {
		flex-direction: column;
	}
	:host([orientation='horizontal']) .positioning-region {
		flex-direction: row;
	}
	::slotted([slot='label']) {
		color: ${foreground};
		font-size: ${typeRampBaseFontSize};
		margin: calc(${designUnit} * 1px) 0;
	}
`;
    class RadioGroup extends RadioGroup$1 {
      /**
       * Component lifecycle method that runs when the component is inserted
       * into the DOM.
       *
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        const label = this.querySelector("label");
        if (label) {
          const id2 = "radio-group-" + Math.random().toString(16).slice(2);
          label.setAttribute("id", id2);
          this.setAttribute("aria-labelledby", id2);
        }
      }
    }
    const vsCodeRadioGroup = RadioGroup.compose({
      baseName: "radio-group",
      template: radioGroupTemplate,
      styles: radioGroupStyles
    });
    const radioStyles = (context, definition) => css`
	${display("inline-flex")} :host {
		align-items: center;
		flex-direction: row;
		font-size: ${typeRampBaseFontSize};
		line-height: ${typeRampBaseLineHeight};
		margin: calc(${designUnit} * 1px) 0;
		outline: none;
		position: relative;
		transition: all 0.2s ease-in-out;
		user-select: none;
	}
	.control {
		background: ${checkboxBackground};
		border-radius: 999px;
		border: calc(${borderWidth} * 1px) solid ${checkboxBorder};
		box-sizing: border-box;
		cursor: pointer;
		height: calc(${designUnit} * 4px);
		position: relative;
		outline: none;
		width: calc(${designUnit} * 4px);
	}
	.label {
		color: ${foreground};
		cursor: pointer;
		font-family: ${fontFamily};
		margin-inline-end: calc(${designUnit} * 2px + 2px);
		padding-inline-start: calc(${designUnit} * 2px + 2px);
	}
	.label__hidden {
		display: none;
		visibility: hidden;
	}
	.control,
	.checked-indicator {
		flex-shrink: 0;
	}
	.checked-indicator {
		background: ${foreground};
		border-radius: 999px;
		display: inline-block;
		inset: calc(${designUnit} * 1px);
		opacity: 0;
		pointer-events: none;
		position: absolute;
	}
	:host(:not([disabled])) .control:hover {
		background: ${checkboxBackground};
		border-color: ${checkboxBorder};
	}
	:host(:not([disabled])) .control:active {
		background: ${checkboxBackground};
		border-color: ${focusBorder};
	}
	:host(:${focusVisible}) .control {
		border: calc(${borderWidth} * 1px) solid ${focusBorder};
	}
	:host([aria-checked='true']) .control {
		background: ${checkboxBackground};
		border: calc(${borderWidth} * 1px) solid ${checkboxBorder};
	}
	:host([aria-checked='true']:not([disabled])) .control:hover {
		background: ${checkboxBackground};
		border: calc(${borderWidth} * 1px) solid ${checkboxBorder};
	}
	:host([aria-checked='true']:not([disabled])) .control:active {
		background: ${checkboxBackground};
		border: calc(${borderWidth} * 1px) solid ${focusBorder};
	}
	:host([aria-checked="true"]:${focusVisible}:not([disabled])) .control {
		border: calc(${borderWidth} * 1px) solid ${focusBorder};
	}
	:host([disabled]) .label,
	:host([readonly]) .label,
	:host([readonly]) .control,
	:host([disabled]) .control {
		cursor: ${disabledCursor};
	}
	:host([aria-checked='true']) .checked-indicator {
		opacity: 1;
	}
	:host([disabled]) {
		opacity: ${disabledOpacity};
	}
`;
    class Radio extends Radio$1 {
      /**
       * Component lifecycle method that runs when the component is inserted
       * into the DOM.
       *
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        if (this.textContent) {
          this.setAttribute("aria-label", this.textContent);
        } else {
          this.setAttribute("aria-label", "Radio");
        }
      }
    }
    const vsCodeRadio = Radio.compose({
      baseName: "radio",
      template: radioTemplate,
      styles: radioStyles,
      checkedIndicator: `
		<div part="checked-indicator" class="checked-indicator"></div>
	`
    });
    const tagStyles = (context, definition) => css`
	${display("inline-block")} :host {
		box-sizing: border-box;
		font-family: ${fontFamily};
		font-size: ${typeRampMinus1FontSize};
		line-height: ${typeRampMinus1LineHeight};
	}
	.control {
		background-color: ${badgeBackground};
		border: calc(${borderWidth} * 1px) solid ${buttonBorder};
		border-radius: ${tagCornerRadius};
		color: ${badgeForeground};
		padding: calc(${designUnit} * 0.5px) calc(${designUnit} * 1px);
		text-transform: uppercase;
	}
`;
    class Tag extends Badge$1 {
      /**
       * Component lifecycle method that runs when the component is inserted
       * into the DOM.
       *
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        if (this.circular) {
          this.circular = false;
        }
      }
    }
    const vsCodeTag = Tag.compose({
      baseName: "tag",
      template: badgeTemplate,
      styles: tagStyles
    });
    const textAreaStyles = (context, definition) => css`
	${display("inline-block")} :host {
		font-family: ${fontFamily};
		outline: none;
		user-select: none;
	}
	.control {
		box-sizing: border-box;
		position: relative;
		color: ${inputForeground};
		background: ${inputBackground};
		border-radius: calc(${cornerRadiusRound} * 1px);
		border: calc(${borderWidth} * 1px) solid ${dropdownBorder};
		font: inherit;
		font-size: ${typeRampBaseFontSize};
		line-height: ${typeRampBaseLineHeight};
		padding: calc(${designUnit} * 2px + 1px);
		width: 100%;
		min-width: ${inputMinWidth};
		resize: none;
	}
	.control:hover:enabled {
		background: ${inputBackground};
		border-color: ${dropdownBorder};
	}
	.control:active:enabled {
		background: ${inputBackground};
		border-color: ${focusBorder};
	}
	.control:hover,
	.control:${focusVisible},
	.control:disabled,
	.control:active {
		outline: none;
	}
	.control::-webkit-scrollbar {
		width: ${scrollbarWidth};
		height: ${scrollbarHeight};
	}
	.control::-webkit-scrollbar-corner {
		background: ${inputBackground};
	}
	.control::-webkit-scrollbar-thumb {
		background: ${scrollbarSliderBackground};
	}
	.control::-webkit-scrollbar-thumb:hover {
		background: ${scrollbarSliderHoverBackground};
	}
	.control::-webkit-scrollbar-thumb:active {
		background: ${scrollbarSliderActiveBackground};
	}
	:host(:focus-within:not([disabled])) .control {
		border-color: ${focusBorder};
	}
	:host([resize='both']) .control {
		resize: both;
	}
	:host([resize='horizontal']) .control {
		resize: horizontal;
	}
	:host([resize='vertical']) .control {
		resize: vertical;
	}
	.label {
		display: block;
		color: ${foreground};
		cursor: pointer;
		font-size: ${typeRampBaseFontSize};
		line-height: ${typeRampBaseLineHeight};
		margin-bottom: 2px;
	}
	.label__hidden {
		display: none;
		visibility: hidden;
	}
	:host([disabled]) .label,
	:host([readonly]) .label,
	:host([readonly]) .control,
	:host([disabled]) .control {
		cursor: ${disabledCursor};
	}
	:host([disabled]) {
		opacity: ${disabledOpacity};
	}
	:host([disabled]) .control {
		border-color: ${dropdownBorder};
	}
`;
    class TextArea extends TextArea$1 {
      /**
       * Component lifecycle method that runs when the component is inserted
       * into the DOM.
       *
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        if (this.textContent) {
          this.setAttribute("aria-label", this.textContent);
        } else {
          this.setAttribute("aria-label", "Text area");
        }
      }
    }
    const vsCodeTextArea = TextArea.compose({
      baseName: "text-area",
      template: textAreaTemplate,
      styles: textAreaStyles,
      shadowOptions: {
        delegatesFocus: true
      }
    });
    const textFieldStyles = (context, definition) => css`
	${display("inline-block")} :host {
		font-family: ${fontFamily};
		outline: none;
		user-select: none;
	}
	.root {
		box-sizing: border-box;
		position: relative;
		display: flex;
		flex-direction: row;
		color: ${inputForeground};
		background: ${inputBackground};
		border-radius: calc(${cornerRadiusRound} * 1px);
		border: calc(${borderWidth} * 1px) solid ${dropdownBorder};
		height: calc(${inputHeight} * 1px);
		min-width: ${inputMinWidth};
	}
	.control {
		-webkit-appearance: none;
		font: inherit;
		background: transparent;
		border: 0;
		color: inherit;
		height: calc(100% - (${designUnit} * 1px));
		width: 100%;
		margin-top: auto;
		margin-bottom: auto;
		border: none;
		padding: 0 calc(${designUnit} * 2px + 1px);
		font-size: ${typeRampBaseFontSize};
		line-height: ${typeRampBaseLineHeight};
	}
	.control:hover,
	.control:${focusVisible},
	.control:disabled,
	.control:active {
		outline: none;
	}
	.label {
		display: block;
		color: ${foreground};
		cursor: pointer;
		font-size: ${typeRampBaseFontSize};
		line-height: ${typeRampBaseLineHeight};
		margin-bottom: 2px;
	}
	.label__hidden {
		display: none;
		visibility: hidden;
	}
	.start,
	.end {
		display: flex;
		margin: auto;
		fill: currentcolor;
	}
	::slotted(svg),
	::slotted(span) {
		width: calc(${designUnit} * 4px);
		height: calc(${designUnit} * 4px);
	}
	.start {
		margin-inline-start: calc(${designUnit} * 2px);
	}
	.end {
		margin-inline-end: calc(${designUnit} * 2px);
	}
	:host(:hover:not([disabled])) .root {
		background: ${inputBackground};
		border-color: ${dropdownBorder};
	}
	:host(:active:not([disabled])) .root {
		background: ${inputBackground};
		border-color: ${focusBorder};
	}
	:host(:focus-within:not([disabled])) .root {
		border-color: ${focusBorder};
	}
	:host([disabled]) .label,
	:host([readonly]) .label,
	:host([readonly]) .control,
	:host([disabled]) .control {
		cursor: ${disabledCursor};
	}
	:host([disabled]) {
		opacity: ${disabledOpacity};
	}
	:host([disabled]) .control {
		border-color: ${dropdownBorder};
	}
`;
    class TextField extends TextField$1 {
      /**
       * Component lifecycle method that runs when the component is inserted
       * into the DOM.
       *
       * @internal
       */
      connectedCallback() {
        super.connectedCallback();
        if (this.textContent) {
          this.setAttribute("aria-label", this.textContent);
        } else {
          this.setAttribute("aria-label", "Text field");
        }
      }
    }
    const vsCodeTextField = TextField.compose({
      baseName: "text-field",
      template: textFieldTemplate,
      styles: textFieldStyles,
      shadowOptions: {
        delegatesFocus: true
      }
    });
    const { wrap } = provideReactWrapper(React, provideVSCodeDesignSystem());
    wrap(vsCodeBadge(), {
      name: "vscode-badge"
    });
    const VSCodeButton = wrap(vsCodeButton(), {
      name: "vscode-button"
    });
    const VSCodeCheckbox = wrap(vsCodeCheckbox(), {
      name: "vscode-checkbox",
      events: {
        onChange: "change"
      }
    });
    wrap(vsCodeDataGrid(), {
      name: "vscode-data-grid"
    });
    wrap(vsCodeDataGridCell(), {
      name: "vscode-data-grid-cell"
    });
    wrap(vsCodeDataGridRow(), {
      name: "vscode-data-grid-row"
    });
    wrap(vsCodeDivider(), {
      name: "vscode-divider"
    });
    const VSCodeDropdown = wrap(vsCodeDropdown(), {
      name: "vscode-dropdown",
      events: {
        onChange: "change"
      }
    });
    const VSCodeLink = wrap(vsCodeLink(), {
      name: "vscode-link"
    });
    const VSCodeOption = wrap(vsCodeOption(), {
      name: "vscode-option"
    });
    const VSCodePanels = wrap(vsCodePanels(), {
      name: "vscode-panels",
      events: {
        onChange: "change"
      }
    });
    const VSCodePanelTab = wrap(vsCodePanelTab(), {
      name: "vscode-panel-tab"
    });
    const VSCodePanelView = wrap(vsCodePanelView(), {
      name: "vscode-panel-view"
    });
    const VSCodeProgressRing = wrap(vsCodeProgressRing(), {
      name: "vscode-progress-ring"
    });
    wrap(vsCodeRadio(), {
      name: "vscode-radio",
      events: {
        onChange: "change"
      }
    });
    wrap(vsCodeRadioGroup(), {
      name: "vscode-radio-group",
      events: {
        onChange: "change"
      }
    });
    const VSCodeTag = wrap(vsCodeTag(), {
      name: "vscode-tag"
    });
    wrap(vsCodeTextArea(), {
      name: "vscode-text-area",
      events: {
        onChange: "change",
        onInput: "input"
      }
    });
    const VSCodeTextField = wrap(vsCodeTextField(), {
      name: "vscode-text-field",
      events: {
        onChange: "change",
        onInput: "input"
      }
    });
    const toWebviewEventTypes = [
      "workspaceName",
      "coverageMap",
      "filesList",
      "fileName",
      "fileTestablesList",
      "isLoggedInState",
      "signInResponse",
      "resetSignIn",
      "testsFilesList",
      "gitChangedFilesList",
      "generateTestFilesStatus",
      "coverageRefreshing",
      "onboardingCompleted",
      "setEarlyConfig",
      "shouldShowOnboardingPage"
    ];
    class VSCodeAPIWrapper {
      constructor() {
        __publicField(this, "vsCodeApi");
        if (typeof acquireVsCodeApi === "function") {
          this.vsCodeApi = acquireVsCodeApi();
        }
      }
      /**
       * Post a message (i.e. send arbitrary data) to the owner of the webview.
       *
       * @remarks When running webview code inside a web browser, postMessage will instead
       * log the given message to the console.
       *
       * @param message Abitrary data (must be JSON serializable) to send to the extension context.
       */
      postMessage(message) {
        if (this.vsCodeApi) {
          this.vsCodeApi.postMessage(message);
        } else {
          console.info("Not processed message posted from WebView:", message);
        }
      }
      /**
       * Get the persistent state stored for this webview.
       *
       * @remarks When running webview source code inside a web browser, getState will retrieve state
       * from local storage (https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage).
       *
       * @return The current state or `undefined` if no state has been set.
       */
      getState() {
        if (this.vsCodeApi) {
          return this.vsCodeApi.getState();
        } else {
          const state = localStorage.getItem("vscodeState");
          return isDefined(state) ? JSON.parse(state) : void 0;
        }
      }
      /**
       * Set the persistent state stored for this webview.
       *
       * @remarks When running webview source code inside a web browser, setState will set the given
       * state using local storage (https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage).
       *
       * @param newState New persisted state. This must be a JSON serializable object. Can be retrieved
       * using {@link getState}.
       *
       * @return The new state.
       */
      setState(newState) {
        if (this.vsCodeApi) {
          return this.vsCodeApi.setState(newState);
        } else {
          localStorage.setItem("vscodeState", JSON.stringify(newState));
          return newState;
        }
      }
    }
    const vscode = new VSCodeAPIWrapper();
    function useWindowEvents(dispatch) {
      reactExports.useEffect(() => {
        const listener = (event) => {
          if (!toWebviewEventTypes.includes(event.data.type)) {
            return;
          }
          if (isDefined(event.data.type) && isDefined(event.data.payload)) {
            dispatch({
              type: event.data.type,
              payload: event.data.payload
            });
          }
        };
        window.addEventListener("message", listener);
        vscode.postMessage({ type: "getColorThemeMode" });
        vscode.postMessage({ type: "getEarlyConfig" });
        return () => {
          window.removeEventListener("message", listener);
        };
      }, []);
    }
    const appStateReducer = (state, action) => {
      switch (action.type) {
        case "workspaceName": {
          return {
            ...state,
            workspaceName: action.payload.workspaceName
          };
        }
        case "isLoggedInState": {
          return {
            ...state,
            isLoggedIn: action.payload.isLoggedIn,
            authMode: action.payload.authMode
          };
        }
        case "filesList": {
          return {
            ...state,
            filesList: action.payload.filesList,
            isFileListLoaded: true
          };
        }
        case "fileName": {
          return {
            ...state,
            fileName: action.payload.fileName
          };
        }
        case "fileTestablesList": {
          return {
            ...state,
            filesTestablesList: {
              ...state.filesTestablesList,
              [action.payload.path]: action.payload.testables
            }
          };
        }
        case "coverageMap": {
          return {
            ...state,
            coverageMap: action.payload.coverageMap,
            isCoverageLoaded: true
          };
        }
        case "coverageRefreshing": {
          return {
            ...state,
            isCoverageLoaded: false
          };
        }
        case "signInResponse": {
          return {
            ...state,
            signIn: action.payload
          };
        }
        case "resetSignIn": {
          return {
            ...state,
            signIn: {
              isLinkSent: false,
              error: void 0
            }
          };
        }
        case "testsFilesList": {
          return {
            ...state,
            testsFilesList: action.payload.testsFilesList
          };
        }
        case "gitChangedFilesList": {
          return {
            ...state,
            gitChangedFilesList: action.payload.gitChangedFilesList
          };
        }
        case "generateTestFilesStatus": {
          return {
            ...state,
            generateTestFilesStatus: action.payload.status
          };
        }
        case "onboardingCompleted": {
          return {
            ...state,
            isOnboardingCompleted: action.payload
          };
        }
        case "setEarlyConfig": {
          return {
            ...state,
            earlyConfig: action.payload
          };
        }
        case "shouldShowOnboardingPage": {
          return {
            ...state,
            shouldShowOnboardingPage: action.payload
          };
        }
        default: {
          return state;
        }
      }
    };
    const defaultState = {
      isLoggedIn: void 0,
      authMode: void 0,
      workspaceName: "",
      filesList: [],
      isFileListLoaded: false,
      fileName: void 0,
      coverageMap: {},
      isCoverageLoaded: false,
      filesTestablesList: {},
      testsFilesList: {},
      gitChangedFilesList: [],
      signIn: {
        isLinkSent: false,
        error: void 0
      },
      generateTestFilesStatus: {
        queued: [],
        processing: [],
        done: [],
        failed: [],
        areTestsProcessing: false
      },
      isOnboardingCompleted: true,
      earlyConfig: void 0,
      shouldShowOnboardingPage: void 0
    };
    const AppStateContext = reactExports.createContext({
      ...defaultState,
      dispatch: () => {
      }
    });
    const useAppStateContext = () => reactExports.useContext(AppStateContext);
    const AppStateProvider = ({ children: children2 }) => {
      const [state, dispatch] = reactExports.useReducer(appStateReducer, defaultState);
      useWindowEvents(dispatch);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(AppStateContext.Provider, { value: { ...state, dispatch }, children: children2 });
    };
    const isDev = false;
    const TEST_STRUCTURE_VARIANT = {
      SIBLING_FOLDER: "siblingFolder",
      ROOT_FOLDER: "rootFolder"
    };
    const DEPRECATED_TEST_STRUCTURE_VARIANT = {
      FLAT: "flat",
      FOLDER: "folder",
      TESTS_FOLDER: "testsFolder"
    };
    const TEST_FRAMEWORK = {
      JEST: "jest",
      MOCHA: "mocha"
    };
    const TEST_SUFFIX = {
      SPEC: "spec",
      TEST: "test"
    };
    const AUTH_MODE = {
      INPUT: "input",
      BUTTON: "button"
    };
    const TEST_FILE_NAME = {
      CAMEL_CASE: "camelCase",
      KEBAB_CASE: "kebabCase"
    };
    var string = {};
    Object.defineProperty(string, "__esModule", { value: true });
    string.isEmpty = isString_1 = string.isString = void 0;
    function isString$1(input) {
      return typeof input === "string";
    }
    var isString_1 = string.isString = isString$1;
    function isEmpty(input) {
      return input === "";
    }
    string.isEmpty = isEmpty;
    function r$1(e2) {
      var t2, f2, n2 = "";
      if ("string" == typeof e2 || "number" == typeof e2)
        n2 += e2;
      else if ("object" == typeof e2)
        if (Array.isArray(e2))
          for (t2 = 0; t2 < e2.length; t2++)
            e2[t2] && (f2 = r$1(e2[t2])) && (n2 && (n2 += " "), n2 += f2);
        else
          for (t2 in e2)
            e2[t2] && (n2 && (n2 += " "), n2 += t2);
      return n2;
    }
    function clsx() {
      for (var e2, t2, f2 = 0, n2 = ""; f2 < arguments.length; )
        (e2 = arguments[f2++]) && (t2 = r$1(e2)) && (n2 && (n2 += " "), n2 += t2);
      return n2;
    }
    const CLASS_PART_SEPARATOR = "-";
    function createClassUtils(config) {
      const classMap = createClassMap(config);
      const {
        conflictingClassGroups,
        conflictingClassGroupModifiers
      } = config;
      function getClassGroupId(className) {
        const classParts = className.split(CLASS_PART_SEPARATOR);
        if (classParts[0] === "" && classParts.length !== 1) {
          classParts.shift();
        }
        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
      }
      function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {
        const conflicts = conflictingClassGroups[classGroupId] || [];
        if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
          return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
        }
        return conflicts;
      }
      return {
        getClassGroupId,
        getConflictingClassGroupIds
      };
    }
    function getGroupRecursive(classParts, classPartObject) {
      var _a;
      if (classParts.length === 0) {
        return classPartObject.classGroupId;
      }
      const currentClassPart = classParts[0];
      const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
      const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
      if (classGroupFromNextClassPart) {
        return classGroupFromNextClassPart;
      }
      if (classPartObject.validators.length === 0) {
        return void 0;
      }
      const classRest = classParts.join(CLASS_PART_SEPARATOR);
      return (_a = classPartObject.validators.find(({
        validator
      }) => validator(classRest))) == null ? void 0 : _a.classGroupId;
    }
    const arbitraryPropertyRegex = /^\[(.+)\]$/;
    function getGroupIdForArbitraryProperty(className) {
      if (arbitraryPropertyRegex.test(className)) {
        const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
        const property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
        if (property) {
          return "arbitrary.." + property;
        }
      }
    }
    function createClassMap(config) {
      const {
        theme,
        prefix
      } = config;
      const classMap = {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      };
      const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
      prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {
        processClassesRecursively(classGroup, classMap, classGroupId, theme);
      });
      return classMap;
    }
    function processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {
      classGroup.forEach((classDefinition) => {
        if (typeof classDefinition === "string") {
          const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
          classPartObjectToEdit.classGroupId = classGroupId;
          return;
        }
        if (typeof classDefinition === "function") {
          if (isThemeGetter(classDefinition)) {
            processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
            return;
          }
          classPartObject.validators.push({
            validator: classDefinition,
            classGroupId
          });
          return;
        }
        Object.entries(classDefinition).forEach(([key, classGroup2]) => {
          processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
        });
      });
    }
    function getPart(classPartObject, path) {
      let currentClassPartObject = classPartObject;
      path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
        if (!currentClassPartObject.nextPart.has(pathPart)) {
          currentClassPartObject.nextPart.set(pathPart, {
            nextPart: /* @__PURE__ */ new Map(),
            validators: []
          });
        }
        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
      });
      return currentClassPartObject;
    }
    function isThemeGetter(func) {
      return func.isThemeGetter;
    }
    function getPrefixedClassGroupEntries(classGroupEntries, prefix) {
      if (!prefix) {
        return classGroupEntries;
      }
      return classGroupEntries.map(([classGroupId, classGroup]) => {
        const prefixedClassGroup = classGroup.map((classDefinition) => {
          if (typeof classDefinition === "string") {
            return prefix + classDefinition;
          }
          if (typeof classDefinition === "object") {
            return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));
          }
          return classDefinition;
        });
        return [classGroupId, prefixedClassGroup];
      });
    }
    function createLruCache(maxCacheSize) {
      if (maxCacheSize < 1) {
        return {
          get: () => void 0,
          set: () => {
          }
        };
      }
      let cacheSize = 0;
      let cache2 = /* @__PURE__ */ new Map();
      let previousCache = /* @__PURE__ */ new Map();
      function update(key, value) {
        cache2.set(key, value);
        cacheSize++;
        if (cacheSize > maxCacheSize) {
          cacheSize = 0;
          previousCache = cache2;
          cache2 = /* @__PURE__ */ new Map();
        }
      }
      return {
        get(key) {
          let value = cache2.get(key);
          if (value !== void 0) {
            return value;
          }
          if ((value = previousCache.get(key)) !== void 0) {
            update(key, value);
            return value;
          }
        },
        set(key, value) {
          if (cache2.has(key)) {
            cache2.set(key, value);
          } else {
            update(key, value);
          }
        }
      };
    }
    const IMPORTANT_MODIFIER = "!";
    function createSplitModifiers(config) {
      const separator = config.separator;
      const isSeparatorSingleCharacter = separator.length === 1;
      const firstSeparatorCharacter = separator[0];
      const separatorLength = separator.length;
      return function splitModifiers(className) {
        const modifiers = [];
        let bracketDepth = 0;
        let modifierStart = 0;
        let postfixModifierPosition;
        for (let index = 0; index < className.length; index++) {
          let currentCharacter = className[index];
          if (bracketDepth === 0) {
            if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {
              modifiers.push(className.slice(modifierStart, index));
              modifierStart = index + separatorLength;
              continue;
            }
            if (currentCharacter === "/") {
              postfixModifierPosition = index;
              continue;
            }
          }
          if (currentCharacter === "[") {
            bracketDepth++;
          } else if (currentCharacter === "]") {
            bracketDepth--;
          }
        }
        const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
        const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
        const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
        const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
        return {
          modifiers,
          hasImportantModifier,
          baseClassName,
          maybePostfixModifierPosition
        };
      };
    }
    function sortModifiers(modifiers) {
      if (modifiers.length <= 1) {
        return modifiers;
      }
      const sortedModifiers = [];
      let unsortedModifiers = [];
      modifiers.forEach((modifier) => {
        const isArbitraryVariant = modifier[0] === "[";
        if (isArbitraryVariant) {
          sortedModifiers.push(...unsortedModifiers.sort(), modifier);
          unsortedModifiers = [];
        } else {
          unsortedModifiers.push(modifier);
        }
      });
      sortedModifiers.push(...unsortedModifiers.sort());
      return sortedModifiers;
    }
    function createConfigUtils(config) {
      return {
        cache: createLruCache(config.cacheSize),
        splitModifiers: createSplitModifiers(config),
        ...createClassUtils(config)
      };
    }
    const SPLIT_CLASSES_REGEX = /\s+/;
    function mergeClassList(classList, configUtils) {
      const {
        splitModifiers,
        getClassGroupId,
        getConflictingClassGroupIds
      } = configUtils;
      const classGroupsInConflict = /* @__PURE__ */ new Set();
      return classList.trim().split(SPLIT_CLASSES_REGEX).map((originalClassName) => {
        const {
          modifiers,
          hasImportantModifier,
          baseClassName,
          maybePostfixModifierPosition
        } = splitModifiers(originalClassName);
        let classGroupId = getClassGroupId(maybePostfixModifierPosition ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
        let hasPostfixModifier = Boolean(maybePostfixModifierPosition);
        if (!classGroupId) {
          if (!maybePostfixModifierPosition) {
            return {
              isTailwindClass: false,
              originalClassName
            };
          }
          classGroupId = getClassGroupId(baseClassName);
          if (!classGroupId) {
            return {
              isTailwindClass: false,
              originalClassName
            };
          }
          hasPostfixModifier = false;
        }
        const variantModifier = sortModifiers(modifiers).join(":");
        const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
        return {
          isTailwindClass: true,
          modifierId,
          classGroupId,
          originalClassName,
          hasPostfixModifier
        };
      }).reverse().filter((parsed) => {
        if (!parsed.isTailwindClass) {
          return true;
        }
        const {
          modifierId,
          classGroupId,
          hasPostfixModifier
        } = parsed;
        const classId = modifierId + classGroupId;
        if (classGroupsInConflict.has(classId)) {
          return false;
        }
        classGroupsInConflict.add(classId);
        getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach((group) => classGroupsInConflict.add(modifierId + group));
        return true;
      }).reverse().map((parsed) => parsed.originalClassName).join(" ");
    }
    function twJoin() {
      let index = 0;
      let argument;
      let resolvedValue;
      let string2 = "";
      while (index < arguments.length) {
        if (argument = arguments[index++]) {
          if (resolvedValue = toValue(argument)) {
            string2 && (string2 += " ");
            string2 += resolvedValue;
          }
        }
      }
      return string2;
    }
    function toValue(mix) {
      if (typeof mix === "string") {
        return mix;
      }
      let resolvedValue;
      let string2 = "";
      for (let k2 = 0; k2 < mix.length; k2++) {
        if (mix[k2]) {
          if (resolvedValue = toValue(mix[k2])) {
            string2 && (string2 += " ");
            string2 += resolvedValue;
          }
        }
      }
      return string2;
    }
    function createTailwindMerge(createConfigFirst, ...createConfigRest) {
      let configUtils;
      let cacheGet;
      let cacheSet;
      let functionToCall = initTailwindMerge;
      function initTailwindMerge(classList) {
        const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
        configUtils = createConfigUtils(config);
        cacheGet = configUtils.cache.get;
        cacheSet = configUtils.cache.set;
        functionToCall = tailwindMerge;
        return tailwindMerge(classList);
      }
      function tailwindMerge(classList) {
        const cachedResult = cacheGet(classList);
        if (cachedResult) {
          return cachedResult;
        }
        const result = mergeClassList(classList, configUtils);
        cacheSet(classList, result);
        return result;
      }
      return function callTailwindMerge() {
        return functionToCall(twJoin.apply(null, arguments));
      };
    }
    function fromTheme(key) {
      const themeGetter = (theme) => theme[key] || [];
      themeGetter.isThemeGetter = true;
      return themeGetter;
    }
    const arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
    const fractionRegex = /^\d+\/\d+$/;
    const stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
    const tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
    const lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
    const shadowRegex = /^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
    const imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
    function isLength$1(value) {
      return isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);
    }
    function isArbitraryLength(value) {
      return getIsArbitraryValue(value, "length", isLengthOnly);
    }
    function isNumber(value) {
      return Boolean(value) && !Number.isNaN(Number(value));
    }
    function isArbitraryNumber(value) {
      return getIsArbitraryValue(value, "number", isNumber);
    }
    function isInteger$1(value) {
      return Boolean(value) && Number.isInteger(Number(value));
    }
    function isPercent(value) {
      return value.endsWith("%") && isNumber(value.slice(0, -1));
    }
    function isArbitraryValue(value) {
      return arbitraryValueRegex.test(value);
    }
    function isTshirtSize(value) {
      return tshirtUnitRegex.test(value);
    }
    const sizeLabels = /* @__PURE__ */ new Set(["length", "size", "percentage"]);
    function isArbitrarySize(value) {
      return getIsArbitraryValue(value, sizeLabels, isNever);
    }
    function isArbitraryPosition(value) {
      return getIsArbitraryValue(value, "position", isNever);
    }
    const imageLabels = /* @__PURE__ */ new Set(["image", "url"]);
    function isArbitraryImage(value) {
      return getIsArbitraryValue(value, imageLabels, isImage);
    }
    function isArbitraryShadow(value) {
      return getIsArbitraryValue(value, "", isShadow);
    }
    function isAny() {
      return true;
    }
    function getIsArbitraryValue(value, label, testValue) {
      const result = arbitraryValueRegex.exec(value);
      if (result) {
        if (result[1]) {
          return typeof label === "string" ? result[1] === label : label.has(result[1]);
        }
        return testValue(result[2]);
      }
      return false;
    }
    function isLengthOnly(value) {
      return lengthUnitRegex.test(value);
    }
    function isNever() {
      return false;
    }
    function isShadow(value) {
      return shadowRegex.test(value);
    }
    function isImage(value) {
      return imageRegex.test(value);
    }
    function getDefaultConfig() {
      const colors = fromTheme("colors");
      const spacing = fromTheme("spacing");
      const blur = fromTheme("blur");
      const brightness = fromTheme("brightness");
      const borderColor = fromTheme("borderColor");
      const borderRadius = fromTheme("borderRadius");
      const borderSpacing = fromTheme("borderSpacing");
      const borderWidth2 = fromTheme("borderWidth");
      const contrast = fromTheme("contrast");
      const grayscale = fromTheme("grayscale");
      const hueRotate = fromTheme("hueRotate");
      const invert = fromTheme("invert");
      const gap = fromTheme("gap");
      const gradientColorStops = fromTheme("gradientColorStops");
      const gradientColorStopPositions = fromTheme("gradientColorStopPositions");
      const inset = fromTheme("inset");
      const margin = fromTheme("margin");
      const opacity = fromTheme("opacity");
      const padding = fromTheme("padding");
      const saturate = fromTheme("saturate");
      const scale = fromTheme("scale");
      const sepia = fromTheme("sepia");
      const skew = fromTheme("skew");
      const space = fromTheme("space");
      const translate2 = fromTheme("translate");
      const getOverscroll = () => ["auto", "contain", "none"];
      const getOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"];
      const getSpacingWithAutoAndArbitrary = () => ["auto", isArbitraryValue, spacing];
      const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];
      const getLengthWithEmptyAndArbitrary = () => ["", isLength$1, isArbitraryLength];
      const getNumberWithAutoAndArbitrary = () => ["auto", isNumber, isArbitraryValue];
      const getPositions = () => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
      const getLineStyles = () => ["solid", "dashed", "dotted", "double", "none"];
      const getBlendModes = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity", "plus-lighter"];
      const getAlign = () => ["start", "end", "center", "between", "around", "evenly", "stretch"];
      const getZeroAndEmpty = () => ["", "0", isArbitraryValue];
      const getBreaks = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
      const getNumber = () => [isNumber, isArbitraryNumber];
      const getNumberAndArbitrary = () => [isNumber, isArbitraryValue];
      return {
        cacheSize: 500,
        separator: ":",
        theme: {
          colors: [isAny],
          spacing: [isLength$1, isArbitraryLength],
          blur: ["none", "", isTshirtSize, isArbitraryValue],
          brightness: getNumber(),
          borderColor: [colors],
          borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
          borderSpacing: getSpacingWithArbitrary(),
          borderWidth: getLengthWithEmptyAndArbitrary(),
          contrast: getNumber(),
          grayscale: getZeroAndEmpty(),
          hueRotate: getNumberAndArbitrary(),
          invert: getZeroAndEmpty(),
          gap: getSpacingWithArbitrary(),
          gradientColorStops: [colors],
          gradientColorStopPositions: [isPercent, isArbitraryLength],
          inset: getSpacingWithAutoAndArbitrary(),
          margin: getSpacingWithAutoAndArbitrary(),
          opacity: getNumber(),
          padding: getSpacingWithArbitrary(),
          saturate: getNumber(),
          scale: getNumber(),
          sepia: getZeroAndEmpty(),
          skew: getNumberAndArbitrary(),
          space: getSpacingWithArbitrary(),
          translate: getSpacingWithArbitrary()
        },
        classGroups: {
          // Layout
          /**
           * Aspect Ratio
           * @see https://tailwindcss.com/docs/aspect-ratio
           */
          aspect: [{
            aspect: ["auto", "square", "video", isArbitraryValue]
          }],
          /**
           * Container
           * @see https://tailwindcss.com/docs/container
           */
          container: ["container"],
          /**
           * Columns
           * @see https://tailwindcss.com/docs/columns
           */
          columns: [{
            columns: [isTshirtSize]
          }],
          /**
           * Break After
           * @see https://tailwindcss.com/docs/break-after
           */
          "break-after": [{
            "break-after": getBreaks()
          }],
          /**
           * Break Before
           * @see https://tailwindcss.com/docs/break-before
           */
          "break-before": [{
            "break-before": getBreaks()
          }],
          /**
           * Break Inside
           * @see https://tailwindcss.com/docs/break-inside
           */
          "break-inside": [{
            "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
          }],
          /**
           * Box Decoration Break
           * @see https://tailwindcss.com/docs/box-decoration-break
           */
          "box-decoration": [{
            "box-decoration": ["slice", "clone"]
          }],
          /**
           * Box Sizing
           * @see https://tailwindcss.com/docs/box-sizing
           */
          box: [{
            box: ["border", "content"]
          }],
          /**
           * Display
           * @see https://tailwindcss.com/docs/display
           */
          display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
          /**
           * Floats
           * @see https://tailwindcss.com/docs/float
           */
          float: [{
            float: ["right", "left", "none"]
          }],
          /**
           * Clear
           * @see https://tailwindcss.com/docs/clear
           */
          clear: [{
            clear: ["left", "right", "both", "none"]
          }],
          /**
           * Isolation
           * @see https://tailwindcss.com/docs/isolation
           */
          isolation: ["isolate", "isolation-auto"],
          /**
           * Object Fit
           * @see https://tailwindcss.com/docs/object-fit
           */
          "object-fit": [{
            object: ["contain", "cover", "fill", "none", "scale-down"]
          }],
          /**
           * Object Position
           * @see https://tailwindcss.com/docs/object-position
           */
          "object-position": [{
            object: [...getPositions(), isArbitraryValue]
          }],
          /**
           * Overflow
           * @see https://tailwindcss.com/docs/overflow
           */
          overflow: [{
            overflow: getOverflow()
          }],
          /**
           * Overflow X
           * @see https://tailwindcss.com/docs/overflow
           */
          "overflow-x": [{
            "overflow-x": getOverflow()
          }],
          /**
           * Overflow Y
           * @see https://tailwindcss.com/docs/overflow
           */
          "overflow-y": [{
            "overflow-y": getOverflow()
          }],
          /**
           * Overscroll Behavior
           * @see https://tailwindcss.com/docs/overscroll-behavior
           */
          overscroll: [{
            overscroll: getOverscroll()
          }],
          /**
           * Overscroll Behavior X
           * @see https://tailwindcss.com/docs/overscroll-behavior
           */
          "overscroll-x": [{
            "overscroll-x": getOverscroll()
          }],
          /**
           * Overscroll Behavior Y
           * @see https://tailwindcss.com/docs/overscroll-behavior
           */
          "overscroll-y": [{
            "overscroll-y": getOverscroll()
          }],
          /**
           * Position
           * @see https://tailwindcss.com/docs/position
           */
          position: ["static", "fixed", "absolute", "relative", "sticky"],
          /**
           * Top / Right / Bottom / Left
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          inset: [{
            inset: [inset]
          }],
          /**
           * Right / Left
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          "inset-x": [{
            "inset-x": [inset]
          }],
          /**
           * Top / Bottom
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          "inset-y": [{
            "inset-y": [inset]
          }],
          /**
           * Start
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          start: [{
            start: [inset]
          }],
          /**
           * End
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          end: [{
            end: [inset]
          }],
          /**
           * Top
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          top: [{
            top: [inset]
          }],
          /**
           * Right
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          right: [{
            right: [inset]
          }],
          /**
           * Bottom
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          bottom: [{
            bottom: [inset]
          }],
          /**
           * Left
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          left: [{
            left: [inset]
          }],
          /**
           * Visibility
           * @see https://tailwindcss.com/docs/visibility
           */
          visibility: ["visible", "invisible", "collapse"],
          /**
           * Z-Index
           * @see https://tailwindcss.com/docs/z-index
           */
          z: [{
            z: ["auto", isInteger$1, isArbitraryValue]
          }],
          // Flexbox and Grid
          /**
           * Flex Basis
           * @see https://tailwindcss.com/docs/flex-basis
           */
          basis: [{
            basis: getSpacingWithAutoAndArbitrary()
          }],
          /**
           * Flex Direction
           * @see https://tailwindcss.com/docs/flex-direction
           */
          "flex-direction": [{
            flex: ["row", "row-reverse", "col", "col-reverse"]
          }],
          /**
           * Flex Wrap
           * @see https://tailwindcss.com/docs/flex-wrap
           */
          "flex-wrap": [{
            flex: ["wrap", "wrap-reverse", "nowrap"]
          }],
          /**
           * Flex
           * @see https://tailwindcss.com/docs/flex
           */
          flex: [{
            flex: ["1", "auto", "initial", "none", isArbitraryValue]
          }],
          /**
           * Flex Grow
           * @see https://tailwindcss.com/docs/flex-grow
           */
          grow: [{
            grow: getZeroAndEmpty()
          }],
          /**
           * Flex Shrink
           * @see https://tailwindcss.com/docs/flex-shrink
           */
          shrink: [{
            shrink: getZeroAndEmpty()
          }],
          /**
           * Order
           * @see https://tailwindcss.com/docs/order
           */
          order: [{
            order: ["first", "last", "none", isInteger$1, isArbitraryValue]
          }],
          /**
           * Grid Template Columns
           * @see https://tailwindcss.com/docs/grid-template-columns
           */
          "grid-cols": [{
            "grid-cols": [isAny]
          }],
          /**
           * Grid Column Start / End
           * @see https://tailwindcss.com/docs/grid-column
           */
          "col-start-end": [{
            col: ["auto", {
              span: ["full", isInteger$1, isArbitraryValue]
            }, isArbitraryValue]
          }],
          /**
           * Grid Column Start
           * @see https://tailwindcss.com/docs/grid-column
           */
          "col-start": [{
            "col-start": getNumberWithAutoAndArbitrary()
          }],
          /**
           * Grid Column End
           * @see https://tailwindcss.com/docs/grid-column
           */
          "col-end": [{
            "col-end": getNumberWithAutoAndArbitrary()
          }],
          /**
           * Grid Template Rows
           * @see https://tailwindcss.com/docs/grid-template-rows
           */
          "grid-rows": [{
            "grid-rows": [isAny]
          }],
          /**
           * Grid Row Start / End
           * @see https://tailwindcss.com/docs/grid-row
           */
          "row-start-end": [{
            row: ["auto", {
              span: [isInteger$1, isArbitraryValue]
            }, isArbitraryValue]
          }],
          /**
           * Grid Row Start
           * @see https://tailwindcss.com/docs/grid-row
           */
          "row-start": [{
            "row-start": getNumberWithAutoAndArbitrary()
          }],
          /**
           * Grid Row End
           * @see https://tailwindcss.com/docs/grid-row
           */
          "row-end": [{
            "row-end": getNumberWithAutoAndArbitrary()
          }],
          /**
           * Grid Auto Flow
           * @see https://tailwindcss.com/docs/grid-auto-flow
           */
          "grid-flow": [{
            "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
          }],
          /**
           * Grid Auto Columns
           * @see https://tailwindcss.com/docs/grid-auto-columns
           */
          "auto-cols": [{
            "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
          }],
          /**
           * Grid Auto Rows
           * @see https://tailwindcss.com/docs/grid-auto-rows
           */
          "auto-rows": [{
            "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
          }],
          /**
           * Gap
           * @see https://tailwindcss.com/docs/gap
           */
          gap: [{
            gap: [gap]
          }],
          /**
           * Gap X
           * @see https://tailwindcss.com/docs/gap
           */
          "gap-x": [{
            "gap-x": [gap]
          }],
          /**
           * Gap Y
           * @see https://tailwindcss.com/docs/gap
           */
          "gap-y": [{
            "gap-y": [gap]
          }],
          /**
           * Justify Content
           * @see https://tailwindcss.com/docs/justify-content
           */
          "justify-content": [{
            justify: ["normal", ...getAlign()]
          }],
          /**
           * Justify Items
           * @see https://tailwindcss.com/docs/justify-items
           */
          "justify-items": [{
            "justify-items": ["start", "end", "center", "stretch"]
          }],
          /**
           * Justify Self
           * @see https://tailwindcss.com/docs/justify-self
           */
          "justify-self": [{
            "justify-self": ["auto", "start", "end", "center", "stretch"]
          }],
          /**
           * Align Content
           * @see https://tailwindcss.com/docs/align-content
           */
          "align-content": [{
            content: ["normal", ...getAlign(), "baseline"]
          }],
          /**
           * Align Items
           * @see https://tailwindcss.com/docs/align-items
           */
          "align-items": [{
            items: ["start", "end", "center", "baseline", "stretch"]
          }],
          /**
           * Align Self
           * @see https://tailwindcss.com/docs/align-self
           */
          "align-self": [{
            self: ["auto", "start", "end", "center", "stretch", "baseline"]
          }],
          /**
           * Place Content
           * @see https://tailwindcss.com/docs/place-content
           */
          "place-content": [{
            "place-content": [...getAlign(), "baseline"]
          }],
          /**
           * Place Items
           * @see https://tailwindcss.com/docs/place-items
           */
          "place-items": [{
            "place-items": ["start", "end", "center", "baseline", "stretch"]
          }],
          /**
           * Place Self
           * @see https://tailwindcss.com/docs/place-self
           */
          "place-self": [{
            "place-self": ["auto", "start", "end", "center", "stretch"]
          }],
          // Spacing
          /**
           * Padding
           * @see https://tailwindcss.com/docs/padding
           */
          p: [{
            p: [padding]
          }],
          /**
           * Padding X
           * @see https://tailwindcss.com/docs/padding
           */
          px: [{
            px: [padding]
          }],
          /**
           * Padding Y
           * @see https://tailwindcss.com/docs/padding
           */
          py: [{
            py: [padding]
          }],
          /**
           * Padding Start
           * @see https://tailwindcss.com/docs/padding
           */
          ps: [{
            ps: [padding]
          }],
          /**
           * Padding End
           * @see https://tailwindcss.com/docs/padding
           */
          pe: [{
            pe: [padding]
          }],
          /**
           * Padding Top
           * @see https://tailwindcss.com/docs/padding
           */
          pt: [{
            pt: [padding]
          }],
          /**
           * Padding Right
           * @see https://tailwindcss.com/docs/padding
           */
          pr: [{
            pr: [padding]
          }],
          /**
           * Padding Bottom
           * @see https://tailwindcss.com/docs/padding
           */
          pb: [{
            pb: [padding]
          }],
          /**
           * Padding Left
           * @see https://tailwindcss.com/docs/padding
           */
          pl: [{
            pl: [padding]
          }],
          /**
           * Margin
           * @see https://tailwindcss.com/docs/margin
           */
          m: [{
            m: [margin]
          }],
          /**
           * Margin X
           * @see https://tailwindcss.com/docs/margin
           */
          mx: [{
            mx: [margin]
          }],
          /**
           * Margin Y
           * @see https://tailwindcss.com/docs/margin
           */
          my: [{
            my: [margin]
          }],
          /**
           * Margin Start
           * @see https://tailwindcss.com/docs/margin
           */
          ms: [{
            ms: [margin]
          }],
          /**
           * Margin End
           * @see https://tailwindcss.com/docs/margin
           */
          me: [{
            me: [margin]
          }],
          /**
           * Margin Top
           * @see https://tailwindcss.com/docs/margin
           */
          mt: [{
            mt: [margin]
          }],
          /**
           * Margin Right
           * @see https://tailwindcss.com/docs/margin
           */
          mr: [{
            mr: [margin]
          }],
          /**
           * Margin Bottom
           * @see https://tailwindcss.com/docs/margin
           */
          mb: [{
            mb: [margin]
          }],
          /**
           * Margin Left
           * @see https://tailwindcss.com/docs/margin
           */
          ml: [{
            ml: [margin]
          }],
          /**
           * Space Between X
           * @see https://tailwindcss.com/docs/space
           */
          "space-x": [{
            "space-x": [space]
          }],
          /**
           * Space Between X Reverse
           * @see https://tailwindcss.com/docs/space
           */
          "space-x-reverse": ["space-x-reverse"],
          /**
           * Space Between Y
           * @see https://tailwindcss.com/docs/space
           */
          "space-y": [{
            "space-y": [space]
          }],
          /**
           * Space Between Y Reverse
           * @see https://tailwindcss.com/docs/space
           */
          "space-y-reverse": ["space-y-reverse"],
          // Sizing
          /**
           * Width
           * @see https://tailwindcss.com/docs/width
           */
          w: [{
            w: ["auto", "min", "max", "fit", isArbitraryValue, spacing]
          }],
          /**
           * Min-Width
           * @see https://tailwindcss.com/docs/min-width
           */
          "min-w": [{
            "min-w": ["min", "max", "fit", isArbitraryValue, isLength$1]
          }],
          /**
           * Max-Width
           * @see https://tailwindcss.com/docs/max-width
           */
          "max-w": [{
            "max-w": ["0", "none", "full", "min", "max", "fit", "prose", {
              screen: [isTshirtSize]
            }, isTshirtSize, isArbitraryValue]
          }],
          /**
           * Height
           * @see https://tailwindcss.com/docs/height
           */
          h: [{
            h: [isArbitraryValue, spacing, "auto", "min", "max", "fit"]
          }],
          /**
           * Min-Height
           * @see https://tailwindcss.com/docs/min-height
           */
          "min-h": [{
            "min-h": ["min", "max", "fit", isLength$1, isArbitraryValue]
          }],
          /**
           * Max-Height
           * @see https://tailwindcss.com/docs/max-height
           */
          "max-h": [{
            "max-h": [isArbitraryValue, spacing, "min", "max", "fit"]
          }],
          // Typography
          /**
           * Font Size
           * @see https://tailwindcss.com/docs/font-size
           */
          "font-size": [{
            text: ["base", isTshirtSize, isArbitraryLength]
          }],
          /**
           * Font Smoothing
           * @see https://tailwindcss.com/docs/font-smoothing
           */
          "font-smoothing": ["antialiased", "subpixel-antialiased"],
          /**
           * Font Style
           * @see https://tailwindcss.com/docs/font-style
           */
          "font-style": ["italic", "not-italic"],
          /**
           * Font Weight
           * @see https://tailwindcss.com/docs/font-weight
           */
          "font-weight": [{
            font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
          }],
          /**
           * Font Family
           * @see https://tailwindcss.com/docs/font-family
           */
          "font-family": [{
            font: [isAny]
          }],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-normal": ["normal-nums"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-ordinal": ["ordinal"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-slashed-zero": ["slashed-zero"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-figure": ["lining-nums", "oldstyle-nums"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-spacing": ["proportional-nums", "tabular-nums"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
          /**
           * Letter Spacing
           * @see https://tailwindcss.com/docs/letter-spacing
           */
          tracking: [{
            tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
          }],
          /**
           * Line Clamp
           * @see https://tailwindcss.com/docs/line-clamp
           */
          "line-clamp": [{
            "line-clamp": ["none", isNumber, isArbitraryNumber]
          }],
          /**
           * Line Height
           * @see https://tailwindcss.com/docs/line-height
           */
          leading: [{
            leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isLength$1, isArbitraryValue]
          }],
          /**
           * List Style Image
           * @see https://tailwindcss.com/docs/list-style-image
           */
          "list-image": [{
            "list-image": ["none", isArbitraryValue]
          }],
          /**
           * List Style Type
           * @see https://tailwindcss.com/docs/list-style-type
           */
          "list-style-type": [{
            list: ["none", "disc", "decimal", isArbitraryValue]
          }],
          /**
           * List Style Position
           * @see https://tailwindcss.com/docs/list-style-position
           */
          "list-style-position": [{
            list: ["inside", "outside"]
          }],
          /**
           * Placeholder Color
           * @deprecated since Tailwind CSS v3.0.0
           * @see https://tailwindcss.com/docs/placeholder-color
           */
          "placeholder-color": [{
            placeholder: [colors]
          }],
          /**
           * Placeholder Opacity
           * @see https://tailwindcss.com/docs/placeholder-opacity
           */
          "placeholder-opacity": [{
            "placeholder-opacity": [opacity]
          }],
          /**
           * Text Alignment
           * @see https://tailwindcss.com/docs/text-align
           */
          "text-alignment": [{
            text: ["left", "center", "right", "justify", "start", "end"]
          }],
          /**
           * Text Color
           * @see https://tailwindcss.com/docs/text-color
           */
          "text-color": [{
            text: [colors]
          }],
          /**
           * Text Opacity
           * @see https://tailwindcss.com/docs/text-opacity
           */
          "text-opacity": [{
            "text-opacity": [opacity]
          }],
          /**
           * Text Decoration
           * @see https://tailwindcss.com/docs/text-decoration
           */
          "text-decoration": ["underline", "overline", "line-through", "no-underline"],
          /**
           * Text Decoration Style
           * @see https://tailwindcss.com/docs/text-decoration-style
           */
          "text-decoration-style": [{
            decoration: [...getLineStyles(), "wavy"]
          }],
          /**
           * Text Decoration Thickness
           * @see https://tailwindcss.com/docs/text-decoration-thickness
           */
          "text-decoration-thickness": [{
            decoration: ["auto", "from-font", isLength$1, isArbitraryLength]
          }],
          /**
           * Text Underline Offset
           * @see https://tailwindcss.com/docs/text-underline-offset
           */
          "underline-offset": [{
            "underline-offset": ["auto", isLength$1, isArbitraryValue]
          }],
          /**
           * Text Decoration Color
           * @see https://tailwindcss.com/docs/text-decoration-color
           */
          "text-decoration-color": [{
            decoration: [colors]
          }],
          /**
           * Text Transform
           * @see https://tailwindcss.com/docs/text-transform
           */
          "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
          /**
           * Text Overflow
           * @see https://tailwindcss.com/docs/text-overflow
           */
          "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
          /**
           * Text Indent
           * @see https://tailwindcss.com/docs/text-indent
           */
          indent: [{
            indent: getSpacingWithArbitrary()
          }],
          /**
           * Vertical Alignment
           * @see https://tailwindcss.com/docs/vertical-align
           */
          "vertical-align": [{
            align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
          }],
          /**
           * Whitespace
           * @see https://tailwindcss.com/docs/whitespace
           */
          whitespace: [{
            whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
          }],
          /**
           * Word Break
           * @see https://tailwindcss.com/docs/word-break
           */
          break: [{
            break: ["normal", "words", "all", "keep"]
          }],
          /**
           * Hyphens
           * @see https://tailwindcss.com/docs/hyphens
           */
          hyphens: [{
            hyphens: ["none", "manual", "auto"]
          }],
          /**
           * Content
           * @see https://tailwindcss.com/docs/content
           */
          content: [{
            content: ["none", isArbitraryValue]
          }],
          // Backgrounds
          /**
           * Background Attachment
           * @see https://tailwindcss.com/docs/background-attachment
           */
          "bg-attachment": [{
            bg: ["fixed", "local", "scroll"]
          }],
          /**
           * Background Clip
           * @see https://tailwindcss.com/docs/background-clip
           */
          "bg-clip": [{
            "bg-clip": ["border", "padding", "content", "text"]
          }],
          /**
           * Background Opacity
           * @deprecated since Tailwind CSS v3.0.0
           * @see https://tailwindcss.com/docs/background-opacity
           */
          "bg-opacity": [{
            "bg-opacity": [opacity]
          }],
          /**
           * Background Origin
           * @see https://tailwindcss.com/docs/background-origin
           */
          "bg-origin": [{
            "bg-origin": ["border", "padding", "content"]
          }],
          /**
           * Background Position
           * @see https://tailwindcss.com/docs/background-position
           */
          "bg-position": [{
            bg: [...getPositions(), isArbitraryPosition]
          }],
          /**
           * Background Repeat
           * @see https://tailwindcss.com/docs/background-repeat
           */
          "bg-repeat": [{
            bg: ["no-repeat", {
              repeat: ["", "x", "y", "round", "space"]
            }]
          }],
          /**
           * Background Size
           * @see https://tailwindcss.com/docs/background-size
           */
          "bg-size": [{
            bg: ["auto", "cover", "contain", isArbitrarySize]
          }],
          /**
           * Background Image
           * @see https://tailwindcss.com/docs/background-image
           */
          "bg-image": [{
            bg: ["none", {
              "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
            }, isArbitraryImage]
          }],
          /**
           * Background Color
           * @see https://tailwindcss.com/docs/background-color
           */
          "bg-color": [{
            bg: [colors]
          }],
          /**
           * Gradient Color Stops From Position
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-from-pos": [{
            from: [gradientColorStopPositions]
          }],
          /**
           * Gradient Color Stops Via Position
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-via-pos": [{
            via: [gradientColorStopPositions]
          }],
          /**
           * Gradient Color Stops To Position
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-to-pos": [{
            to: [gradientColorStopPositions]
          }],
          /**
           * Gradient Color Stops From
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-from": [{
            from: [gradientColorStops]
          }],
          /**
           * Gradient Color Stops Via
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-via": [{
            via: [gradientColorStops]
          }],
          /**
           * Gradient Color Stops To
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-to": [{
            to: [gradientColorStops]
          }],
          // Borders
          /**
           * Border Radius
           * @see https://tailwindcss.com/docs/border-radius
           */
          rounded: [{
            rounded: [borderRadius]
          }],
          /**
           * Border Radius Start
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-s": [{
            "rounded-s": [borderRadius]
          }],
          /**
           * Border Radius End
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-e": [{
            "rounded-e": [borderRadius]
          }],
          /**
           * Border Radius Top
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-t": [{
            "rounded-t": [borderRadius]
          }],
          /**
           * Border Radius Right
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-r": [{
            "rounded-r": [borderRadius]
          }],
          /**
           * Border Radius Bottom
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-b": [{
            "rounded-b": [borderRadius]
          }],
          /**
           * Border Radius Left
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-l": [{
            "rounded-l": [borderRadius]
          }],
          /**
           * Border Radius Start Start
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-ss": [{
            "rounded-ss": [borderRadius]
          }],
          /**
           * Border Radius Start End
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-se": [{
            "rounded-se": [borderRadius]
          }],
          /**
           * Border Radius End End
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-ee": [{
            "rounded-ee": [borderRadius]
          }],
          /**
           * Border Radius End Start
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-es": [{
            "rounded-es": [borderRadius]
          }],
          /**
           * Border Radius Top Left
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-tl": [{
            "rounded-tl": [borderRadius]
          }],
          /**
           * Border Radius Top Right
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-tr": [{
            "rounded-tr": [borderRadius]
          }],
          /**
           * Border Radius Bottom Right
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-br": [{
            "rounded-br": [borderRadius]
          }],
          /**
           * Border Radius Bottom Left
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-bl": [{
            "rounded-bl": [borderRadius]
          }],
          /**
           * Border Width
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w": [{
            border: [borderWidth2]
          }],
          /**
           * Border Width X
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-x": [{
            "border-x": [borderWidth2]
          }],
          /**
           * Border Width Y
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-y": [{
            "border-y": [borderWidth2]
          }],
          /**
           * Border Width Start
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-s": [{
            "border-s": [borderWidth2]
          }],
          /**
           * Border Width End
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-e": [{
            "border-e": [borderWidth2]
          }],
          /**
           * Border Width Top
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-t": [{
            "border-t": [borderWidth2]
          }],
          /**
           * Border Width Right
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-r": [{
            "border-r": [borderWidth2]
          }],
          /**
           * Border Width Bottom
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-b": [{
            "border-b": [borderWidth2]
          }],
          /**
           * Border Width Left
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-l": [{
            "border-l": [borderWidth2]
          }],
          /**
           * Border Opacity
           * @see https://tailwindcss.com/docs/border-opacity
           */
          "border-opacity": [{
            "border-opacity": [opacity]
          }],
          /**
           * Border Style
           * @see https://tailwindcss.com/docs/border-style
           */
          "border-style": [{
            border: [...getLineStyles(), "hidden"]
          }],
          /**
           * Divide Width X
           * @see https://tailwindcss.com/docs/divide-width
           */
          "divide-x": [{
            "divide-x": [borderWidth2]
          }],
          /**
           * Divide Width X Reverse
           * @see https://tailwindcss.com/docs/divide-width
           */
          "divide-x-reverse": ["divide-x-reverse"],
          /**
           * Divide Width Y
           * @see https://tailwindcss.com/docs/divide-width
           */
          "divide-y": [{
            "divide-y": [borderWidth2]
          }],
          /**
           * Divide Width Y Reverse
           * @see https://tailwindcss.com/docs/divide-width
           */
          "divide-y-reverse": ["divide-y-reverse"],
          /**
           * Divide Opacity
           * @see https://tailwindcss.com/docs/divide-opacity
           */
          "divide-opacity": [{
            "divide-opacity": [opacity]
          }],
          /**
           * Divide Style
           * @see https://tailwindcss.com/docs/divide-style
           */
          "divide-style": [{
            divide: getLineStyles()
          }],
          /**
           * Border Color
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color": [{
            border: [borderColor]
          }],
          /**
           * Border Color X
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-x": [{
            "border-x": [borderColor]
          }],
          /**
           * Border Color Y
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-y": [{
            "border-y": [borderColor]
          }],
          /**
           * Border Color Top
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-t": [{
            "border-t": [borderColor]
          }],
          /**
           * Border Color Right
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-r": [{
            "border-r": [borderColor]
          }],
          /**
           * Border Color Bottom
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-b": [{
            "border-b": [borderColor]
          }],
          /**
           * Border Color Left
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-l": [{
            "border-l": [borderColor]
          }],
          /**
           * Divide Color
           * @see https://tailwindcss.com/docs/divide-color
           */
          "divide-color": [{
            divide: [borderColor]
          }],
          /**
           * Outline Style
           * @see https://tailwindcss.com/docs/outline-style
           */
          "outline-style": [{
            outline: ["", ...getLineStyles()]
          }],
          /**
           * Outline Offset
           * @see https://tailwindcss.com/docs/outline-offset
           */
          "outline-offset": [{
            "outline-offset": [isLength$1, isArbitraryValue]
          }],
          /**
           * Outline Width
           * @see https://tailwindcss.com/docs/outline-width
           */
          "outline-w": [{
            outline: [isLength$1, isArbitraryLength]
          }],
          /**
           * Outline Color
           * @see https://tailwindcss.com/docs/outline-color
           */
          "outline-color": [{
            outline: [colors]
          }],
          /**
           * Ring Width
           * @see https://tailwindcss.com/docs/ring-width
           */
          "ring-w": [{
            ring: getLengthWithEmptyAndArbitrary()
          }],
          /**
           * Ring Width Inset
           * @see https://tailwindcss.com/docs/ring-width
           */
          "ring-w-inset": ["ring-inset"],
          /**
           * Ring Color
           * @see https://tailwindcss.com/docs/ring-color
           */
          "ring-color": [{
            ring: [colors]
          }],
          /**
           * Ring Opacity
           * @see https://tailwindcss.com/docs/ring-opacity
           */
          "ring-opacity": [{
            "ring-opacity": [opacity]
          }],
          /**
           * Ring Offset Width
           * @see https://tailwindcss.com/docs/ring-offset-width
           */
          "ring-offset-w": [{
            "ring-offset": [isLength$1, isArbitraryLength]
          }],
          /**
           * Ring Offset Color
           * @see https://tailwindcss.com/docs/ring-offset-color
           */
          "ring-offset-color": [{
            "ring-offset": [colors]
          }],
          // Effects
          /**
           * Box Shadow
           * @see https://tailwindcss.com/docs/box-shadow
           */
          shadow: [{
            shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
          }],
          /**
           * Box Shadow Color
           * @see https://tailwindcss.com/docs/box-shadow-color
           */
          "shadow-color": [{
            shadow: [isAny]
          }],
          /**
           * Opacity
           * @see https://tailwindcss.com/docs/opacity
           */
          opacity: [{
            opacity: [opacity]
          }],
          /**
           * Mix Blend Mode
           * @see https://tailwindcss.com/docs/mix-blend-mode
           */
          "mix-blend": [{
            "mix-blend": getBlendModes()
          }],
          /**
           * Background Blend Mode
           * @see https://tailwindcss.com/docs/background-blend-mode
           */
          "bg-blend": [{
            "bg-blend": getBlendModes()
          }],
          // Filters
          /**
           * Filter
           * @deprecated since Tailwind CSS v3.0.0
           * @see https://tailwindcss.com/docs/filter
           */
          filter: [{
            filter: ["", "none"]
          }],
          /**
           * Blur
           * @see https://tailwindcss.com/docs/blur
           */
          blur: [{
            blur: [blur]
          }],
          /**
           * Brightness
           * @see https://tailwindcss.com/docs/brightness
           */
          brightness: [{
            brightness: [brightness]
          }],
          /**
           * Contrast
           * @see https://tailwindcss.com/docs/contrast
           */
          contrast: [{
            contrast: [contrast]
          }],
          /**
           * Drop Shadow
           * @see https://tailwindcss.com/docs/drop-shadow
           */
          "drop-shadow": [{
            "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
          }],
          /**
           * Grayscale
           * @see https://tailwindcss.com/docs/grayscale
           */
          grayscale: [{
            grayscale: [grayscale]
          }],
          /**
           * Hue Rotate
           * @see https://tailwindcss.com/docs/hue-rotate
           */
          "hue-rotate": [{
            "hue-rotate": [hueRotate]
          }],
          /**
           * Invert
           * @see https://tailwindcss.com/docs/invert
           */
          invert: [{
            invert: [invert]
          }],
          /**
           * Saturate
           * @see https://tailwindcss.com/docs/saturate
           */
          saturate: [{
            saturate: [saturate]
          }],
          /**
           * Sepia
           * @see https://tailwindcss.com/docs/sepia
           */
          sepia: [{
            sepia: [sepia]
          }],
          /**
           * Backdrop Filter
           * @deprecated since Tailwind CSS v3.0.0
           * @see https://tailwindcss.com/docs/backdrop-filter
           */
          "backdrop-filter": [{
            "backdrop-filter": ["", "none"]
          }],
          /**
           * Backdrop Blur
           * @see https://tailwindcss.com/docs/backdrop-blur
           */
          "backdrop-blur": [{
            "backdrop-blur": [blur]
          }],
          /**
           * Backdrop Brightness
           * @see https://tailwindcss.com/docs/backdrop-brightness
           */
          "backdrop-brightness": [{
            "backdrop-brightness": [brightness]
          }],
          /**
           * Backdrop Contrast
           * @see https://tailwindcss.com/docs/backdrop-contrast
           */
          "backdrop-contrast": [{
            "backdrop-contrast": [contrast]
          }],
          /**
           * Backdrop Grayscale
           * @see https://tailwindcss.com/docs/backdrop-grayscale
           */
          "backdrop-grayscale": [{
            "backdrop-grayscale": [grayscale]
          }],
          /**
           * Backdrop Hue Rotate
           * @see https://tailwindcss.com/docs/backdrop-hue-rotate
           */
          "backdrop-hue-rotate": [{
            "backdrop-hue-rotate": [hueRotate]
          }],
          /**
           * Backdrop Invert
           * @see https://tailwindcss.com/docs/backdrop-invert
           */
          "backdrop-invert": [{
            "backdrop-invert": [invert]
          }],
          /**
           * Backdrop Opacity
           * @see https://tailwindcss.com/docs/backdrop-opacity
           */
          "backdrop-opacity": [{
            "backdrop-opacity": [opacity]
          }],
          /**
           * Backdrop Saturate
           * @see https://tailwindcss.com/docs/backdrop-saturate
           */
          "backdrop-saturate": [{
            "backdrop-saturate": [saturate]
          }],
          /**
           * Backdrop Sepia
           * @see https://tailwindcss.com/docs/backdrop-sepia
           */
          "backdrop-sepia": [{
            "backdrop-sepia": [sepia]
          }],
          // Tables
          /**
           * Border Collapse
           * @see https://tailwindcss.com/docs/border-collapse
           */
          "border-collapse": [{
            border: ["collapse", "separate"]
          }],
          /**
           * Border Spacing
           * @see https://tailwindcss.com/docs/border-spacing
           */
          "border-spacing": [{
            "border-spacing": [borderSpacing]
          }],
          /**
           * Border Spacing X
           * @see https://tailwindcss.com/docs/border-spacing
           */
          "border-spacing-x": [{
            "border-spacing-x": [borderSpacing]
          }],
          /**
           * Border Spacing Y
           * @see https://tailwindcss.com/docs/border-spacing
           */
          "border-spacing-y": [{
            "border-spacing-y": [borderSpacing]
          }],
          /**
           * Table Layout
           * @see https://tailwindcss.com/docs/table-layout
           */
          "table-layout": [{
            table: ["auto", "fixed"]
          }],
          /**
           * Caption Side
           * @see https://tailwindcss.com/docs/caption-side
           */
          caption: [{
            caption: ["top", "bottom"]
          }],
          // Transitions and Animation
          /**
           * Tranisition Property
           * @see https://tailwindcss.com/docs/transition-property
           */
          transition: [{
            transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
          }],
          /**
           * Transition Duration
           * @see https://tailwindcss.com/docs/transition-duration
           */
          duration: [{
            duration: getNumberAndArbitrary()
          }],
          /**
           * Transition Timing Function
           * @see https://tailwindcss.com/docs/transition-timing-function
           */
          ease: [{
            ease: ["linear", "in", "out", "in-out", isArbitraryValue]
          }],
          /**
           * Transition Delay
           * @see https://tailwindcss.com/docs/transition-delay
           */
          delay: [{
            delay: getNumberAndArbitrary()
          }],
          /**
           * Animation
           * @see https://tailwindcss.com/docs/animation
           */
          animate: [{
            animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
          }],
          // Transforms
          /**
           * Transform
           * @see https://tailwindcss.com/docs/transform
           */
          transform: [{
            transform: ["", "gpu", "none"]
          }],
          /**
           * Scale
           * @see https://tailwindcss.com/docs/scale
           */
          scale: [{
            scale: [scale]
          }],
          /**
           * Scale X
           * @see https://tailwindcss.com/docs/scale
           */
          "scale-x": [{
            "scale-x": [scale]
          }],
          /**
           * Scale Y
           * @see https://tailwindcss.com/docs/scale
           */
          "scale-y": [{
            "scale-y": [scale]
          }],
          /**
           * Rotate
           * @see https://tailwindcss.com/docs/rotate
           */
          rotate: [{
            rotate: [isInteger$1, isArbitraryValue]
          }],
          /**
           * Translate X
           * @see https://tailwindcss.com/docs/translate
           */
          "translate-x": [{
            "translate-x": [translate2]
          }],
          /**
           * Translate Y
           * @see https://tailwindcss.com/docs/translate
           */
          "translate-y": [{
            "translate-y": [translate2]
          }],
          /**
           * Skew X
           * @see https://tailwindcss.com/docs/skew
           */
          "skew-x": [{
            "skew-x": [skew]
          }],
          /**
           * Skew Y
           * @see https://tailwindcss.com/docs/skew
           */
          "skew-y": [{
            "skew-y": [skew]
          }],
          /**
           * Transform Origin
           * @see https://tailwindcss.com/docs/transform-origin
           */
          "transform-origin": [{
            origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
          }],
          // Interactivity
          /**
           * Accent Color
           * @see https://tailwindcss.com/docs/accent-color
           */
          accent: [{
            accent: ["auto", colors]
          }],
          /**
           * Appearance
           * @see https://tailwindcss.com/docs/appearance
           */
          appearance: ["appearance-none"],
          /**
           * Cursor
           * @see https://tailwindcss.com/docs/cursor
           */
          cursor: [{
            cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
          }],
          /**
           * Caret Color
           * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
           */
          "caret-color": [{
            caret: [colors]
          }],
          /**
           * Pointer Events
           * @see https://tailwindcss.com/docs/pointer-events
           */
          "pointer-events": [{
            "pointer-events": ["none", "auto"]
          }],
          /**
           * Resize
           * @see https://tailwindcss.com/docs/resize
           */
          resize: [{
            resize: ["none", "y", "x", ""]
          }],
          /**
           * Scroll Behavior
           * @see https://tailwindcss.com/docs/scroll-behavior
           */
          "scroll-behavior": [{
            scroll: ["auto", "smooth"]
          }],
          /**
           * Scroll Margin
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-m": [{
            "scroll-m": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin X
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mx": [{
            "scroll-mx": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Y
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-my": [{
            "scroll-my": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Start
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-ms": [{
            "scroll-ms": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin End
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-me": [{
            "scroll-me": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Top
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mt": [{
            "scroll-mt": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Right
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mr": [{
            "scroll-mr": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Bottom
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mb": [{
            "scroll-mb": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Margin Left
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-ml": [{
            "scroll-ml": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-p": [{
            "scroll-p": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding X
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-px": [{
            "scroll-px": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Y
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-py": [{
            "scroll-py": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Start
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-ps": [{
            "scroll-ps": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding End
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pe": [{
            "scroll-pe": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Top
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pt": [{
            "scroll-pt": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Right
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pr": [{
            "scroll-pr": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Bottom
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pb": [{
            "scroll-pb": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Padding Left
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pl": [{
            "scroll-pl": getSpacingWithArbitrary()
          }],
          /**
           * Scroll Snap Align
           * @see https://tailwindcss.com/docs/scroll-snap-align
           */
          "snap-align": [{
            snap: ["start", "end", "center", "align-none"]
          }],
          /**
           * Scroll Snap Stop
           * @see https://tailwindcss.com/docs/scroll-snap-stop
           */
          "snap-stop": [{
            snap: ["normal", "always"]
          }],
          /**
           * Scroll Snap Type
           * @see https://tailwindcss.com/docs/scroll-snap-type
           */
          "snap-type": [{
            snap: ["none", "x", "y", "both"]
          }],
          /**
           * Scroll Snap Type Strictness
           * @see https://tailwindcss.com/docs/scroll-snap-type
           */
          "snap-strictness": [{
            snap: ["mandatory", "proximity"]
          }],
          /**
           * Touch Action
           * @see https://tailwindcss.com/docs/touch-action
           */
          touch: [{
            touch: ["auto", "none", "manipulation"]
          }],
          /**
           * Touch Action X
           * @see https://tailwindcss.com/docs/touch-action
           */
          "touch-x": [{
            "touch-pan": ["x", "left", "right"]
          }],
          /**
           * Touch Action Y
           * @see https://tailwindcss.com/docs/touch-action
           */
          "touch-y": [{
            "touch-pan": ["y", "up", "down"]
          }],
          /**
           * Touch Action Pinch Zoom
           * @see https://tailwindcss.com/docs/touch-action
           */
          "touch-pz": ["touch-pinch-zoom"],
          /**
           * User Select
           * @see https://tailwindcss.com/docs/user-select
           */
          select: [{
            select: ["none", "text", "all", "auto"]
          }],
          /**
           * Will Change
           * @see https://tailwindcss.com/docs/will-change
           */
          "will-change": [{
            "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
          }],
          // SVG
          /**
           * Fill
           * @see https://tailwindcss.com/docs/fill
           */
          fill: [{
            fill: [colors, "none"]
          }],
          /**
           * Stroke Width
           * @see https://tailwindcss.com/docs/stroke-width
           */
          "stroke-w": [{
            stroke: [isLength$1, isArbitraryLength, isArbitraryNumber]
          }],
          /**
           * Stroke
           * @see https://tailwindcss.com/docs/stroke
           */
          stroke: [{
            stroke: [colors, "none"]
          }],
          // Accessibility
          /**
           * Screen Readers
           * @see https://tailwindcss.com/docs/screen-readers
           */
          sr: ["sr-only", "not-sr-only"]
        },
        conflictingClassGroups: {
          overflow: ["overflow-x", "overflow-y"],
          overscroll: ["overscroll-x", "overscroll-y"],
          inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
          "inset-x": ["right", "left"],
          "inset-y": ["top", "bottom"],
          flex: ["basis", "grow", "shrink"],
          gap: ["gap-x", "gap-y"],
          p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
          px: ["pr", "pl"],
          py: ["pt", "pb"],
          m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
          mx: ["mr", "ml"],
          my: ["mt", "mb"],
          "font-size": ["leading"],
          "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
          "fvn-ordinal": ["fvn-normal"],
          "fvn-slashed-zero": ["fvn-normal"],
          "fvn-figure": ["fvn-normal"],
          "fvn-spacing": ["fvn-normal"],
          "fvn-fraction": ["fvn-normal"],
          "line-clamp": ["display", "overflow"],
          rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
          "rounded-s": ["rounded-ss", "rounded-es"],
          "rounded-e": ["rounded-se", "rounded-ee"],
          "rounded-t": ["rounded-tl", "rounded-tr"],
          "rounded-r": ["rounded-tr", "rounded-br"],
          "rounded-b": ["rounded-br", "rounded-bl"],
          "rounded-l": ["rounded-tl", "rounded-bl"],
          "border-spacing": ["border-spacing-x", "border-spacing-y"],
          "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
          "border-w-x": ["border-w-r", "border-w-l"],
          "border-w-y": ["border-w-t", "border-w-b"],
          "border-color": ["border-color-t", "border-color-r", "border-color-b", "border-color-l"],
          "border-color-x": ["border-color-r", "border-color-l"],
          "border-color-y": ["border-color-t", "border-color-b"],
          "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
          "scroll-mx": ["scroll-mr", "scroll-ml"],
          "scroll-my": ["scroll-mt", "scroll-mb"],
          "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
          "scroll-px": ["scroll-pr", "scroll-pl"],
          "scroll-py": ["scroll-pt", "scroll-pb"],
          touch: ["touch-x", "touch-y", "touch-pz"],
          "touch-x": ["touch"],
          "touch-y": ["touch"],
          "touch-pz": ["touch"]
        },
        conflictingClassGroupModifiers: {
          "font-size": ["leading"]
        }
      };
    }
    const twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);
    const cn = (...inputs) => twMerge(clsx(inputs));
    function isEmail(email) {
      const regex = /^[\d!#$%&'*+/=?^_`a-z{|}~-]+(?:\.[\d!#$%&'*+/=?^_`a-z{|}~-]+)*@(?:[\da-z](?:[\da-z-]*[\da-z])?\.)+[\da-z](?:[\da-z-]*[\da-z])?$/;
      return regex.test(email);
    }
    function removeLeadingSlash(path) {
      return path.replace(/^\//, "");
    }
    const translate = (disctionary) => function Translation(term, parameters) {
      const text2 = disctionary[term] ?? term;
      const lines = text2.split(/{{|}}/);
      return isDefined(parameters) ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: lines.map((line) => {
        return isDefined(parameters == null ? void 0 : parameters[line]) ? parameters[line] : line;
      }) }) : text2;
    };
    const TRANSLATIONS_TEXTS = {
      "SIGN_IN.PLEASE_SIGN_IN_LABEL": "Please sign in with your email",
      "SIGN_IN.PLEASE_SIGN_IN_WEB_LABEL": "Please Sign In to Early",
      "SIGN_IN.PLEASE_SIGN_IN_WEB_SUBTITLE": "You will be redirected to the Sign In page",
      "SIGN_IN.SIGN_IN_BUTTON": "Sign In",
      "SIGN_IN.NOT_VALID_EMAIL_ERROR": "Please enter a valid email address.",
      "SIGN_IN.CHECK_YOUR_EMAIL_LABEL": "Check your email: We've sent you a link to sign in. Please click on the link to proceed with the authentication process.",
      "SIGN_IN.CHECK_SPAM_LABEL": "It may take a minute for the email to arrive. If you don't see it, check your spam folder or try resending the link.",
      "SIGN_IN.NOT_AUTHORIZED_USER_LABEL": "Thank you for your interest! It looks like you haven't been invited to our closed beta yet. Please visit our website at {{link}} to sign up for our beta waiting list. We'll notify you as soon as a spot opens up!",
      "CODE_EXPLORE_TABS.MY_CODE_TAB": "MY CODE",
      "CODE_EXPLORE_TABS.MY_CHANGES_TAB": "MY CHANGES",
      "CODE_EXPLORE_TABS.NO_PROJECT_FILES_MESSAGE": "No files in workspace",
      "CODE_EXPLORE_TABS.NO_CHANGED_FILES_MESSAGE": "No changed files in git",
      "STOP_TESTS.BUTTON_LABEL": "Stop tests",
      "RUN_PRECONFIGURED_TESTS.BUTTON_LABEL": "Run preconfigured tests",
      "SECTION.TESTABLE_CODES": "TESTABLE CODES",
      "SECTION.MESSAGES": "MESSAGES",
      "TESTS_INDICATOR.IN_PROGRESS": "In Progress",
      "TESTS_INDICATOR.IN_QUEUE": "In Queue",
      "FILES_TREE.GENERATE_TESTS_POPUP": "Generate Tests here",
      "SETTINGS_MENU.SETTINGS_TITLE": "SETTINGS",
      "SETTINGS_MENU.TESTING_FRAMEWORK": "Testing Framework",
      "SETTINGS_MENU.TESTING_FRAMEWORK_DESCRIPTION": "{{framework}} has been selected as the testing framework. Future tests will be generated to align with this framework.",
      "SETTINGS_MENU.TESTING_FRAMEWORK_JEST": "Jest",
      "SETTINGS_MENU.TESTING_FRAMEWORK_MOCHA_SINON_CHAI": "Mocha with Sinon & Chai",
      "SETTINGS_MENU.TEST_SUFFIX": "Test Suffix",
      "SETTINGS_MENU.TEST_SUFFIX_DESCRIPTION": "The {{suffix}} suffix has been selected. Future test files will include this suffix in their names, e.g., {{pathname}}.",
      "SETTINGS_MENU.TEST_SUFFIX_SPEC": "spec",
      "SETTINGS_MENU.TEST_SUFFIX_TEST": "test",
      "SETTINGS_MENU.TEST_STRUCTURE_VARIANT": "Tests Location",
      "SETTINGS_MENU.TEST_STRUCTURE_VARIANT_SIBLING_FOLDER": "Sibling Folder",
      "SETTINGS_MENU.TEST_STRUCTURE_VARIANT_SIBLING_FOLDER_DESCRIPTION": "Test files are created in a folder next to the source file.",
      "SETTINGS_MENU.TEST_STRUCTURE_VARIANT_ROOT_FOLDER": "Root Folder",
      "SETTINGS_MENU.TEST_STRUCTURE_VARIANT_ROOT_FOLDER_DESCRIPTION": "Test files are created in a folder at the root of your project.",
      "SETTINGS_MENU.TEST_STRUCTURE_VARIANT_DEPRECATED": "Deprecated",
      "SETTINGS_MENU.TEST_STRUCTURE_VARIANT_DEPRECATED_FLAT_DESCRIPTION": "This variant is deprecated.",
      "SETTINGS_MENU.TEST_STRUCTURE_VARIANT_DEPRECATED_FOLDER_DESCRIPTION": "This variant is deprecated. Test files are created in a folder next to the source file.",
      "SETTINGS_MENU.TEST_STRUCTURE_VARIANT_DEPRECATED_TESTS_FOLDER_DESCRIPTION": "This variant is deprecated. Test files are created in a folder at the root of your project.",
      "SETTINGS_MENU.TEST_FILE_NAME": "Test File Name Case",
      "SETTINGS_MENU.TEST_FILE_NAME_CAMEL_CASE": "Camel Case",
      "SETTINGS_MENU.TEST_FILE_NAME_KEBAB_CASE": "Kebab Case",
      "SETTINGS_MENU.TEST_FILE_NAME_DESCRIPTION": "{{convention}} has been selected as the naming convention for test files. Future test files will be saved with method names in {{case}} format.",
      "SETTINGS_MENU.EARL_PANEL_ENABLED": "Earl Suggestions",
      "SETTINGS_MENU.EARL_PANEL_ENABLED_DESCRIPTION": "The {{panel}} {{verb}} be shown on every Tests Generaion.",
      "SETTINGS_MENU.EARL_PANEL_ENABLED_LABEL": "Show Earl Suggestions",
      "SETTINGS_MENU.WILL": "will",
      "SETTINGS_MENU.WONT": "wont",
      "BURGER_MENU.HOMEPAGE": "Homepage",
      "BURGER_MENU.GETTING_STARTED": "Getting started",
      "BURGER_MENU.SETUP_CONFIG": "Setup & Config",
      "BURGER_MENU.INVITE_FRIEND": "Invite a Friend",
      "INVITE_FRIEND_MODAL.MODAL_TITLE": "Invite a Friend",
      "INVITE_FRIEND_MODAL.EMAIL_LABEL": "Email",
      "INVITE_FRIEND_MODAL.EMAIL_PLACEHOLDER": "Friend's email",
      "INVITE_FRIEND_MODAL.FROM_LABEL": "From",
      "INVITE_FRIEND_MODAL.FROM_PLACEHOLDER": "Who's sending the invite",
      "INVITE_FRIEND_MODAL.TO_LABEL": "To",
      "INVITE_FRIEND_MODAL.TO_PLACEHOLDER": "Friend's name",
      "INVITE_FRIEND_MODAL.SEND_BUTTON": "Send",
      "INVITE_FRIEND_MODAL.EMAIL_VALIDATION_ERROR": "Enter a valid email address",
      "INVITE_FRIEND_MODAL.NAME_VALIDATION_ERROR": "Only letters are allowed",
      "INVITE_FRIEND_MODAL.REQUIRED": "Required"
    };
    const t$1 = translate(TRANSLATIONS_TEXTS);
    function SignInForm() {
      const {
        signIn: { isLinkSent, error: authorizationError },
        authMode,
        dispatch
      } = useAppStateContext();
      const [email, setEmail] = reactExports.useState("");
      const [error, setError] = reactExports.useState(null);
      const [isDisabled, setIsDisabled] = reactExports.useState(false);
      const logOnceReference = reactExports.useRef(false);
      const handleSignIn = () => {
        const lowercaseEmail = email.toLowerCase();
        if (!isEmail(lowercaseEmail)) {
          setError("SIGN_IN.NOT_VALID_EMAIL_ERROR");
          return;
        }
        vscode.postMessage({ type: "signIn", payload: { email: lowercaseEmail } });
        setIsDisabled(true);
        setError(null);
      };
      const handleSignInWeb = () => {
        vscode.postMessage({ type: "signInWeb" });
      };
      reactExports.useEffect(() => {
        if (!logOnceReference.current) {
          logOnceReference.current = true;
        }
      }, []);
      reactExports.useEffect(() => {
        setIsDisabled(false);
      }, [authorizationError]);
      reactExports.useEffect(() => {
        if (isLinkSent) {
          setEmail("");
        }
      }, [isLinkSent]);
      const onEmailChange = (event) => {
        if (isDefined(event.currentTarget) && "value" in event.currentTarget && isString_1(event.currentTarget.value)) {
          setEmail(event.currentTarget.value);
          if (event.currentTarget.value.length > 0) {
            setIsDisabled(false);
            dispatch({ type: "resetSignIn", payload: {} });
          }
        }
      };
      const onFormKeyDown = (event) => {
        if (event.key === "Enter") {
          handleSignIn();
        }
      };
      const shouldRenderSignInButton = !isDefined(authorizationError);
      if (!isDefined(authMode)) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "container h-full p-2 mx-auto flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodeProgressRing, {}) });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "container py-3 px-3", children: [
        authMode === AUTH_MODE.INPUT && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-400", children: t$1("SIGN_IN.PLEASE_SIGN_IN_LABEL") }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap justify-between gap-2 max-w-sm mt-2 mb-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-grow min-w-44", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                VSCodeTextField,
                {
                  className: "w-full",
                  type: "email",
                  placeholder: "Email",
                  value: email,
                  onInput: onEmailChange,
                  onKeyDown: onFormKeyDown,
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { slot: "start", className: "codicon codicon-mail" })
                }
              ),
              isDefined(error) && /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-red-500 block mt-2", children: t$1(error) })
            ] }),
            shouldRenderSignInButton && /* @__PURE__ */ jsxRuntimeExports.jsx(
              VSCodeButton,
              {
                className: cn("min-w-fit h-[26px]", isDisabled && (isLinkSent ? "cursor-not-allowed" : "cursor-wait")),
                disabled: isDisabled,
                onClick: handleSignIn,
                children: t$1("SIGN_IN.SIGN_IN_BUTTON")
              }
            )
          ] }),
          isLinkSent && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-400 block mb-2 max-w-sm", children: t$1("SIGN_IN.CHECK_YOUR_EMAIL_LABEL") }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-300 block max-w-sm", children: t$1("SIGN_IN.CHECK_SPAM_LABEL") })
          ] }),
          isDefined(authorizationError) && /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-400 block max-w-sm", children: t$1(authorizationError, {
            link: /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodeLink, { href: "https://www.startearly.ai/beta?fromide=true", children: "startearly.ai/beta" })
          }) })
        ] }),
        authMode === AUTH_MODE.BUTTON && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2 mb-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-400", children: t$1("SIGN_IN.PLEASE_SIGN_IN_WEB_LABEL") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-300", children: t$1("SIGN_IN.PLEASE_SIGN_IN_WEB_SUBTITLE") }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "max-w-sm", children: /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodeButton, { className: "min-w-fit h-[26px]", onClick: handleSignInWeb, children: t$1("SIGN_IN.SIGN_IN_BUTTON") }) })
        ] })
      ] });
    }
    const LoggedInView = ({ children: children2 }) => {
      reactExports.useEffect(() => {
        vscode.postMessage({ type: "getIsSignedIn" });
        vscode.postMessage({ type: "getIsOnboardingCompleted" });
      }, []);
      reactExports.useEffect(() => {
        const handleCmdD = (event) => {
          if (event.metaKey && event.key === "d") {
            setIsDevToolsOpen((isDevToolsOpen2) => !isDevToolsOpen2);
          }
        };
        document.addEventListener("keydown", handleCmdD);
        return () => {
          document.removeEventListener("keydown", handleCmdD);
        };
      }, []);
      const [isDevToolsOpen, setIsDevToolsOpen] = reactExports.useState(false);
      const { isLoggedIn } = useAppStateContext();
      if (!isDefined(isLoggedIn)) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "container h-full p-2 mx-auto flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodeProgressRing, {}) });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        isLoggedIn ? children2 : /* @__PURE__ */ jsxRuntimeExports.jsx(SignInForm, {}),
        isDev
      ] });
    };
    function cloneDeep$1(value) {
      if (!isDefined(value) || !isObject$3(value)) {
        return value;
      }
      if (value instanceof Date) {
        return new Date(value.getTime());
      }
      if (isArray$3(value)) {
        return value.map((element) => cloneDeep$1(element));
      }
      if (isObject$3(value)) {
        const objectCopy = {};
        for (const key in value) {
          if (Object.prototype.hasOwnProperty.call(value, key)) {
            objectCopy[key] = cloneDeep$1(value[key]);
          }
        }
        return objectCopy;
      }
      return value;
    }
    const isFile$1 = (path) => {
      const extensions = [".ts", ".tsx", ".js", ".jsx"];
      return extensions.some((extension) => path.endsWith(extension));
    };
    const getDirPaths = (path) => path.split("/").slice(0, -1).map((_, index, pathParts) => {
      const dir = pathParts.slice(0, index + 1).join("/");
      return dir === "" ? "/" : dir;
    });
    const useGitChangedCoverageMap = () => {
      const { gitChangedFilesList, coverageMap } = useAppStateContext();
      return reactExports.useMemo(() => {
        const [tree, leafs] = gitChangedFilesList.reduce(
          ([treeAccumulator, leafsAccumulator], path) => {
            const coverage = cloneDeep$1(coverageMap[path]);
            if (isDefined(coverage)) {
              treeAccumulator[path] = coverage;
              if (isFile$1(path)) {
                leafsAccumulator[path] = coverage;
              }
              if (!isFile$1(path)) {
                treeAccumulator[path].coveragePercentage = 0;
                treeAccumulator[path].coverage.statementCoverage = { covered: 0, total: 0 };
              }
            }
            return [treeAccumulator, leafsAccumulator];
          },
          [{}, {}]
        );
        for (const [path, leaf] of Object.entries(leafs)) {
          const dirPaths = getDirPaths(path);
          for (const dir of dirPaths) {
            tree[dir].coverage.statementCoverage.covered += leaf.coverage.statementCoverage.covered;
            tree[dir].coverage.statementCoverage.total += leaf.coverage.statementCoverage.total;
          }
        }
        for (const [path, dir] of Object.entries(tree)) {
          if (isFile$1(path)) {
            continue;
          }
          dir.coveragePercentage = Math.floor(
            dir.coverage.statementCoverage.covered / dir.coverage.statementCoverage.total * 100
          );
        }
        return tree;
      }, [gitChangedFilesList, coverageMap]);
    };
    const useFileTree = () => {
      const { filesList, filesTestablesList, coverageMap, workspaceName, gitChangedFilesList, generateTestFilesStatus } = useAppStateContext();
      const gitChangedCoverageMap = useGitChangedCoverageMap();
      reactExports.useEffect(() => {
        vscode.postMessage({ type: "getWorkspaceName" });
        vscode.postMessage({ type: "getFilesList" });
        vscode.postMessage({ type: "getCoverageMap" });
        vscode.postMessage({ type: "getTestsFilesList" });
        vscode.postMessage({ type: "getGitChangedFilesList" });
        vscode.postMessage({ type: "refreshTreeState" });
      }, []);
      return reactExports.useMemo(
        () => ({
          projectFilesTree: createTreeStructure(
            filesList,
            filesTestablesList,
            coverageMap,
            generateTestFilesStatus,
            workspaceName
          ),
          gitChangedFilesTree: createTreeStructure(
            gitChangedFilesList,
            filesTestablesList,
            gitChangedCoverageMap,
            generateTestFilesStatus,
            workspaceName
          )
        }),
        [
          filesList,
          gitChangedFilesList,
          filesTestablesList,
          coverageMap,
          gitChangedCoverageMap,
          generateTestFilesStatus,
          workspaceName
        ]
      );
    };
    function createTreeStructure(filesList, filesTestablesList, coverageMap, generateTestFilesStatus, workspaceName = "") {
      var _a, _b;
      if (!isDefined(workspaceName) || isEmptyString(workspaceName)) {
        return [];
      }
      const root2 = {
        name: workspaceName,
        path: "",
        type: "dir",
        coveragePercent: ((_a = coverageMap["/"]) == null ? void 0 : _a.coveragePercentage) ?? null,
        subrows: [],
        canCreateTests: true,
        isProcessing: false,
        isDone: false
      };
      for (const path of filesList) {
        if (path === "/") {
          continue;
        }
        const originalPath = path.replace("/", "");
        const pathParts = originalPath.split("/");
        let currentNode = root2;
        for (const pathPart of pathParts) {
          let subrow = currentNode.subrows.find((node) => node.name === pathPart);
          if (!subrow) {
            const filePathParts = pathPart.split(".");
            const isFile2 = filePathParts.length > 1 && filePathParts.pop() !== "";
            const subrows = isFile2 ? getTestablesRows(filesTestablesList[path], path, coverageMap, generateTestFilesStatus, originalPath) : [];
            const canCreateTests = subrows.some((item) => item.canCreateTests);
            subrow = {
              name: pathPart,
              path,
              type: isFile2 ? "file" : "dir",
              coveragePercent: ((_b = coverageMap[path]) == null ? void 0 : _b.coveragePercentage) ?? null,
              subrows,
              canCreateTests,
              isProcessing: false,
              isDone: false
            };
            currentNode.subrows.push(subrow);
          }
          currentNode = subrow;
        }
      }
      return [root2];
    }
    const isTestFileIsSameTestable = (testFileItem, testable, originalPath) => {
      const isSameFilePath = testFileItem.filePath === originalPath;
      const isSameName = testFileItem.methodName === testable.name;
      const isSameType = testFileItem.methodType === testable.type;
      const isSameParentName = testable.type === "method" ? testFileItem.parentName === testable.parentName : true;
      return isSameFilePath && isSameName && isSameType && isSameParentName;
    };
    function getTestablesRows(testables, path, coverageMap, generateTestFilesStatus, originalPath) {
      if (!isDefined(testables)) {
        return [];
      }
      const { classes, functions, methods } = testables.filter((t2) => isDefined(t2.name)).reduce(
        (accumulator, t2) => {
          if (t2.type === "class") {
            accumulator.classes.push(t2);
          }
          if (t2.type === "function") {
            accumulator.functions.push(t2);
          }
          if (t2.type === "method") {
            accumulator.methods.push(t2);
          }
          return accumulator;
        },
        { classes: [], functions: [], methods: [] }
      );
      const methodsRowsByClassName = methods.reduce((accumulator, method) => {
        if (!isDefined(accumulator[method.parentName])) {
          accumulator[method.parentName] = [];
        }
        const row = getTestableRow({
          testable: method,
          path,
          coverageMap,
          generateTestFilesStatus,
          originalPath
        });
        accumulator[method.parentName].push(row);
        return accumulator;
      }, {});
      return [
        ...classes.map(
          (testable) => getTestableRow({
            testable,
            path,
            coverageMap,
            generateTestFilesStatus,
            originalPath,
            subrows: methodsRowsByClassName[testable.name] ?? []
          })
        ),
        ...functions.map(
          (testable) => getTestableRow({ testable, path, coverageMap, generateTestFilesStatus, originalPath })
        )
      ];
    }
    function getTestableRow({
      testable,
      path,
      coverageMap,
      generateTestFilesStatus,
      originalPath,
      subrows = []
    }) {
      var _a, _b, _c;
      return {
        name: testable.name,
        path,
        type: "testable",
        coveragePercent: ((_c = (_b = (_a = coverageMap[path]) == null ? void 0 : _a.testablesCoverage) == null ? void 0 : _b[testable.name]) == null ? void 0 : _c.coveragePercent) ?? null,
        testable,
        subrows,
        canCreateTests: testable.canCreateTests,
        isProcessing: [...generateTestFilesStatus.processing, ...generateTestFilesStatus.queued].some(
          (processingItem) => isTestFileIsSameTestable(processingItem, testable, originalPath)
        ),
        isDone: generateTestFilesStatus.done.some((doneItem) => isTestFileIsSameTestable(doneItem, testable, originalPath))
      };
    }
    const JS_FILE_SUFFIXES = [".js", ".jsx"];
    const TS_FILE_SUFFIXES = [".ts", ".tsx"];
    const FILE_SUFFIXES = [...JS_FILE_SUFFIXES, ...TS_FILE_SUFFIXES];
    function toKebabCase$1(str) {
      return str.trim().replaceAll(/([\da-z])([A-Z])/g, "$1-$2").replaceAll(/([A-Z])([A-Z][\da-z])/g, "$1-$2").replaceAll(/[\s_]+/g, "-").toLowerCase();
    }
    /**
     * table-core
     *
     * Copyright (c) TanStack
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE.md file in the root directory of this source tree.
     *
     * @license MIT
     */
    function functionalUpdate(updater, input) {
      return typeof updater === "function" ? updater(input) : updater;
    }
    function makeStateUpdater(key, instance) {
      return (updater) => {
        instance.setState((old) => {
          return {
            ...old,
            [key]: functionalUpdate(updater, old[key])
          };
        });
      };
    }
    function isFunction$2(d2) {
      return d2 instanceof Function;
    }
    function isNumberArray(d2) {
      return Array.isArray(d2) && d2.every((val) => typeof val === "number");
    }
    function flattenBy(arr, getChildren) {
      const flat = [];
      const recurse = (subArr) => {
        subArr.forEach((item) => {
          flat.push(item);
          const children2 = getChildren(item);
          if (children2 != null && children2.length) {
            recurse(children2);
          }
        });
      };
      recurse(arr);
      return flat;
    }
    function memo(getDeps, fn, opts) {
      let deps = [];
      let result;
      return () => {
        let depTime;
        if (opts.key && opts.debug)
          depTime = Date.now();
        const newDeps = getDeps();
        const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);
        if (!depsChanged) {
          return result;
        }
        deps = newDeps;
        let resultTime;
        if (opts.key && opts.debug)
          resultTime = Date.now();
        result = fn(...newDeps);
        opts == null || opts.onChange == null || opts.onChange(result);
        if (opts.key && opts.debug) {
          if (opts != null && opts.debug()) {
            const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;
            const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;
            const resultFpsPercentage = resultEndTime / 16;
            const pad = (str, num) => {
              str = String(str);
              while (str.length < num) {
                str = " " + str;
              }
              return str;
            };
            console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `
            font-size: .6rem;
            font-weight: bold;
            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);
          }
        }
        return result;
      };
    }
    function createColumn(table, columnDef, depth, parent) {
      var _ref, _resolvedColumnDef$id;
      const defaultColumn = table._getDefaultColumnDef();
      const resolvedColumnDef = {
        ...defaultColumn,
        ...columnDef
      };
      const accessorKey = resolvedColumnDef.accessorKey;
      let id2 = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? accessorKey.replace(".", "_") : void 0) != null ? _ref : typeof resolvedColumnDef.header === "string" ? resolvedColumnDef.header : void 0;
      let accessorFn;
      if (resolvedColumnDef.accessorFn) {
        accessorFn = resolvedColumnDef.accessorFn;
      } else if (accessorKey) {
        if (accessorKey.includes(".")) {
          accessorFn = (originalRow) => {
            let result = originalRow;
            for (const key of accessorKey.split(".")) {
              var _result;
              result = (_result = result) == null ? void 0 : _result[key];
            }
            return result;
          };
        } else {
          accessorFn = (originalRow) => originalRow[resolvedColumnDef.accessorKey];
        }
      }
      if (!id2) {
        throw new Error();
      }
      let column = {
        id: `${String(id2)}`,
        accessorFn,
        parent,
        depth,
        columnDef: resolvedColumnDef,
        columns: [],
        getFlatColumns: memo(() => [true], () => {
          var _column$columns;
          return [column, ...(_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap((d2) => d2.getFlatColumns())];
        }, {
          key: "column.getFlatColumns",
          debug: () => {
            var _table$options$debugA;
            return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;
          }
        }),
        getLeafColumns: memo(() => [table._getOrderColumnsFn()], (orderColumns2) => {
          var _column$columns2;
          if ((_column$columns2 = column.columns) != null && _column$columns2.length) {
            let leafColumns = column.columns.flatMap((column2) => column2.getLeafColumns());
            return orderColumns2(leafColumns);
          }
          return [column];
        }, {
          key: "column.getLeafColumns",
          debug: () => {
            var _table$options$debugA2;
            return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;
          }
        })
      };
      for (const feature of table._features) {
        feature.createColumn == null || feature.createColumn(column, table);
      }
      return column;
    }
    function createHeader(table, column, options) {
      var _options$id;
      const id2 = (_options$id = options.id) != null ? _options$id : column.id;
      let header = {
        id: id2,
        column,
        index: options.index,
        isPlaceholder: !!options.isPlaceholder,
        placeholderId: options.placeholderId,
        depth: options.depth,
        subHeaders: [],
        colSpan: 0,
        rowSpan: 0,
        headerGroup: null,
        getLeafHeaders: () => {
          const leafHeaders = [];
          const recurseHeader = (h2) => {
            if (h2.subHeaders && h2.subHeaders.length) {
              h2.subHeaders.map(recurseHeader);
            }
            leafHeaders.push(h2);
          };
          recurseHeader(header);
          return leafHeaders;
        },
        getContext: () => ({
          table,
          header,
          column
        })
      };
      table._features.forEach((feature) => {
        feature.createHeader == null || feature.createHeader(header, table);
      });
      return header;
    }
    const Headers = {
      createTable: (table) => {
        table.getHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {
          var _left$map$filter, _right$map$filter;
          const leftColumns = (_left$map$filter = left == null ? void 0 : left.map((columnId) => leafColumns.find((d2) => d2.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];
          const rightColumns = (_right$map$filter = right == null ? void 0 : right.map((columnId) => leafColumns.find((d2) => d2.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];
          const centerColumns = leafColumns.filter((column) => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));
          const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);
          return headerGroups;
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA;
            return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugHeaders;
          }
        });
        table.getCenterHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {
          leafColumns = leafColumns.filter((column) => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));
          return buildHeaderGroups(allColumns, leafColumns, table, "center");
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA2;
            return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugHeaders;
          }
        });
        table.getLeftHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {
          var _left$map$filter2;
          const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map((columnId) => leafColumns.find((d2) => d2.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];
          return buildHeaderGroups(allColumns, orderedLeafColumns, table, "left");
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA3;
            return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugHeaders;
          }
        });
        table.getRightHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {
          var _right$map$filter2;
          const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map((columnId) => leafColumns.find((d2) => d2.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];
          return buildHeaderGroups(allColumns, orderedLeafColumns, table, "right");
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA4;
            return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugHeaders;
          }
        });
        table.getFooterGroups = memo(() => [table.getHeaderGroups()], (headerGroups) => {
          return [...headerGroups].reverse();
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA5;
            return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugHeaders;
          }
        });
        table.getLeftFooterGroups = memo(() => [table.getLeftHeaderGroups()], (headerGroups) => {
          return [...headerGroups].reverse();
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA6;
            return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugHeaders;
          }
        });
        table.getCenterFooterGroups = memo(() => [table.getCenterHeaderGroups()], (headerGroups) => {
          return [...headerGroups].reverse();
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA7;
            return (_table$options$debugA7 = table.options.debugAll) != null ? _table$options$debugA7 : table.options.debugHeaders;
          }
        });
        table.getRightFooterGroups = memo(() => [table.getRightHeaderGroups()], (headerGroups) => {
          return [...headerGroups].reverse();
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA8;
            return (_table$options$debugA8 = table.options.debugAll) != null ? _table$options$debugA8 : table.options.debugHeaders;
          }
        });
        table.getFlatHeaders = memo(() => [table.getHeaderGroups()], (headerGroups) => {
          return headerGroups.map((headerGroup) => {
            return headerGroup.headers;
          }).flat();
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA9;
            return (_table$options$debugA9 = table.options.debugAll) != null ? _table$options$debugA9 : table.options.debugHeaders;
          }
        });
        table.getLeftFlatHeaders = memo(() => [table.getLeftHeaderGroups()], (left) => {
          return left.map((headerGroup) => {
            return headerGroup.headers;
          }).flat();
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA10;
            return (_table$options$debugA10 = table.options.debugAll) != null ? _table$options$debugA10 : table.options.debugHeaders;
          }
        });
        table.getCenterFlatHeaders = memo(() => [table.getCenterHeaderGroups()], (left) => {
          return left.map((headerGroup) => {
            return headerGroup.headers;
          }).flat();
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA11;
            return (_table$options$debugA11 = table.options.debugAll) != null ? _table$options$debugA11 : table.options.debugHeaders;
          }
        });
        table.getRightFlatHeaders = memo(() => [table.getRightHeaderGroups()], (left) => {
          return left.map((headerGroup) => {
            return headerGroup.headers;
          }).flat();
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA12;
            return (_table$options$debugA12 = table.options.debugAll) != null ? _table$options$debugA12 : table.options.debugHeaders;
          }
        });
        table.getCenterLeafHeaders = memo(() => [table.getCenterFlatHeaders()], (flatHeaders) => {
          return flatHeaders.filter((header) => {
            var _header$subHeaders;
            return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);
          });
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA13;
            return (_table$options$debugA13 = table.options.debugAll) != null ? _table$options$debugA13 : table.options.debugHeaders;
          }
        });
        table.getLeftLeafHeaders = memo(() => [table.getLeftFlatHeaders()], (flatHeaders) => {
          return flatHeaders.filter((header) => {
            var _header$subHeaders2;
            return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);
          });
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA14;
            return (_table$options$debugA14 = table.options.debugAll) != null ? _table$options$debugA14 : table.options.debugHeaders;
          }
        });
        table.getRightLeafHeaders = memo(() => [table.getRightFlatHeaders()], (flatHeaders) => {
          return flatHeaders.filter((header) => {
            var _header$subHeaders3;
            return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);
          });
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA15;
            return (_table$options$debugA15 = table.options.debugAll) != null ? _table$options$debugA15 : table.options.debugHeaders;
          }
        });
        table.getLeafHeaders = memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {
          var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;
          return [...(_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : [], ...(_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : [], ...(_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : []].map((header) => {
            return header.getLeafHeaders();
          }).flat();
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA16;
            return (_table$options$debugA16 = table.options.debugAll) != null ? _table$options$debugA16 : table.options.debugHeaders;
          }
        });
      }
    };
    function buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {
      var _headerGroups$0$heade, _headerGroups$;
      let maxDepth = 0;
      const findMaxDepth = function(columns, depth) {
        if (depth === void 0) {
          depth = 1;
        }
        maxDepth = Math.max(maxDepth, depth);
        columns.filter((column) => column.getIsVisible()).forEach((column) => {
          var _column$columns;
          if ((_column$columns = column.columns) != null && _column$columns.length) {
            findMaxDepth(column.columns, depth + 1);
          }
        }, 0);
      };
      findMaxDepth(allColumns);
      let headerGroups = [];
      const createHeaderGroup = (headersToGroup, depth) => {
        const headerGroup = {
          depth,
          id: [headerFamily, `${depth}`].filter(Boolean).join("_"),
          headers: []
        };
        const pendingParentHeaders = [];
        headersToGroup.forEach((headerToGroup) => {
          const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];
          const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;
          let column;
          let isPlaceholder = false;
          if (isLeafHeader && headerToGroup.column.parent) {
            column = headerToGroup.column.parent;
          } else {
            column = headerToGroup.column;
            isPlaceholder = true;
          }
          if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {
            latestPendingParentHeader.subHeaders.push(headerToGroup);
          } else {
            const header = createHeader(table, column, {
              id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join("_"),
              isPlaceholder,
              placeholderId: isPlaceholder ? `${pendingParentHeaders.filter((d2) => d2.column === column).length}` : void 0,
              depth,
              index: pendingParentHeaders.length
            });
            header.subHeaders.push(headerToGroup);
            pendingParentHeaders.push(header);
          }
          headerGroup.headers.push(headerToGroup);
          headerToGroup.headerGroup = headerGroup;
        });
        headerGroups.push(headerGroup);
        if (depth > 0) {
          createHeaderGroup(pendingParentHeaders, depth - 1);
        }
      };
      const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {
        depth: maxDepth,
        index
      }));
      createHeaderGroup(bottomHeaders, maxDepth - 1);
      headerGroups.reverse();
      const recurseHeadersForSpans = (headers) => {
        const filteredHeaders = headers.filter((header) => header.column.getIsVisible());
        return filteredHeaders.map((header) => {
          let colSpan = 0;
          let rowSpan = 0;
          let childRowSpans = [0];
          if (header.subHeaders && header.subHeaders.length) {
            childRowSpans = [];
            recurseHeadersForSpans(header.subHeaders).forEach((_ref) => {
              let {
                colSpan: childColSpan,
                rowSpan: childRowSpan
              } = _ref;
              colSpan += childColSpan;
              childRowSpans.push(childRowSpan);
            });
          } else {
            colSpan = 1;
          }
          const minChildRowSpan = Math.min(...childRowSpans);
          rowSpan = rowSpan + minChildRowSpan;
          header.colSpan = colSpan;
          header.rowSpan = rowSpan;
          return {
            colSpan,
            rowSpan
          };
        });
      };
      recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);
      return headerGroups;
    }
    const defaultColumnSizing = {
      size: 150,
      minSize: 20,
      maxSize: Number.MAX_SAFE_INTEGER
    };
    const getDefaultColumnSizingInfoState = () => ({
      startOffset: null,
      startSize: null,
      deltaOffset: null,
      deltaPercentage: null,
      isResizingColumn: false,
      columnSizingStart: []
    });
    const ColumnSizing = {
      getDefaultColumnDef: () => {
        return defaultColumnSizing;
      },
      getInitialState: (state) => {
        return {
          columnSizing: {},
          columnSizingInfo: getDefaultColumnSizingInfoState(),
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          columnResizeMode: "onEnd",
          onColumnSizingChange: makeStateUpdater("columnSizing", table),
          onColumnSizingInfoChange: makeStateUpdater("columnSizingInfo", table)
        };
      },
      createColumn: (column, table) => {
        column.getSize = () => {
          var _column$columnDef$min, _ref, _column$columnDef$max;
          const columnSize = table.getState().columnSizing[column.id];
          return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);
        };
        column.getStart = (position) => {
          const columns = !position ? table.getVisibleLeafColumns() : position === "left" ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();
          const index = columns.findIndex((d2) => d2.id === column.id);
          if (index > 0) {
            const prevSiblingColumn = columns[index - 1];
            return prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize();
          }
          return 0;
        };
        column.resetSize = () => {
          table.setColumnSizing((_ref2) => {
            let {
              [column.id]: _,
              ...rest
            } = _ref2;
            return rest;
          });
        };
        column.getCanResize = () => {
          var _column$columnDef$ena, _table$options$enable;
          return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);
        };
        column.getIsResizing = () => {
          return table.getState().columnSizingInfo.isResizingColumn === column.id;
        };
      },
      createHeader: (header, table) => {
        header.getSize = () => {
          let sum2 = 0;
          const recurse = (header2) => {
            if (header2.subHeaders.length) {
              header2.subHeaders.forEach(recurse);
            } else {
              var _header$column$getSiz;
              sum2 += (_header$column$getSiz = header2.column.getSize()) != null ? _header$column$getSiz : 0;
            }
          };
          recurse(header);
          return sum2;
        };
        header.getStart = () => {
          if (header.index > 0) {
            const prevSiblingHeader = header.headerGroup.headers[header.index - 1];
            return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();
          }
          return 0;
        };
        header.getResizeHandler = () => {
          const column = table.getColumn(header.column.id);
          const canResize = column == null ? void 0 : column.getCanResize();
          return (e2) => {
            if (!column || !canResize) {
              return;
            }
            e2.persist == null || e2.persist();
            if (isTouchStartEvent(e2)) {
              if (e2.touches && e2.touches.length > 1) {
                return;
              }
            }
            const startSize = header.getSize();
            const columnSizingStart = header ? header.getLeafHeaders().map((d2) => [d2.column.id, d2.column.getSize()]) : [[column.id, column.getSize()]];
            const clientX = isTouchStartEvent(e2) ? Math.round(e2.touches[0].clientX) : e2.clientX;
            const newColumnSizing = {};
            const updateOffset = (eventType, clientXPos) => {
              if (typeof clientXPos !== "number") {
                return;
              }
              table.setColumnSizingInfo((old) => {
                var _old$startOffset, _old$startSize;
                const deltaOffset = clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0);
                const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);
                old.columnSizingStart.forEach((_ref3) => {
                  let [columnId, headerSize] = _ref3;
                  newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;
                });
                return {
                  ...old,
                  deltaOffset,
                  deltaPercentage
                };
              });
              if (table.options.columnResizeMode === "onChange" || eventType === "end") {
                table.setColumnSizing((old) => ({
                  ...old,
                  ...newColumnSizing
                }));
              }
            };
            const onMove = (clientXPos) => updateOffset("move", clientXPos);
            const onEnd = (clientXPos) => {
              updateOffset("end", clientXPos);
              table.setColumnSizingInfo((old) => ({
                ...old,
                isResizingColumn: false,
                startOffset: null,
                startSize: null,
                deltaOffset: null,
                deltaPercentage: null,
                columnSizingStart: []
              }));
            };
            const mouseEvents = {
              moveHandler: (e3) => onMove(e3.clientX),
              upHandler: (e3) => {
                document.removeEventListener("mousemove", mouseEvents.moveHandler);
                document.removeEventListener("mouseup", mouseEvents.upHandler);
                onEnd(e3.clientX);
              }
            };
            const touchEvents = {
              moveHandler: (e3) => {
                if (e3.cancelable) {
                  e3.preventDefault();
                  e3.stopPropagation();
                }
                onMove(e3.touches[0].clientX);
                return false;
              },
              upHandler: (e3) => {
                var _e$touches$;
                document.removeEventListener("touchmove", touchEvents.moveHandler);
                document.removeEventListener("touchend", touchEvents.upHandler);
                if (e3.cancelable) {
                  e3.preventDefault();
                  e3.stopPropagation();
                }
                onEnd((_e$touches$ = e3.touches[0]) == null ? void 0 : _e$touches$.clientX);
              }
            };
            const passiveIfSupported = passiveEventSupported() ? {
              passive: false
            } : false;
            if (isTouchStartEvent(e2)) {
              document.addEventListener("touchmove", touchEvents.moveHandler, passiveIfSupported);
              document.addEventListener("touchend", touchEvents.upHandler, passiveIfSupported);
            } else {
              document.addEventListener("mousemove", mouseEvents.moveHandler, passiveIfSupported);
              document.addEventListener("mouseup", mouseEvents.upHandler, passiveIfSupported);
            }
            table.setColumnSizingInfo((old) => ({
              ...old,
              startOffset: clientX,
              startSize,
              deltaOffset: 0,
              deltaPercentage: 0,
              columnSizingStart,
              isResizingColumn: column.id
            }));
          };
        };
      },
      createTable: (table) => {
        table.setColumnSizing = (updater) => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater);
        table.setColumnSizingInfo = (updater) => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater);
        table.resetColumnSizing = (defaultState2) => {
          var _table$initialState$c;
          table.setColumnSizing(defaultState2 ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});
        };
        table.resetHeaderSizeInfo = (defaultState2) => {
          var _table$initialState$c2;
          table.setColumnSizingInfo(defaultState2 ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());
        };
        table.getTotalSize = () => {
          var _table$getHeaderGroup, _table$getHeaderGroup2;
          return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum2, header) => {
            return sum2 + header.getSize();
          }, 0)) != null ? _table$getHeaderGroup : 0;
        };
        table.getLeftTotalSize = () => {
          var _table$getLeftHeaderG, _table$getLeftHeaderG2;
          return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum2, header) => {
            return sum2 + header.getSize();
          }, 0)) != null ? _table$getLeftHeaderG : 0;
        };
        table.getCenterTotalSize = () => {
          var _table$getCenterHeade, _table$getCenterHeade2;
          return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum2, header) => {
            return sum2 + header.getSize();
          }, 0)) != null ? _table$getCenterHeade : 0;
        };
        table.getRightTotalSize = () => {
          var _table$getRightHeader, _table$getRightHeader2;
          return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum2, header) => {
            return sum2 + header.getSize();
          }, 0)) != null ? _table$getRightHeader : 0;
        };
      }
    };
    let passiveSupported = null;
    function passiveEventSupported() {
      if (typeof passiveSupported === "boolean")
        return passiveSupported;
      let supported = false;
      try {
        const options = {
          get passive() {
            supported = true;
            return false;
          }
        };
        const noop = () => {
        };
        window.addEventListener("test", noop, options);
        window.removeEventListener("test", noop);
      } catch (err) {
        supported = false;
      }
      passiveSupported = supported;
      return passiveSupported;
    }
    function isTouchStartEvent(e2) {
      return e2.type === "touchstart";
    }
    const Expanding = {
      getInitialState: (state) => {
        return {
          expanded: {},
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onExpandedChange: makeStateUpdater("expanded", table),
          paginateExpandedRows: true
        };
      },
      createTable: (table) => {
        let registered = false;
        let queued = false;
        table._autoResetExpanded = () => {
          var _ref, _table$options$autoRe;
          if (!registered) {
            table._queue(() => {
              registered = true;
            });
            return;
          }
          if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {
            if (queued)
              return;
            queued = true;
            table._queue(() => {
              table.resetExpanded();
              queued = false;
            });
          }
        };
        table.setExpanded = (updater) => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater);
        table.toggleAllRowsExpanded = (expanded) => {
          if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {
            table.setExpanded(true);
          } else {
            table.setExpanded({});
          }
        };
        table.resetExpanded = (defaultState2) => {
          var _table$initialState$e, _table$initialState;
          table.setExpanded(defaultState2 ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});
        };
        table.getCanSomeRowsExpand = () => {
          return table.getPrePaginationRowModel().flatRows.some((row) => row.getCanExpand());
        };
        table.getToggleAllRowsExpandedHandler = () => {
          return (e2) => {
            e2.persist == null || e2.persist();
            table.toggleAllRowsExpanded();
          };
        };
        table.getIsSomeRowsExpanded = () => {
          const expanded = table.getState().expanded;
          return expanded === true || Object.values(expanded).some(Boolean);
        };
        table.getIsAllRowsExpanded = () => {
          const expanded = table.getState().expanded;
          if (typeof expanded === "boolean") {
            return expanded === true;
          }
          if (!Object.keys(expanded).length) {
            return false;
          }
          if (table.getRowModel().flatRows.some((row) => !row.getIsExpanded())) {
            return false;
          }
          return true;
        };
        table.getExpandedDepth = () => {
          let maxDepth = 0;
          const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);
          rowIds.forEach((id2) => {
            const splitId = id2.split(".");
            maxDepth = Math.max(maxDepth, splitId.length);
          });
          return maxDepth;
        };
        table.getPreExpandedRowModel = () => table.getSortedRowModel();
        table.getExpandedRowModel = () => {
          if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {
            table._getExpandedRowModel = table.options.getExpandedRowModel(table);
          }
          if (table.options.manualExpanding || !table._getExpandedRowModel) {
            return table.getPreExpandedRowModel();
          }
          return table._getExpandedRowModel();
        };
      },
      createRow: (row, table) => {
        row.toggleExpanded = (expanded) => {
          table.setExpanded((old) => {
            var _expanded;
            const exists = old === true ? true : !!(old != null && old[row.id]);
            let oldExpanded = {};
            if (old === true) {
              Object.keys(table.getRowModel().rowsById).forEach((rowId) => {
                oldExpanded[rowId] = true;
              });
            } else {
              oldExpanded = old;
            }
            expanded = (_expanded = expanded) != null ? _expanded : !exists;
            if (!exists && expanded) {
              return {
                ...oldExpanded,
                [row.id]: true
              };
            }
            if (exists && !expanded) {
              const {
                [row.id]: _,
                ...rest
              } = oldExpanded;
              return rest;
            }
            return old;
          });
        };
        row.getIsExpanded = () => {
          var _table$options$getIsR;
          const expanded = table.getState().expanded;
          return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));
        };
        row.getCanExpand = () => {
          var _table$options$getRow, _table$options$enable, _row$subRows;
          return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);
        };
        row.getIsAllParentsExpanded = () => {
          let isFullyExpanded = true;
          let currentRow = row;
          while (isFullyExpanded && currentRow.parentId) {
            currentRow = table.getRow(currentRow.parentId, true);
            isFullyExpanded = currentRow.getIsExpanded();
          }
          return isFullyExpanded;
        };
        row.getToggleExpandedHandler = () => {
          const canExpand = row.getCanExpand();
          return () => {
            if (!canExpand)
              return;
            row.toggleExpanded();
          };
        };
      }
    };
    const includesString = (row, columnId, filterValue) => {
      var _row$getValue;
      const search = filterValue.toLowerCase();
      return Boolean((_row$getValue = row.getValue(columnId)) == null || (_row$getValue = _row$getValue.toString()) == null || (_row$getValue = _row$getValue.toLowerCase()) == null ? void 0 : _row$getValue.includes(search));
    };
    includesString.autoRemove = (val) => testFalsey(val);
    const includesStringSensitive = (row, columnId, filterValue) => {
      var _row$getValue2;
      return Boolean((_row$getValue2 = row.getValue(columnId)) == null || (_row$getValue2 = _row$getValue2.toString()) == null ? void 0 : _row$getValue2.includes(filterValue));
    };
    includesStringSensitive.autoRemove = (val) => testFalsey(val);
    const equalsString = (row, columnId, filterValue) => {
      var _row$getValue3;
      return ((_row$getValue3 = row.getValue(columnId)) == null || (_row$getValue3 = _row$getValue3.toString()) == null ? void 0 : _row$getValue3.toLowerCase()) === (filterValue == null ? void 0 : filterValue.toLowerCase());
    };
    equalsString.autoRemove = (val) => testFalsey(val);
    const arrIncludes = (row, columnId, filterValue) => {
      var _row$getValue4;
      return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);
    };
    arrIncludes.autoRemove = (val) => testFalsey(val) || !(val != null && val.length);
    const arrIncludesAll = (row, columnId, filterValue) => {
      return !filterValue.some((val) => {
        var _row$getValue5;
        return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));
      });
    };
    arrIncludesAll.autoRemove = (val) => testFalsey(val) || !(val != null && val.length);
    const arrIncludesSome = (row, columnId, filterValue) => {
      return filterValue.some((val) => {
        var _row$getValue6;
        return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);
      });
    };
    arrIncludesSome.autoRemove = (val) => testFalsey(val) || !(val != null && val.length);
    const equals = (row, columnId, filterValue) => {
      return row.getValue(columnId) === filterValue;
    };
    equals.autoRemove = (val) => testFalsey(val);
    const weakEquals = (row, columnId, filterValue) => {
      return row.getValue(columnId) == filterValue;
    };
    weakEquals.autoRemove = (val) => testFalsey(val);
    const inNumberRange = (row, columnId, filterValue) => {
      let [min2, max2] = filterValue;
      const rowValue = row.getValue(columnId);
      return rowValue >= min2 && rowValue <= max2;
    };
    inNumberRange.resolveFilterValue = (val) => {
      let [unsafeMin, unsafeMax] = val;
      let parsedMin = typeof unsafeMin !== "number" ? parseFloat(unsafeMin) : unsafeMin;
      let parsedMax = typeof unsafeMax !== "number" ? parseFloat(unsafeMax) : unsafeMax;
      let min2 = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;
      let max2 = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;
      if (min2 > max2) {
        const temp = min2;
        min2 = max2;
        max2 = temp;
      }
      return [min2, max2];
    };
    inNumberRange.autoRemove = (val) => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);
    const filterFns = {
      includesString,
      includesStringSensitive,
      equalsString,
      arrIncludes,
      arrIncludesAll,
      arrIncludesSome,
      equals,
      weakEquals,
      inNumberRange
    };
    function testFalsey(val) {
      return val === void 0 || val === null || val === "";
    }
    const Filters = {
      getDefaultColumnDef: () => {
        return {
          filterFn: "auto"
        };
      },
      getInitialState: (state) => {
        return {
          columnFilters: [],
          globalFilter: void 0,
          // filtersProgress: 1,
          // facetProgress: {},
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onColumnFiltersChange: makeStateUpdater("columnFilters", table),
          onGlobalFilterChange: makeStateUpdater("globalFilter", table),
          filterFromLeafRows: false,
          maxLeafRowFilterDepth: 100,
          globalFilterFn: "auto",
          getColumnCanGlobalFilter: (column) => {
            var _table$getCoreRowMode;
            const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null || (_table$getCoreRowMode = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode.getValue();
            return typeof value === "string" || typeof value === "number";
          }
        };
      },
      createColumn: (column, table) => {
        column.getAutoFilterFn = () => {
          const firstRow = table.getCoreRowModel().flatRows[0];
          const value = firstRow == null ? void 0 : firstRow.getValue(column.id);
          if (typeof value === "string") {
            return filterFns.includesString;
          }
          if (typeof value === "number") {
            return filterFns.inNumberRange;
          }
          if (typeof value === "boolean") {
            return filterFns.equals;
          }
          if (value !== null && typeof value === "object") {
            return filterFns.equals;
          }
          if (Array.isArray(value)) {
            return filterFns.arrIncludes;
          }
          return filterFns.weakEquals;
        };
        column.getFilterFn = () => {
          var _table$options$filter, _table$options$filter2;
          return isFunction$2(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === "auto" ? column.getAutoFilterFn() : (
            // @ts-ignore
            (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn]
          );
        };
        column.getCanFilter = () => {
          var _column$columnDef$ena, _table$options$enable, _table$options$enable2;
          return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;
        };
        column.getCanGlobalFilter = () => {
          var _column$columnDef$ena2, _table$options$enable3, _table$options$enable4, _table$options$getCol;
          return ((_column$columnDef$ena2 = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena2 : true) && ((_table$options$enable3 = table.options.enableGlobalFilter) != null ? _table$options$enable3 : true) && ((_table$options$enable4 = table.options.enableFilters) != null ? _table$options$enable4 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;
        };
        column.getIsFiltered = () => column.getFilterIndex() > -1;
        column.getFilterValue = () => {
          var _table$getState$colum;
          return (_table$getState$colum = table.getState().columnFilters) == null || (_table$getState$colum = _table$getState$colum.find((d2) => d2.id === column.id)) == null ? void 0 : _table$getState$colum.value;
        };
        column.getFilterIndex = () => {
          var _table$getState$colum2, _table$getState$colum3;
          return (_table$getState$colum2 = (_table$getState$colum3 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum3.findIndex((d2) => d2.id === column.id)) != null ? _table$getState$colum2 : -1;
        };
        column.setFilterValue = (value) => {
          table.setColumnFilters((old) => {
            const filterFn = column.getFilterFn();
            const previousfilter = old == null ? void 0 : old.find((d2) => d2.id === column.id);
            const newFilter = functionalUpdate(value, previousfilter ? previousfilter.value : void 0);
            if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {
              var _old$filter;
              return (_old$filter = old == null ? void 0 : old.filter((d2) => d2.id !== column.id)) != null ? _old$filter : [];
            }
            const newFilterObj = {
              id: column.id,
              value: newFilter
            };
            if (previousfilter) {
              var _old$map;
              return (_old$map = old == null ? void 0 : old.map((d2) => {
                if (d2.id === column.id) {
                  return newFilterObj;
                }
                return d2;
              })) != null ? _old$map : [];
            }
            if (old != null && old.length) {
              return [...old, newFilterObj];
            }
            return [newFilterObj];
          });
        };
        column._getFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id);
        column.getFacetedRowModel = () => {
          if (!column._getFacetedRowModel) {
            return table.getPreFilteredRowModel();
          }
          return column._getFacetedRowModel();
        };
        column._getFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id);
        column.getFacetedUniqueValues = () => {
          if (!column._getFacetedUniqueValues) {
            return /* @__PURE__ */ new Map();
          }
          return column._getFacetedUniqueValues();
        };
        column._getFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id);
        column.getFacetedMinMaxValues = () => {
          if (!column._getFacetedMinMaxValues) {
            return void 0;
          }
          return column._getFacetedMinMaxValues();
        };
      },
      createRow: (row, table) => {
        row.columnFilters = {};
        row.columnFiltersMeta = {};
      },
      createTable: (table) => {
        table.getGlobalAutoFilterFn = () => {
          return filterFns.includesString;
        };
        table.getGlobalFilterFn = () => {
          var _table$options$filter3, _table$options$filter4;
          const {
            globalFilterFn
          } = table.options;
          return isFunction$2(globalFilterFn) ? globalFilterFn : globalFilterFn === "auto" ? table.getGlobalAutoFilterFn() : (
            // @ts-ignore
            (_table$options$filter3 = (_table$options$filter4 = table.options.filterFns) == null ? void 0 : _table$options$filter4[globalFilterFn]) != null ? _table$options$filter3 : filterFns[globalFilterFn]
          );
        };
        table.setColumnFilters = (updater) => {
          const leafColumns = table.getAllLeafColumns();
          const updateFn = (old) => {
            var _functionalUpdate;
            return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter((filter) => {
              const column = leafColumns.find((d2) => d2.id === filter.id);
              if (column) {
                const filterFn = column.getFilterFn();
                if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {
                  return false;
                }
              }
              return true;
            });
          };
          table.options.onColumnFiltersChange == null || table.options.onColumnFiltersChange(updateFn);
        };
        table.setGlobalFilter = (updater) => {
          table.options.onGlobalFilterChange == null || table.options.onGlobalFilterChange(updater);
        };
        table.resetGlobalFilter = (defaultState2) => {
          table.setGlobalFilter(defaultState2 ? void 0 : table.initialState.globalFilter);
        };
        table.resetColumnFilters = (defaultState2) => {
          var _table$initialState$c, _table$initialState;
          table.setColumnFilters(defaultState2 ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);
        };
        table.getPreFilteredRowModel = () => table.getCoreRowModel();
        table.getFilteredRowModel = () => {
          if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {
            table._getFilteredRowModel = table.options.getFilteredRowModel(table);
          }
          if (table.options.manualFiltering || !table._getFilteredRowModel) {
            return table.getPreFilteredRowModel();
          }
          return table._getFilteredRowModel();
        };
        table._getGlobalFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, "__global__");
        table.getGlobalFacetedRowModel = () => {
          if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {
            return table.getPreFilteredRowModel();
          }
          return table._getGlobalFacetedRowModel();
        };
        table._getGlobalFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, "__global__");
        table.getGlobalFacetedUniqueValues = () => {
          if (!table._getGlobalFacetedUniqueValues) {
            return /* @__PURE__ */ new Map();
          }
          return table._getGlobalFacetedUniqueValues();
        };
        table._getGlobalFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, "__global__");
        table.getGlobalFacetedMinMaxValues = () => {
          if (!table._getGlobalFacetedMinMaxValues) {
            return;
          }
          return table._getGlobalFacetedMinMaxValues();
        };
      }
    };
    function shouldAutoRemoveFilter(filterFn, value, column) {
      return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === "undefined" || typeof value === "string" && !value;
    }
    const sum = (columnId, _leafRows, childRows) => {
      return childRows.reduce((sum2, next) => {
        const nextValue = next.getValue(columnId);
        return sum2 + (typeof nextValue === "number" ? nextValue : 0);
      }, 0);
    };
    const min = (columnId, _leafRows, childRows) => {
      let min2;
      childRows.forEach((row) => {
        const value = row.getValue(columnId);
        if (value != null && (min2 > value || min2 === void 0 && value >= value)) {
          min2 = value;
        }
      });
      return min2;
    };
    const max = (columnId, _leafRows, childRows) => {
      let max2;
      childRows.forEach((row) => {
        const value = row.getValue(columnId);
        if (value != null && (max2 < value || max2 === void 0 && value >= value)) {
          max2 = value;
        }
      });
      return max2;
    };
    const extent = (columnId, _leafRows, childRows) => {
      let min2;
      let max2;
      childRows.forEach((row) => {
        const value = row.getValue(columnId);
        if (value != null) {
          if (min2 === void 0) {
            if (value >= value)
              min2 = max2 = value;
          } else {
            if (min2 > value)
              min2 = value;
            if (max2 < value)
              max2 = value;
          }
        }
      });
      return [min2, max2];
    };
    const mean = (columnId, leafRows) => {
      let count2 = 0;
      let sum2 = 0;
      leafRows.forEach((row) => {
        let value = row.getValue(columnId);
        if (value != null && (value = +value) >= value) {
          ++count2, sum2 += value;
        }
      });
      if (count2)
        return sum2 / count2;
      return;
    };
    const median = (columnId, leafRows) => {
      if (!leafRows.length) {
        return;
      }
      const values = leafRows.map((row) => row.getValue(columnId));
      if (!isNumberArray(values)) {
        return;
      }
      if (values.length === 1) {
        return values[0];
      }
      const mid = Math.floor(values.length / 2);
      const nums = values.sort((a, b2) => a - b2);
      return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;
    };
    const unique = (columnId, leafRows) => {
      return Array.from(new Set(leafRows.map((d2) => d2.getValue(columnId))).values());
    };
    const uniqueCount = (columnId, leafRows) => {
      return new Set(leafRows.map((d2) => d2.getValue(columnId))).size;
    };
    const count = (_columnId, leafRows) => {
      return leafRows.length;
    };
    const aggregationFns = {
      sum,
      min,
      max,
      extent,
      mean,
      median,
      unique,
      uniqueCount,
      count
    };
    const Grouping = {
      getDefaultColumnDef: () => {
        return {
          aggregatedCell: (props) => {
            var _toString, _props$getValue;
            return (_toString = (_props$getValue = props.getValue()) == null || _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;
          },
          aggregationFn: "auto"
        };
      },
      getInitialState: (state) => {
        return {
          grouping: [],
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onGroupingChange: makeStateUpdater("grouping", table),
          groupedColumnMode: "reorder"
        };
      },
      createColumn: (column, table) => {
        column.toggleGrouping = () => {
          table.setGrouping((old) => {
            if (old != null && old.includes(column.id)) {
              return old.filter((d2) => d2 !== column.id);
            }
            return [...old != null ? old : [], column.id];
          });
        };
        column.getCanGroup = () => {
          var _ref, _ref2, _ref3, _column$columnDef$ena;
          return (_ref = (_ref2 = (_ref3 = (_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) != null ? _ref3 : table.options.enableGrouping) != null ? _ref2 : true) != null ? _ref : !!column.accessorFn;
        };
        column.getIsGrouped = () => {
          var _table$getState$group;
          return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);
        };
        column.getGroupedIndex = () => {
          var _table$getState$group2;
          return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);
        };
        column.getToggleGroupingHandler = () => {
          const canGroup = column.getCanGroup();
          return () => {
            if (!canGroup)
              return;
            column.toggleGrouping();
          };
        };
        column.getAutoAggregationFn = () => {
          const firstRow = table.getCoreRowModel().flatRows[0];
          const value = firstRow == null ? void 0 : firstRow.getValue(column.id);
          if (typeof value === "number") {
            return aggregationFns.sum;
          }
          if (Object.prototype.toString.call(value) === "[object Date]") {
            return aggregationFns.extent;
          }
        };
        column.getAggregationFn = () => {
          var _table$options$aggreg, _table$options$aggreg2;
          if (!column) {
            throw new Error();
          }
          return isFunction$2(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === "auto" ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];
        };
      },
      createTable: (table) => {
        table.setGrouping = (updater) => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater);
        table.resetGrouping = (defaultState2) => {
          var _table$initialState$g, _table$initialState;
          table.setGrouping(defaultState2 ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);
        };
        table.getPreGroupedRowModel = () => table.getFilteredRowModel();
        table.getGroupedRowModel = () => {
          if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {
            table._getGroupedRowModel = table.options.getGroupedRowModel(table);
          }
          if (table.options.manualGrouping || !table._getGroupedRowModel) {
            return table.getPreGroupedRowModel();
          }
          return table._getGroupedRowModel();
        };
      },
      createRow: (row, table) => {
        row.getIsGrouped = () => !!row.groupingColumnId;
        row.getGroupingValue = (columnId) => {
          if (row._groupingValuesCache.hasOwnProperty(columnId)) {
            return row._groupingValuesCache[columnId];
          }
          const column = table.getColumn(columnId);
          if (!(column != null && column.columnDef.getGroupingValue)) {
            return row.getValue(columnId);
          }
          row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(row.original);
          return row._groupingValuesCache[columnId];
        };
        row._groupingValuesCache = {};
      },
      createCell: (cell, column, row, table) => {
        cell.getIsGrouped = () => column.getIsGrouped() && column.id === row.groupingColumnId;
        cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped();
        cell.getIsAggregated = () => {
          var _row$subRows;
          return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);
        };
      }
    };
    function orderColumns(leafColumns, grouping, groupedColumnMode) {
      if (!(grouping != null && grouping.length) || !groupedColumnMode) {
        return leafColumns;
      }
      const nonGroupingColumns = leafColumns.filter((col) => !grouping.includes(col.id));
      if (groupedColumnMode === "remove") {
        return nonGroupingColumns;
      }
      const groupingColumns = grouping.map((g2) => leafColumns.find((col) => col.id === g2)).filter(Boolean);
      return [...groupingColumns, ...nonGroupingColumns];
    }
    const Ordering = {
      getInitialState: (state) => {
        return {
          columnOrder: [],
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onColumnOrderChange: makeStateUpdater("columnOrder", table)
        };
      },
      createTable: (table) => {
        table.setColumnOrder = (updater) => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater);
        table.resetColumnOrder = (defaultState2) => {
          var _table$initialState$c;
          table.setColumnOrder(defaultState2 ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);
        };
        table._getOrderColumnsFn = memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => (columns) => {
          let orderedColumns = [];
          if (!(columnOrder != null && columnOrder.length)) {
            orderedColumns = columns;
          } else {
            const columnOrderCopy = [...columnOrder];
            const columnsCopy = [...columns];
            while (columnsCopy.length && columnOrderCopy.length) {
              const targetColumnId = columnOrderCopy.shift();
              const foundIndex = columnsCopy.findIndex((d2) => d2.id === targetColumnId);
              if (foundIndex > -1) {
                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);
              }
            }
            orderedColumns = [...orderedColumns, ...columnsCopy];
          }
          return orderColumns(orderedColumns, grouping, groupedColumnMode);
        }, {
          key: false
          // debug: () => table.options.debugAll ?? table.options.debugTable,
        });
      }
    };
    const defaultPageIndex = 0;
    const defaultPageSize = 10;
    const getDefaultPaginationState = () => ({
      pageIndex: defaultPageIndex,
      pageSize: defaultPageSize
    });
    const Pagination = {
      getInitialState: (state) => {
        return {
          ...state,
          pagination: {
            ...getDefaultPaginationState(),
            ...state == null ? void 0 : state.pagination
          }
        };
      },
      getDefaultOptions: (table) => {
        return {
          onPaginationChange: makeStateUpdater("pagination", table)
        };
      },
      createTable: (table) => {
        let registered = false;
        let queued = false;
        table._autoResetPageIndex = () => {
          var _ref, _table$options$autoRe;
          if (!registered) {
            table._queue(() => {
              registered = true;
            });
            return;
          }
          if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {
            if (queued)
              return;
            queued = true;
            table._queue(() => {
              table.resetPageIndex();
              queued = false;
            });
          }
        };
        table.setPagination = (updater) => {
          const safeUpdater = (old) => {
            let newState = functionalUpdate(updater, old);
            return newState;
          };
          return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);
        };
        table.resetPagination = (defaultState2) => {
          var _table$initialState$p;
          table.setPagination(defaultState2 ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());
        };
        table.setPageIndex = (updater) => {
          table.setPagination((old) => {
            let pageIndex = functionalUpdate(updater, old.pageIndex);
            const maxPageIndex = typeof table.options.pageCount === "undefined" || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;
            pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));
            return {
              ...old,
              pageIndex
            };
          });
        };
        table.resetPageIndex = (defaultState2) => {
          var _table$initialState$p2, _table$initialState;
          table.setPageIndex(defaultState2 ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null || (_table$initialState = _table$initialState.pagination) == null ? void 0 : _table$initialState.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);
        };
        table.resetPageSize = (defaultState2) => {
          var _table$initialState$p3, _table$initialState2;
          table.setPageSize(defaultState2 ? defaultPageSize : (_table$initialState$p3 = (_table$initialState2 = table.initialState) == null || (_table$initialState2 = _table$initialState2.pagination) == null ? void 0 : _table$initialState2.pageSize) != null ? _table$initialState$p3 : defaultPageSize);
        };
        table.setPageSize = (updater) => {
          table.setPagination((old) => {
            const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));
            const topRowIndex = old.pageSize * old.pageIndex;
            const pageIndex = Math.floor(topRowIndex / pageSize);
            return {
              ...old,
              pageIndex,
              pageSize
            };
          });
        };
        table.setPageCount = (updater) => table.setPagination((old) => {
          var _table$options$pageCo;
          let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);
          if (typeof newPageCount === "number") {
            newPageCount = Math.max(-1, newPageCount);
          }
          return {
            ...old,
            pageCount: newPageCount
          };
        });
        table.getPageOptions = memo(() => [table.getPageCount()], (pageCount) => {
          let pageOptions = [];
          if (pageCount && pageCount > 0) {
            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);
          }
          return pageOptions;
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA;
            return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
          }
        });
        table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0;
        table.getCanNextPage = () => {
          const {
            pageIndex
          } = table.getState().pagination;
          const pageCount = table.getPageCount();
          if (pageCount === -1) {
            return true;
          }
          if (pageCount === 0) {
            return false;
          }
          return pageIndex < pageCount - 1;
        };
        table.previousPage = () => {
          return table.setPageIndex((old) => old - 1);
        };
        table.nextPage = () => {
          return table.setPageIndex((old) => {
            return old + 1;
          });
        };
        table.getPrePaginationRowModel = () => table.getExpandedRowModel();
        table.getPaginationRowModel = () => {
          if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {
            table._getPaginationRowModel = table.options.getPaginationRowModel(table);
          }
          if (table.options.manualPagination || !table._getPaginationRowModel) {
            return table.getPrePaginationRowModel();
          }
          return table._getPaginationRowModel();
        };
        table.getPageCount = () => {
          var _table$options$pageCo2;
          return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getPrePaginationRowModel().rows.length / table.getState().pagination.pageSize);
        };
      }
    };
    const getDefaultColumnPinningState = () => ({
      left: [],
      right: []
    });
    const getDefaultRowPinningState = () => ({
      top: [],
      bottom: []
    });
    const Pinning = {
      getInitialState: (state) => {
        return {
          columnPinning: getDefaultColumnPinningState(),
          rowPinning: getDefaultRowPinningState(),
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onColumnPinningChange: makeStateUpdater("columnPinning", table),
          onRowPinningChange: makeStateUpdater("rowPinning", table)
        };
      },
      createColumn: (column, table) => {
        column.pin = (position) => {
          const columnIds = column.getLeafColumns().map((d2) => d2.id).filter(Boolean);
          table.setColumnPinning((old) => {
            var _old$left3, _old$right3;
            if (position === "right") {
              var _old$left, _old$right;
              return {
                left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter((d2) => !(columnIds != null && columnIds.includes(d2))),
                right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter((d2) => !(columnIds != null && columnIds.includes(d2))), ...columnIds]
              };
            }
            if (position === "left") {
              var _old$left2, _old$right2;
              return {
                left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter((d2) => !(columnIds != null && columnIds.includes(d2))), ...columnIds],
                right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter((d2) => !(columnIds != null && columnIds.includes(d2)))
              };
            }
            return {
              left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter((d2) => !(columnIds != null && columnIds.includes(d2))),
              right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter((d2) => !(columnIds != null && columnIds.includes(d2)))
            };
          });
        };
        column.getCanPin = () => {
          const leafColumns = column.getLeafColumns();
          return leafColumns.some((d2) => {
            var _d$columnDef$enablePi, _ref, _table$options$enable;
            return ((_d$columnDef$enablePi = d2.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_ref = (_table$options$enable = table.options.enableColumnPinning) != null ? _table$options$enable : table.options.enablePinning) != null ? _ref : true);
          });
        };
        column.getIsPinned = () => {
          const leafColumnIds = column.getLeafColumns().map((d2) => d2.id);
          const {
            left,
            right
          } = table.getState().columnPinning;
          const isLeft = leafColumnIds.some((d2) => left == null ? void 0 : left.includes(d2));
          const isRight = leafColumnIds.some((d2) => right == null ? void 0 : right.includes(d2));
          return isLeft ? "left" : isRight ? "right" : false;
        };
        column.getPinnedIndex = () => {
          var _table$getState$colum, _table$getState$colum2;
          const position = column.getIsPinned();
          return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null || (_table$getState$colum2 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum2.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;
        };
      },
      createRow: (row, table) => {
        row.pin = (position, includeLeafRows, includeParentRows) => {
          const leafRowIds = includeLeafRows ? row.getLeafRows().map((_ref2) => {
            let {
              id: id2
            } = _ref2;
            return id2;
          }) : [];
          const parentRowIds = includeParentRows ? row.getParentRows().map((_ref3) => {
            let {
              id: id2
            } = _ref3;
            return id2;
          }) : [];
          const rowIds = /* @__PURE__ */ new Set([...parentRowIds, row.id, ...leafRowIds]);
          table.setRowPinning((old) => {
            var _old$top3, _old$bottom3;
            if (position === "bottom") {
              var _old$top, _old$bottom;
              return {
                top: ((_old$top = old == null ? void 0 : old.top) != null ? _old$top : []).filter((d2) => !(rowIds != null && rowIds.has(d2))),
                bottom: [...((_old$bottom = old == null ? void 0 : old.bottom) != null ? _old$bottom : []).filter((d2) => !(rowIds != null && rowIds.has(d2))), ...Array.from(rowIds)]
              };
            }
            if (position === "top") {
              var _old$top2, _old$bottom2;
              return {
                top: [...((_old$top2 = old == null ? void 0 : old.top) != null ? _old$top2 : []).filter((d2) => !(rowIds != null && rowIds.has(d2))), ...Array.from(rowIds)],
                bottom: ((_old$bottom2 = old == null ? void 0 : old.bottom) != null ? _old$bottom2 : []).filter((d2) => !(rowIds != null && rowIds.has(d2)))
              };
            }
            return {
              top: ((_old$top3 = old == null ? void 0 : old.top) != null ? _old$top3 : []).filter((d2) => !(rowIds != null && rowIds.has(d2))),
              bottom: ((_old$bottom3 = old == null ? void 0 : old.bottom) != null ? _old$bottom3 : []).filter((d2) => !(rowIds != null && rowIds.has(d2)))
            };
          });
        };
        row.getCanPin = () => {
          var _ref4;
          const {
            enableRowPinning,
            enablePinning
          } = table.options;
          if (typeof enableRowPinning === "function") {
            return enableRowPinning(row);
          }
          return (_ref4 = enableRowPinning != null ? enableRowPinning : enablePinning) != null ? _ref4 : true;
        };
        row.getIsPinned = () => {
          const rowIds = [row.id];
          const {
            top,
            bottom
          } = table.getState().rowPinning;
          const isTop = rowIds.some((d2) => top == null ? void 0 : top.includes(d2));
          const isBottom = rowIds.some((d2) => bottom == null ? void 0 : bottom.includes(d2));
          return isTop ? "top" : isBottom ? "bottom" : false;
        };
        row.getPinnedIndex = () => {
          var _table$_getPinnedRows, _visiblePinnedRowIds$;
          const position = row.getIsPinned();
          if (!position)
            return -1;
          const visiblePinnedRowIds = (_table$_getPinnedRows = table._getPinnedRows(position)) == null ? void 0 : _table$_getPinnedRows.map((_ref5) => {
            let {
              id: id2
            } = _ref5;
            return id2;
          });
          return (_visiblePinnedRowIds$ = visiblePinnedRowIds == null ? void 0 : visiblePinnedRowIds.indexOf(row.id)) != null ? _visiblePinnedRowIds$ : -1;
        };
        row.getCenterVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {
          const leftAndRight = [...left != null ? left : [], ...right != null ? right : []];
          return allCells.filter((d2) => !leftAndRight.includes(d2.column.id));
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA;
            return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;
          }
        });
        row.getLeftVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, ,], (allCells, left) => {
          const cells = (left != null ? left : []).map((columnId) => allCells.find((cell) => cell.column.id === columnId)).filter(Boolean).map((d2) => ({
            ...d2,
            position: "left"
          }));
          return cells;
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA2;
            return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;
          }
        });
        row.getRightVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {
          const cells = (right != null ? right : []).map((columnId) => allCells.find((cell) => cell.column.id === columnId)).filter(Boolean).map((d2) => ({
            ...d2,
            position: "right"
          }));
          return cells;
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA3;
            return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugRows;
          }
        });
      },
      createTable: (table) => {
        table.setColumnPinning = (updater) => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater);
        table.resetColumnPinning = (defaultState2) => {
          var _table$initialState$c, _table$initialState;
          return table.setColumnPinning(defaultState2 ? getDefaultColumnPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultColumnPinningState());
        };
        table.getIsSomeColumnsPinned = (position) => {
          var _pinningState$positio;
          const pinningState = table.getState().columnPinning;
          if (!position) {
            var _pinningState$left, _pinningState$right;
            return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));
          }
          return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);
        };
        table.getLeftLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {
          return (left != null ? left : []).map((columnId) => allColumns.find((column) => column.id === columnId)).filter(Boolean);
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA4;
            return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;
          }
        });
        table.getRightLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {
          return (right != null ? right : []).map((columnId) => allColumns.find((column) => column.id === columnId)).filter(Boolean);
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA5;
            return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;
          }
        });
        table.getCenterLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {
          const leftAndRight = [...left != null ? left : [], ...right != null ? right : []];
          return allColumns.filter((d2) => !leftAndRight.includes(d2.id));
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA6;
            return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugColumns;
          }
        });
        table.setRowPinning = (updater) => table.options.onRowPinningChange == null ? void 0 : table.options.onRowPinningChange(updater);
        table.resetRowPinning = (defaultState2) => {
          var _table$initialState$r, _table$initialState2;
          return table.setRowPinning(defaultState2 ? getDefaultRowPinningState() : (_table$initialState$r = (_table$initialState2 = table.initialState) == null ? void 0 : _table$initialState2.rowPinning) != null ? _table$initialState$r : getDefaultRowPinningState());
        };
        table.getIsSomeRowsPinned = (position) => {
          var _pinningState$positio2;
          const pinningState = table.getState().rowPinning;
          if (!position) {
            var _pinningState$top, _pinningState$bottom;
            return Boolean(((_pinningState$top = pinningState.top) == null ? void 0 : _pinningState$top.length) || ((_pinningState$bottom = pinningState.bottom) == null ? void 0 : _pinningState$bottom.length));
          }
          return Boolean((_pinningState$positio2 = pinningState[position]) == null ? void 0 : _pinningState$positio2.length);
        };
        table._getPinnedRows = (position) => memo(() => [table.getRowModel().rows, table.getState().rowPinning[position]], (visibleRows, pinnedRowIds) => {
          var _table$options$keepPi;
          const rows = ((_table$options$keepPi = table.options.keepPinnedRows) != null ? _table$options$keepPi : true) ? (
            //get all rows that are pinned even if they would not be otherwise visible
            //account for expanded parent rows, but not pagination or filtering
            (pinnedRowIds != null ? pinnedRowIds : []).map((rowId) => {
              const row = table.getRow(rowId, true);
              return row.getIsAllParentsExpanded() ? row : null;
            })
          ) : (
            //else get only visible rows that are pinned
            (pinnedRowIds != null ? pinnedRowIds : []).map((rowId) => visibleRows.find((row) => row.id === rowId))
          );
          return rows.filter(Boolean).map((d2) => ({
            ...d2,
            position
          }));
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA7;
            return (_table$options$debugA7 = table.options.debugAll) != null ? _table$options$debugA7 : table.options.debugRows;
          }
        })();
        table.getTopRows = () => table._getPinnedRows("top");
        table.getBottomRows = () => table._getPinnedRows("bottom");
        table.getCenterRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.top, table.getState().rowPinning.bottom], (allRows, top, bottom) => {
          const topAndBottom = /* @__PURE__ */ new Set([...top != null ? top : [], ...bottom != null ? bottom : []]);
          return allRows.filter((d2) => !topAndBottom.has(d2.id));
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA8;
            return (_table$options$debugA8 = table.options.debugAll) != null ? _table$options$debugA8 : table.options.debugRows;
          }
        });
      }
    };
    const RowSelection = {
      getInitialState: (state) => {
        return {
          rowSelection: {},
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onRowSelectionChange: makeStateUpdater("rowSelection", table),
          enableRowSelection: true,
          enableMultiRowSelection: true,
          enableSubRowSelection: true
          // enableGroupingRowSelection: false,
          // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,
          // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,
        };
      },
      createTable: (table) => {
        table.setRowSelection = (updater) => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater);
        table.resetRowSelection = (defaultState2) => {
          var _table$initialState$r;
          return table.setRowSelection(defaultState2 ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});
        };
        table.toggleAllRowsSelected = (value) => {
          table.setRowSelection((old) => {
            value = typeof value !== "undefined" ? value : !table.getIsAllRowsSelected();
            const rowSelection = {
              ...old
            };
            const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;
            if (value) {
              preGroupedFlatRows.forEach((row) => {
                if (!row.getCanSelect()) {
                  return;
                }
                rowSelection[row.id] = true;
              });
            } else {
              preGroupedFlatRows.forEach((row) => {
                delete rowSelection[row.id];
              });
            }
            return rowSelection;
          });
        };
        table.toggleAllPageRowsSelected = (value) => table.setRowSelection((old) => {
          const resolvedValue = typeof value !== "undefined" ? value : !table.getIsAllPageRowsSelected();
          const rowSelection = {
            ...old
          };
          table.getRowModel().rows.forEach((row) => {
            mutateRowIsSelected(rowSelection, row.id, resolvedValue, true, table);
          });
          return rowSelection;
        });
        table.getPreSelectedRowModel = () => table.getCoreRowModel();
        table.getSelectedRowModel = memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {
          if (!Object.keys(rowSelection).length) {
            return {
              rows: [],
              flatRows: [],
              rowsById: {}
            };
          }
          return selectRowsFn(table, rowModel);
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA;
            return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
          }
        });
        table.getFilteredSelectedRowModel = memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {
          if (!Object.keys(rowSelection).length) {
            return {
              rows: [],
              flatRows: [],
              rowsById: {}
            };
          }
          return selectRowsFn(table, rowModel);
        }, {
          key: "getFilteredSelectedRowModel",
          debug: () => {
            var _table$options$debugA2;
            return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugTable;
          }
        });
        table.getGroupedSelectedRowModel = memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {
          if (!Object.keys(rowSelection).length) {
            return {
              rows: [],
              flatRows: [],
              rowsById: {}
            };
          }
          return selectRowsFn(table, rowModel);
        }, {
          key: "getGroupedSelectedRowModel",
          debug: () => {
            var _table$options$debugA3;
            return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugTable;
          }
        });
        table.getIsAllRowsSelected = () => {
          const preGroupedFlatRows = table.getFilteredRowModel().flatRows;
          const {
            rowSelection
          } = table.getState();
          let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);
          if (isAllRowsSelected) {
            if (preGroupedFlatRows.some((row) => row.getCanSelect() && !rowSelection[row.id])) {
              isAllRowsSelected = false;
            }
          }
          return isAllRowsSelected;
        };
        table.getIsAllPageRowsSelected = () => {
          const paginationFlatRows = table.getPaginationRowModel().flatRows.filter((row) => row.getCanSelect());
          const {
            rowSelection
          } = table.getState();
          let isAllPageRowsSelected = !!paginationFlatRows.length;
          if (isAllPageRowsSelected && paginationFlatRows.some((row) => !rowSelection[row.id])) {
            isAllPageRowsSelected = false;
          }
          return isAllPageRowsSelected;
        };
        table.getIsSomeRowsSelected = () => {
          var _table$getState$rowSe;
          const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;
          return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;
        };
        table.getIsSomePageRowsSelected = () => {
          const paginationFlatRows = table.getPaginationRowModel().flatRows;
          return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.filter((row) => row.getCanSelect()).some((d2) => d2.getIsSelected() || d2.getIsSomeSelected());
        };
        table.getToggleAllRowsSelectedHandler = () => {
          return (e2) => {
            table.toggleAllRowsSelected(e2.target.checked);
          };
        };
        table.getToggleAllPageRowsSelectedHandler = () => {
          return (e2) => {
            table.toggleAllPageRowsSelected(e2.target.checked);
          };
        };
      },
      createRow: (row, table) => {
        row.toggleSelected = (value, opts) => {
          const isSelected = row.getIsSelected();
          table.setRowSelection((old) => {
            var _opts$selectChildren;
            value = typeof value !== "undefined" ? value : !isSelected;
            if (row.getCanSelect() && isSelected === value) {
              return old;
            }
            const selectedRowIds = {
              ...old
            };
            mutateRowIsSelected(selectedRowIds, row.id, value, (_opts$selectChildren = opts == null ? void 0 : opts.selectChildren) != null ? _opts$selectChildren : true, table);
            return selectedRowIds;
          });
        };
        row.getIsSelected = () => {
          const {
            rowSelection
          } = table.getState();
          return isRowSelected(row, rowSelection);
        };
        row.getIsSomeSelected = () => {
          const {
            rowSelection
          } = table.getState();
          return isSubRowSelected(row, rowSelection) === "some";
        };
        row.getIsAllSubRowsSelected = () => {
          const {
            rowSelection
          } = table.getState();
          return isSubRowSelected(row, rowSelection) === "all";
        };
        row.getCanSelect = () => {
          var _table$options$enable;
          if (typeof table.options.enableRowSelection === "function") {
            return table.options.enableRowSelection(row);
          }
          return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;
        };
        row.getCanSelectSubRows = () => {
          var _table$options$enable2;
          if (typeof table.options.enableSubRowSelection === "function") {
            return table.options.enableSubRowSelection(row);
          }
          return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;
        };
        row.getCanMultiSelect = () => {
          var _table$options$enable3;
          if (typeof table.options.enableMultiRowSelection === "function") {
            return table.options.enableMultiRowSelection(row);
          }
          return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;
        };
        row.getToggleSelectedHandler = () => {
          const canSelect = row.getCanSelect();
          return (e2) => {
            var _target;
            if (!canSelect)
              return;
            row.toggleSelected((_target = e2.target) == null ? void 0 : _target.checked);
          };
        };
      }
    };
    const mutateRowIsSelected = (selectedRowIds, id2, value, includeChildren, table) => {
      var _row$subRows;
      const row = table.getRow(id2);
      if (value) {
        if (!row.getCanMultiSelect()) {
          Object.keys(selectedRowIds).forEach((key) => delete selectedRowIds[key]);
        }
        if (row.getCanSelect()) {
          selectedRowIds[id2] = true;
        }
      } else {
        delete selectedRowIds[id2];
      }
      if (includeChildren && (_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {
        row.subRows.forEach((row2) => mutateRowIsSelected(selectedRowIds, row2.id, value, includeChildren, table));
      }
    };
    function selectRowsFn(table, rowModel) {
      const rowSelection = table.getState().rowSelection;
      const newSelectedFlatRows = [];
      const newSelectedRowsById = {};
      const recurseRows = function(rows, depth) {
        return rows.map((row) => {
          var _row$subRows2;
          const isSelected = isRowSelected(row, rowSelection);
          if (isSelected) {
            newSelectedFlatRows.push(row);
            newSelectedRowsById[row.id] = row;
          }
          if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {
            row = {
              ...row,
              subRows: recurseRows(row.subRows)
            };
          }
          if (isSelected) {
            return row;
          }
        }).filter(Boolean);
      };
      return {
        rows: recurseRows(rowModel.rows),
        flatRows: newSelectedFlatRows,
        rowsById: newSelectedRowsById
      };
    }
    function isRowSelected(row, selection) {
      var _selection$row$id;
      return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;
    }
    function isSubRowSelected(row, selection, table) {
      var _row$subRows3;
      if (!((_row$subRows3 = row.subRows) != null && _row$subRows3.length))
        return false;
      let allChildrenSelected = true;
      let someSelected = false;
      row.subRows.forEach((subRow) => {
        if (someSelected && !allChildrenSelected) {
          return;
        }
        if (subRow.getCanSelect()) {
          if (isRowSelected(subRow, selection)) {
            someSelected = true;
          } else {
            allChildrenSelected = false;
          }
        }
        if (subRow.subRows && subRow.subRows.length) {
          const subRowChildrenSelected = isSubRowSelected(subRow, selection);
          if (subRowChildrenSelected === "all") {
            someSelected = true;
          } else if (subRowChildrenSelected === "some") {
            someSelected = true;
            allChildrenSelected = false;
          } else {
            allChildrenSelected = false;
          }
        }
      });
      return allChildrenSelected ? "all" : someSelected ? "some" : false;
    }
    const reSplitAlphaNumeric = /([0-9]+)/gm;
    const alphanumeric = (rowA, rowB, columnId) => {
      return compareAlphanumeric(toString$1(rowA.getValue(columnId)).toLowerCase(), toString$1(rowB.getValue(columnId)).toLowerCase());
    };
    const alphanumericCaseSensitive = (rowA, rowB, columnId) => {
      return compareAlphanumeric(toString$1(rowA.getValue(columnId)), toString$1(rowB.getValue(columnId)));
    };
    const text = (rowA, rowB, columnId) => {
      return compareBasic(toString$1(rowA.getValue(columnId)).toLowerCase(), toString$1(rowB.getValue(columnId)).toLowerCase());
    };
    const textCaseSensitive = (rowA, rowB, columnId) => {
      return compareBasic(toString$1(rowA.getValue(columnId)), toString$1(rowB.getValue(columnId)));
    };
    const datetime = (rowA, rowB, columnId) => {
      const a = rowA.getValue(columnId);
      const b2 = rowB.getValue(columnId);
      return a > b2 ? 1 : a < b2 ? -1 : 0;
    };
    const basic = (rowA, rowB, columnId) => {
      return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));
    };
    function compareBasic(a, b2) {
      return a === b2 ? 0 : a > b2 ? 1 : -1;
    }
    function toString$1(a) {
      if (typeof a === "number") {
        if (isNaN(a) || a === Infinity || a === -Infinity) {
          return "";
        }
        return String(a);
      }
      if (typeof a === "string") {
        return a;
      }
      return "";
    }
    function compareAlphanumeric(aStr, bStr) {
      const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);
      const b2 = bStr.split(reSplitAlphaNumeric).filter(Boolean);
      while (a.length && b2.length) {
        const aa2 = a.shift();
        const bb2 = b2.shift();
        const an = parseInt(aa2, 10);
        const bn = parseInt(bb2, 10);
        const combo = [an, bn].sort();
        if (isNaN(combo[0])) {
          if (aa2 > bb2) {
            return 1;
          }
          if (bb2 > aa2) {
            return -1;
          }
          continue;
        }
        if (isNaN(combo[1])) {
          return isNaN(an) ? -1 : 1;
        }
        if (an > bn) {
          return 1;
        }
        if (bn > an) {
          return -1;
        }
      }
      return a.length - b2.length;
    }
    const sortingFns = {
      alphanumeric,
      alphanumericCaseSensitive,
      text,
      textCaseSensitive,
      datetime,
      basic
    };
    const Sorting = {
      getInitialState: (state) => {
        return {
          sorting: [],
          ...state
        };
      },
      getDefaultColumnDef: () => {
        return {
          sortingFn: "auto",
          sortUndefined: 1
        };
      },
      getDefaultOptions: (table) => {
        return {
          onSortingChange: makeStateUpdater("sorting", table),
          isMultiSortEvent: (e2) => {
            return e2.shiftKey;
          }
        };
      },
      createColumn: (column, table) => {
        column.getAutoSortingFn = () => {
          const firstRows = table.getFilteredRowModel().flatRows.slice(10);
          let isString2 = false;
          for (const row of firstRows) {
            const value = row == null ? void 0 : row.getValue(column.id);
            if (Object.prototype.toString.call(value) === "[object Date]") {
              return sortingFns.datetime;
            }
            if (typeof value === "string") {
              isString2 = true;
              if (value.split(reSplitAlphaNumeric).length > 1) {
                return sortingFns.alphanumeric;
              }
            }
          }
          if (isString2) {
            return sortingFns.text;
          }
          return sortingFns.basic;
        };
        column.getAutoSortDir = () => {
          const firstRow = table.getFilteredRowModel().flatRows[0];
          const value = firstRow == null ? void 0 : firstRow.getValue(column.id);
          if (typeof value === "string") {
            return "asc";
          }
          return "desc";
        };
        column.getSortingFn = () => {
          var _table$options$sortin, _table$options$sortin2;
          if (!column) {
            throw new Error();
          }
          return isFunction$2(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === "auto" ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];
        };
        column.toggleSorting = (desc, multi) => {
          const nextSortingOrder = column.getNextSortingOrder();
          const hasManualValue = typeof desc !== "undefined" && desc !== null;
          table.setSorting((old) => {
            const existingSorting = old == null ? void 0 : old.find((d2) => d2.id === column.id);
            const existingIndex = old == null ? void 0 : old.findIndex((d2) => d2.id === column.id);
            let newSorting = [];
            let sortAction;
            let nextDesc = hasManualValue ? desc : nextSortingOrder === "desc";
            if (old != null && old.length && column.getCanMultiSort() && multi) {
              if (existingSorting) {
                sortAction = "toggle";
              } else {
                sortAction = "add";
              }
            } else {
              if (old != null && old.length && existingIndex !== old.length - 1) {
                sortAction = "replace";
              } else if (existingSorting) {
                sortAction = "toggle";
              } else {
                sortAction = "replace";
              }
            }
            if (sortAction === "toggle") {
              if (!hasManualValue) {
                if (!nextSortingOrder) {
                  sortAction = "remove";
                }
              }
            }
            if (sortAction === "add") {
              var _table$options$maxMul;
              newSorting = [...old, {
                id: column.id,
                desc: nextDesc
              }];
              newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));
            } else if (sortAction === "toggle") {
              newSorting = old.map((d2) => {
                if (d2.id === column.id) {
                  return {
                    ...d2,
                    desc: nextDesc
                  };
                }
                return d2;
              });
            } else if (sortAction === "remove") {
              newSorting = old.filter((d2) => d2.id !== column.id);
            } else {
              newSorting = [{
                id: column.id,
                desc: nextDesc
              }];
            }
            return newSorting;
          });
        };
        column.getFirstSortDir = () => {
          var _ref, _column$columnDef$sor;
          const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === "desc";
          return sortDescFirst ? "desc" : "asc";
        };
        column.getNextSortingOrder = (multi) => {
          var _table$options$enable, _table$options$enable2;
          const firstSortDirection = column.getFirstSortDir();
          const isSorted = column.getIsSorted();
          if (!isSorted) {
            return firstSortDirection;
          }
          if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && // If enableSortRemove, enable in general
          (multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true)) {
            return false;
          }
          return isSorted === "desc" ? "asc" : "desc";
        };
        column.getCanSort = () => {
          var _column$columnDef$ena, _table$options$enable3;
          return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;
        };
        column.getCanMultiSort = () => {
          var _ref2, _column$columnDef$ena2;
          return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;
        };
        column.getIsSorted = () => {
          var _table$getState$sorti;
          const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find((d2) => d2.id === column.id);
          return !columnSort ? false : columnSort.desc ? "desc" : "asc";
        };
        column.getSortIndex = () => {
          var _table$getState$sorti2, _table$getState$sorti3;
          return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex((d2) => d2.id === column.id)) != null ? _table$getState$sorti2 : -1;
        };
        column.clearSorting = () => {
          table.setSorting((old) => old != null && old.length ? old.filter((d2) => d2.id !== column.id) : []);
        };
        column.getToggleSortingHandler = () => {
          const canSort = column.getCanSort();
          return (e2) => {
            if (!canSort)
              return;
            e2.persist == null || e2.persist();
            column.toggleSorting == null || column.toggleSorting(void 0, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e2) : false);
          };
        };
      },
      createTable: (table) => {
        table.setSorting = (updater) => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater);
        table.resetSorting = (defaultState2) => {
          var _table$initialState$s, _table$initialState;
          table.setSorting(defaultState2 ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);
        };
        table.getPreSortedRowModel = () => table.getGroupedRowModel();
        table.getSortedRowModel = () => {
          if (!table._getSortedRowModel && table.options.getSortedRowModel) {
            table._getSortedRowModel = table.options.getSortedRowModel(table);
          }
          if (table.options.manualSorting || !table._getSortedRowModel) {
            return table.getPreSortedRowModel();
          }
          return table._getSortedRowModel();
        };
      }
    };
    const Visibility = {
      getInitialState: (state) => {
        return {
          columnVisibility: {},
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onColumnVisibilityChange: makeStateUpdater("columnVisibility", table)
        };
      },
      createColumn: (column, table) => {
        column.toggleVisibility = (value) => {
          if (column.getCanHide()) {
            table.setColumnVisibility((old) => ({
              ...old,
              [column.id]: value != null ? value : !column.getIsVisible()
            }));
          }
        };
        column.getIsVisible = () => {
          var _table$getState$colum, _table$getState$colum2;
          return (_table$getState$colum = (_table$getState$colum2 = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum2[column.id]) != null ? _table$getState$colum : true;
        };
        column.getCanHide = () => {
          var _column$columnDef$ena, _table$options$enable;
          return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);
        };
        column.getToggleVisibilityHandler = () => {
          return (e2) => {
            column.toggleVisibility == null || column.toggleVisibility(e2.target.checked);
          };
        };
      },
      createRow: (row, table) => {
        row._getAllVisibleCells = memo(() => [row.getAllCells(), table.getState().columnVisibility], (cells) => {
          return cells.filter((cell) => cell.column.getIsVisible());
        }, {
          key: "row._getAllVisibleCells",
          debug: () => {
            var _table$options$debugA;
            return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;
          }
        });
        row.getVisibleCells = memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], {
          key: false,
          debug: () => {
            var _table$options$debugA2;
            return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;
          }
        });
      },
      createTable: (table) => {
        const makeVisibleColumnsMethod = (key, getColumns) => {
          return memo(() => [getColumns(), getColumns().filter((d2) => d2.getIsVisible()).map((d2) => d2.id).join("_")], (columns) => {
            return columns.filter((d2) => d2.getIsVisible == null ? void 0 : d2.getIsVisible());
          }, {
            key,
            debug: () => {
              var _table$options$debugA3;
              return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;
            }
          });
        };
        table.getVisibleFlatColumns = makeVisibleColumnsMethod("getVisibleFlatColumns", () => table.getAllFlatColumns());
        table.getVisibleLeafColumns = makeVisibleColumnsMethod("getVisibleLeafColumns", () => table.getAllLeafColumns());
        table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod("getLeftVisibleLeafColumns", () => table.getLeftLeafColumns());
        table.getRightVisibleLeafColumns = makeVisibleColumnsMethod("getRightVisibleLeafColumns", () => table.getRightLeafColumns());
        table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod("getCenterVisibleLeafColumns", () => table.getCenterLeafColumns());
        table.setColumnVisibility = (updater) => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater);
        table.resetColumnVisibility = (defaultState2) => {
          var _table$initialState$c;
          table.setColumnVisibility(defaultState2 ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});
        };
        table.toggleAllColumnsVisible = (value) => {
          var _value;
          value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();
          table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({
            ...obj,
            [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value
          }), {}));
        };
        table.getIsAllColumnsVisible = () => !table.getAllLeafColumns().some((column) => !(column.getIsVisible != null && column.getIsVisible()));
        table.getIsSomeColumnsVisible = () => table.getAllLeafColumns().some((column) => column.getIsVisible == null ? void 0 : column.getIsVisible());
        table.getToggleAllColumnsVisibilityHandler = () => {
          return (e2) => {
            var _target;
            table.toggleAllColumnsVisible((_target = e2.target) == null ? void 0 : _target.checked);
          };
        };
      }
    };
    const features = [Headers, Visibility, Ordering, Pinning, Filters, Sorting, Grouping, Expanding, Pagination, RowSelection, ColumnSizing];
    function createTable(options) {
      var _options$initialState;
      if (options.debugAll || options.debugTable) {
        console.info("Creating Table Instance...");
      }
      let table = {
        _features: features
      };
      const defaultOptions = table._features.reduce((obj, feature) => {
        return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));
      }, {});
      const mergeOptions = (options2) => {
        if (table.options.mergeOptions) {
          return table.options.mergeOptions(defaultOptions, options2);
        }
        return {
          ...defaultOptions,
          ...options2
        };
      };
      const coreInitialState = {};
      let initialState = {
        ...coreInitialState,
        ...(_options$initialState = options.initialState) != null ? _options$initialState : {}
      };
      table._features.forEach((feature) => {
        var _feature$getInitialSt;
        initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;
      });
      const queued = [];
      let queuedTimeout = false;
      const coreInstance = {
        _features: features,
        options: {
          ...defaultOptions,
          ...options
        },
        initialState,
        _queue: (cb2) => {
          queued.push(cb2);
          if (!queuedTimeout) {
            queuedTimeout = true;
            Promise.resolve().then(() => {
              while (queued.length) {
                queued.shift()();
              }
              queuedTimeout = false;
            }).catch((error) => setTimeout(() => {
              throw error;
            }));
          }
        },
        reset: () => {
          table.setState(table.initialState);
        },
        setOptions: (updater) => {
          const newOptions = functionalUpdate(updater, table.options);
          table.options = mergeOptions(newOptions);
        },
        getState: () => {
          return table.options.state;
        },
        setState: (updater) => {
          table.options.onStateChange == null || table.options.onStateChange(updater);
        },
        _getRowId: (row, index, parent) => {
          var _table$options$getRow;
          return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index].join(".") : index}`;
        },
        getCoreRowModel: () => {
          if (!table._getCoreRowModel) {
            table._getCoreRowModel = table.options.getCoreRowModel(table);
          }
          return table._getCoreRowModel();
        },
        // The final calls start at the bottom of the model,
        // expanded rows, which then work their way up
        getRowModel: () => {
          return table.getPaginationRowModel();
        },
        getRow: (id2, searchAll) => {
          const row = (searchAll ? table.getCoreRowModel() : table.getRowModel()).rowsById[id2];
          if (!row) {
            throw new Error();
          }
          return row;
        },
        _getDefaultColumnDef: memo(() => [table.options.defaultColumn], (defaultColumn) => {
          var _defaultColumn;
          defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};
          return {
            header: (props) => {
              const resolvedColumnDef = props.header.column.columnDef;
              if (resolvedColumnDef.accessorKey) {
                return resolvedColumnDef.accessorKey;
              }
              if (resolvedColumnDef.accessorFn) {
                return resolvedColumnDef.id;
              }
              return null;
            },
            // footer: props => props.header.column.id,
            cell: (props) => {
              var _props$renderValue$to, _props$renderValue;
              return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null || _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;
            },
            ...table._features.reduce((obj, feature) => {
              return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());
            }, {}),
            ...defaultColumn
          };
        }, {
          debug: () => {
            var _table$options$debugA;
            return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;
          },
          key: false
        }),
        _getColumnDefs: () => table.options.columns,
        getAllColumns: memo(() => [table._getColumnDefs()], (columnDefs) => {
          const recurseColumns = function(columnDefs2, parent, depth) {
            if (depth === void 0) {
              depth = 0;
            }
            return columnDefs2.map((columnDef) => {
              const column = createColumn(table, columnDef, depth, parent);
              const groupingColumnDef = columnDef;
              column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];
              return column;
            });
          };
          return recurseColumns(columnDefs);
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA2;
            return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;
          }
        }),
        getAllFlatColumns: memo(() => [table.getAllColumns()], (allColumns) => {
          return allColumns.flatMap((column) => {
            return column.getFlatColumns();
          });
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA3;
            return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;
          }
        }),
        _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], (flatColumns) => {
          return flatColumns.reduce((acc, column) => {
            acc[column.id] = column;
            return acc;
          }, {});
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA4;
            return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;
          }
        }),
        getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns2) => {
          let leafColumns = allColumns.flatMap((column) => column.getLeafColumns());
          return orderColumns2(leafColumns);
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA5;
            return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;
          }
        }),
        getColumn: (columnId) => {
          const column = table._getAllFlatColumnsById()[columnId];
          return column;
        }
      };
      Object.assign(table, coreInstance);
      for (let index = 0; index < table._features.length; index++) {
        const feature = table._features[index];
        feature == null || feature.createTable == null || feature.createTable(table);
      }
      return table;
    }
    function createCell(table, row, column, columnId) {
      const getRenderValue = () => {
        var _cell$getValue;
        return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;
      };
      const cell = {
        id: `${row.id}_${column.id}`,
        row,
        column,
        getValue: () => row.getValue(columnId),
        renderValue: getRenderValue,
        getContext: memo(() => [table, column, row, cell], (table2, column2, row2, cell2) => ({
          table: table2,
          column: column2,
          row: row2,
          cell: cell2,
          getValue: cell2.getValue,
          renderValue: cell2.renderValue
        }), {
          key: false,
          debug: () => table.options.debugAll
        })
      };
      table._features.forEach((feature) => {
        feature.createCell == null || feature.createCell(cell, column, row, table);
      }, {});
      return cell;
    }
    const createRow = (table, id2, original, rowIndex, depth, subRows, parentId) => {
      let row = {
        id: id2,
        index: rowIndex,
        original,
        depth,
        parentId,
        _valuesCache: {},
        _uniqueValuesCache: {},
        getValue: (columnId) => {
          if (row._valuesCache.hasOwnProperty(columnId)) {
            return row._valuesCache[columnId];
          }
          const column = table.getColumn(columnId);
          if (!(column != null && column.accessorFn)) {
            return void 0;
          }
          row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);
          return row._valuesCache[columnId];
        },
        getUniqueValues: (columnId) => {
          if (row._uniqueValuesCache.hasOwnProperty(columnId)) {
            return row._uniqueValuesCache[columnId];
          }
          const column = table.getColumn(columnId);
          if (!(column != null && column.accessorFn)) {
            return void 0;
          }
          if (!column.columnDef.getUniqueValues) {
            row._uniqueValuesCache[columnId] = [row.getValue(columnId)];
            return row._uniqueValuesCache[columnId];
          }
          row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);
          return row._uniqueValuesCache[columnId];
        },
        renderValue: (columnId) => {
          var _row$getValue;
          return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;
        },
        subRows: subRows != null ? subRows : [],
        getLeafRows: () => flattenBy(row.subRows, (d2) => d2.subRows),
        getParentRow: () => row.parentId ? table.getRow(row.parentId, true) : void 0,
        getParentRows: () => {
          let parentRows = [];
          let currentRow = row;
          while (true) {
            const parentRow = currentRow.getParentRow();
            if (!parentRow)
              break;
            parentRows.push(parentRow);
            currentRow = parentRow;
          }
          return parentRows.reverse();
        },
        getAllCells: memo(() => [table.getAllLeafColumns()], (leafColumns) => {
          return leafColumns.map((column) => {
            return createCell(table, row, column, column.id);
          });
        }, {
          key: false,
          debug: () => {
            var _table$options$debugA;
            return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;
          }
        }),
        _getAllCellsByColumnId: memo(() => [row.getAllCells()], (allCells) => {
          return allCells.reduce((acc, cell) => {
            acc[cell.column.id] = cell;
            return acc;
          }, {});
        }, {
          key: "row.getAllCellsByColumnId",
          debug: () => {
            var _table$options$debugA2;
            return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;
          }
        })
      };
      for (let i = 0; i < table._features.length; i++) {
        const feature = table._features[i];
        feature == null || feature.createRow == null || feature.createRow(row, table);
      }
      return row;
    };
    function getCoreRowModel() {
      return (table) => memo(() => [table.options.data], (data) => {
        const rowModel = {
          rows: [],
          flatRows: [],
          rowsById: {}
        };
        const accessRows = function(originalRows, depth, parentRow) {
          if (depth === void 0) {
            depth = 0;
          }
          const rows = [];
          for (let i = 0; i < originalRows.length; i++) {
            const row = createRow(table, table._getRowId(originalRows[i], i, parentRow), originalRows[i], i, depth, void 0, parentRow == null ? void 0 : parentRow.id);
            rowModel.flatRows.push(row);
            rowModel.rowsById[row.id] = row;
            rows.push(row);
            if (table.options.getSubRows) {
              var _row$originalSubRows;
              row.originalSubRows = table.options.getSubRows(originalRows[i], i);
              if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {
                row.subRows = accessRows(row.originalSubRows, depth + 1, row);
              }
            }
          }
          return rows;
        };
        rowModel.rows = accessRows(data);
        return rowModel;
      }, {
        key: false,
        debug: () => {
          var _table$options$debugA;
          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
        },
        onChange: () => {
          table._autoResetPageIndex();
        }
      });
    }
    function getExpandedRowModel() {
      return (table) => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {
        if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {
          return rowModel;
        }
        if (!paginateExpandedRows) {
          return rowModel;
        }
        return expandRows(rowModel);
      }, {
        key: false,
        debug: () => {
          var _table$options$debugA;
          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;
        }
      });
    }
    function expandRows(rowModel) {
      const expandedRows = [];
      const handleRow = (row) => {
        var _row$subRows;
        expandedRows.push(row);
        if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {
          row.subRows.forEach(handleRow);
        }
      };
      rowModel.rows.forEach(handleRow);
      return {
        rows: expandedRows,
        flatRows: rowModel.flatRows,
        rowsById: rowModel.rowsById
      };
    }
    /**
     * react-table
     *
     * Copyright (c) TanStack
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE.md file in the root directory of this source tree.
     *
     * @license MIT
     */
    function flexRender(Comp, props) {
      return !Comp ? null : isReactComponent(Comp) ? /* @__PURE__ */ reactExports.createElement(Comp, props) : Comp;
    }
    function isReactComponent(component) {
      return isClassComponent(component) || typeof component === "function" || isExoticComponent(component);
    }
    function isClassComponent(component) {
      return typeof component === "function" && (() => {
        const proto = Object.getPrototypeOf(component);
        return proto.prototype && proto.prototype.isReactComponent;
      })();
    }
    function isExoticComponent(component) {
      return typeof component === "object" && typeof component.$$typeof === "symbol" && ["react.memo", "react.forward_ref"].includes(component.$$typeof.description);
    }
    function useReactTable(options) {
      const resolvedOptions = {
        state: {},
        // Dummy state
        onStateChange: () => {
        },
        // noop
        renderFallbackValue: null,
        ...options
      };
      const [tableRef] = reactExports.useState(() => ({
        current: createTable(resolvedOptions)
      }));
      const [state, setState] = reactExports.useState(() => tableRef.current.initialState);
      tableRef.current.setOptions((prev) => ({
        ...prev,
        ...options,
        state: {
          ...state,
          ...options.state
        },
        // Similarly, we'll maintain both our internal state and any user-provided
        // state.
        onStateChange: (updater) => {
          setState(updater);
          options.onStateChange == null || options.onStateChange(updater);
        }
      }));
      return tableRef.current;
    }
    /**
     * @license lucide-react v0.441.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const toKebabCase = (string2) => string2.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
    const mergeClasses = (...classes) => classes.filter((className, index, array) => {
      return Boolean(className) && array.indexOf(className) === index;
    }).join(" ");
    /**
     * @license lucide-react v0.441.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    var defaultAttributes = {
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    };
    /**
     * @license lucide-react v0.441.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const Icon = reactExports.forwardRef(
      ({
        color = "currentColor",
        size = 24,
        strokeWidth = 2,
        absoluteStrokeWidth,
        className = "",
        children: children2,
        iconNode,
        ...rest
      }, ref2) => {
        return reactExports.createElement(
          "svg",
          {
            ref: ref2,
            ...defaultAttributes,
            width: size,
            height: size,
            stroke: color,
            strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,
            className: mergeClasses("lucide", className),
            ...rest
          },
          [
            ...iconNode.map(([tag, attrs]) => reactExports.createElement(tag, attrs)),
            ...Array.isArray(children2) ? children2 : [children2]
          ]
        );
      }
    );
    /**
     * @license lucide-react v0.441.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const createLucideIcon = (iconName, iconNode) => {
      const Component = reactExports.forwardRef(
        ({ className, ...props }, ref2) => reactExports.createElement(Icon, {
          ref: ref2,
          iconNode,
          className: mergeClasses(`lucide-${toKebabCase(iconName)}`, className),
          ...props
        })
      );
      Component.displayName = `${iconName}`;
      return Component;
    };
    /**
     * @license lucide-react v0.441.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const ChevronDown = createLucideIcon("ChevronDown", [
      ["path", { d: "m6 9 6 6 6-6", key: "qrunsl" }]
    ]);
    /**
     * @license lucide-react v0.441.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const ChevronRight = createLucideIcon("ChevronRight", [
      ["path", { d: "m9 18 6-6-6-6", key: "mthhwq" }]
    ]);
    /**
     * @license lucide-react v0.441.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const FileCode2 = createLucideIcon("FileCode2", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "m5 12-3 3 3 3", key: "oke12k" }],
      ["path", { d: "m9 18 3-3-3-3", key: "112psh" }]
    ]);
    /**
     * @license lucide-react v0.441.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const FileCog = createLucideIcon("FileCog", [
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "m3.2 12.9-.9-.4", key: "1i3dj5" }],
      ["path", { d: "m3.2 15.1-.9.4", key: "1fvgj0" }],
      [
        "path",
        {
          d: "M4.677 21.5a2 2 0 0 0 1.313.5H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2.5",
          key: "1yo3oz"
        }
      ],
      ["path", { d: "m4.9 11.2-.4-.9", key: "otmhb9" }],
      ["path", { d: "m4.9 16.8-.4.9", key: "1b8z07" }],
      ["path", { d: "m7.5 10.3-.4.9", key: "11k65u" }],
      ["path", { d: "m7.5 17.7-.4-.9", key: "431x55" }],
      ["path", { d: "m9.7 12.5-.9.4", key: "87sjan" }],
      ["path", { d: "m9.7 15.5-.9-.4", key: "khqm91" }],
      ["circle", { cx: "6", cy: "14", r: "3", key: "a1xfv6" }]
    ]);
    /**
     * @license lucide-react v0.441.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const House = createLucideIcon("House", [
      ["path", { d: "M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8", key: "5wwlr5" }],
      [
        "path",
        {
          d: "M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z",
          key: "1d0kgt"
        }
      ]
    ]);
    /**
     * @license lucide-react v0.441.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const Menu = createLucideIcon("Menu", [
      ["line", { x1: "4", x2: "20", y1: "12", y2: "12", key: "1e0a9i" }],
      ["line", { x1: "4", x2: "20", y1: "6", y2: "6", key: "1owob3" }],
      ["line", { x1: "4", x2: "20", y1: "18", y2: "18", key: "yk5zj1" }]
    ]);
    /**
     * @license lucide-react v0.441.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const Settings = createLucideIcon("Settings", [
      [
        "path",
        {
          d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",
          key: "1qme2f"
        }
      ],
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
    ]);
    /**
     * @license lucide-react v0.441.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const UserRoundPlus = createLucideIcon("UserRoundPlus", [
      ["path", { d: "M2 21a8 8 0 0 1 13.292-6", key: "bjp14o" }],
      ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
      ["path", { d: "M19 16v6", key: "tddt3s" }],
      ["path", { d: "M22 19h-6", key: "vcuq98" }]
    ]);
    /**
     * @license lucide-react v0.441.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const X = createLucideIcon("X", [
      ["path", { d: "M18 6 6 18", key: "1bl5f8" }],
      ["path", { d: "m6 6 12 12", key: "d8bk6v" }]
    ]);
    const useFileName = () => {
      const { fileName } = useAppStateContext();
      reactExports.useEffect(() => {
        vscode.postMessage({ type: "getFileName" });
      }, []);
      return fileName;
    };
    const isClass = (row) => {
      var _a;
      return ((_a = row.original.testable) == null ? void 0 : _a.type) === "class";
    };
    const isAbleToGenerateTestForClass = (row) => !isClass(row);
    const isTestable = (row) => row.original.type === "testable";
    const isFile = (row) => row.original.type === "file";
    const isAbleToGenerateTest = (row) => isTestable(row) && row.original.canCreateTests && isAbleToGenerateTestForClass(row);
    const isPrivateTestable = (row) => isTestable(row) && !row.original.canCreateTests;
    const isRoot = (row) => row.id === "0";
    const isRefreshCoverageDisabled = (table) => table.getRowModel().flatRows.some((row) => row.original.isProcessing || row.original.isDone);
    const isFirstPublicTestable = (row, table) => {
      if (!isAbleToGenerateTest(row)) {
        return false;
      }
      const firstTestable = table.getRowModel().flatRows.find((subrow) => isAbleToGenerateTest(subrow));
      return (firstTestable == null ? void 0 : firstTestable.id) === row.id;
    };
    const useOnboarding = (table) => {
      const { isOnboardingCompleted } = useAppStateContext();
      reactExports.useEffect(() => {
        if (isOnboardingCompleted) {
          return;
        }
        const firstPublicTestable = table.getRowModel().flatRows.find((row) => isAbleToGenerateTest(row));
        if (!isDefined(firstPublicTestable)) {
          return;
        }
        const expandable = [firstPublicTestable];
        let parent = firstPublicTestable.getParentRow();
        while (isDefined(parent)) {
          expandable.push(parent);
          parent = parent.getParentRow();
        }
        const state = Object.fromEntries(expandable.map((row) => [row.id, true]));
        table.setExpanded((expanded) => ({ ...isObject$3(expanded) ? expanded : void 0, ...state }));
      }, [isOnboardingCompleted, table.getRowModel().flatRows.length]);
    };
    function useRowsExpand({ table, getFileTestables }) {
      const fileName = useFileName();
      const { coverageMap } = useAppStateContext();
      const rowsToExpand = reactExports.useMemo(() => {
        if (isDefined(fileName)) {
          const fileRows = table.getRowModel().flatRows.filter((row) => fileName.startsWith(row.original.path));
          if (!isEmptyObject(fileRows)) {
            return fileRows;
          }
          const folderPath = fileName.slice(0, Math.max(0, fileName.lastIndexOf("/")));
          if (!isEmptyString(folderPath)) {
            return table.getRowModel().flatRows.filter((row) => folderPath.startsWith(row.original.path));
          }
        }
        return [];
      }, [fileName, table]);
      reactExports.useEffect(() => {
        if (isEmptyObject(rowsToExpand)) {
          return;
        }
        const state = rowsToExpand.filter((row) => isDefined(row.originalSubRows)).reduce((object, row) => {
          const subrows = row.subRows.filter((r2) => isFile(r2));
          for (const subrow of subrows) {
            getFileTestables(subrow.original.path);
          }
          return {
            ...object,
            [row.id]: true
          };
        }, {});
        table.setExpanded((expanded) => ({ ...isObject$3(expanded) ? expanded : void 0, ...state }));
      }, [rowsToExpand.length, isEmptyObject(coverageMap)]);
    }
    const GenerateTestsIcon = () => /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { width: "16", height: "16", viewBox: "0 0 16 15", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M5.75495 5.0845L7.46666 0H5.02736L3.11273 5.68723C3.59164 5.61991 4.66034 5.44324 5.75495 5.0845ZM3.09112 5.75142C3.5042 5.80875 4.3984 5.95304 5.36707 6.23667L2.43931 14.9333H0L3.09112 5.75142Z",
          fill: "currentColor"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "path",
        {
          d: "M11.8189 4.18113C10.5866 2.94889 10.2714 0 10.2714 0C10.2714 0 9.95608 2.95087 8.72384 4.18113C7.49161 5.41336 4.54272 5.72864 4.54272 5.72864C4.54272 5.72864 7.49359 6.04392 8.72384 7.27616C9.9531 8.5084 10.2714 11.4573 10.2714 11.4573C10.2714 11.4573 10.5866 8.50641 11.8189 7.27616C13.0511 6.04392 16 5.72864 16 5.72864C16 5.72864 13.0491 5.41336 11.8189 4.18113Z",
          fill: "url(#magic-gradient)"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("defs", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("linearGradient", { id: "magic-gradient", x1: "10.2714", y1: "0", x2: "10.2714", y2: "11.4573", gradientUnits: "userSpaceOnUse", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("stop", { offset: "0.3", stopColor: "var(--early-purple)" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("stop", { offset: "0.8", stopColor: "var(--text-gray-600)" })
      ] }) })
    ] });
    const GenerateTestsHighlightIcon = () => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "relative h-[16px] w-[16px]", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "svg",
      {
        className: "absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2",
        width: "50",
        height: "50",
        viewBox: "0 0 50 50",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("circle", { cx: "25", cy: "25", r: "12", fill: "none", stroke: "var(--early-primary)", strokeWidth: "2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("animate", { attributeName: "r", from: "10", to: "14", dur: "1s", repeatCount: "indefinite" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("animate", { attributeName: "opacity", from: "1", to: "0", dur: "1s", repeatCount: "indefinite" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("g", { transform: "translate(17, 17)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GenerateTestsIcon, {}) })
        ]
      }
    ) });
    const GenerateTestsProgressIcon = () => /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { width: "16", height: "16", viewBox: "0 0 100 100", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "50", cy: "50", r: "20", fill: "var(--early-primary)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      "animate",
      {
        attributeName: "r",
        values: "20;30;20",
        dur: "1s",
        repeatCount: "indefinite",
        keyTimes: "0;0.5;1",
        keySplines: "0.42 0 0.58 1; 0.42 0 0.58 1"
      }
    ) }) });
    const GoToTestsIcon = () => /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M13 4.808L12.856 4.44L9.576 1.144L9.224 1H1.496L1 1.512V14.504L1.496 15H5V14.008H2.008V2.008H8.008V5.512L8.504 6.008H12.008V7.18896H13V4.808ZM9 2.008L12.008 5H9V2.008Z"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M8.42425 9.26707C6.84759 9.26707 5.74656 10.4461 5.74656 12.1337C5.74656 13.8483 6.86998 15 8.54261 15C9.78439 15 10.7739 14.2148 11.0042 13.0461L11.0223 12.9532H9.97507L9.96001 13.0118C9.78913 13.6711 9.23517 14.0645 8.47848 14.0645C7.5083 14.0645 6.86051 13.4035 6.82736 12.3825H11.0029L11.0752 12.3795L11.0813 12.308C11.092 12.1813 11.1028 12.0503 11.1028 11.9282C11.0585 10.2868 10.0323 9.26707 8.42425 9.26707ZM6.89107 11.5001C7.00599 10.7488 7.65507 10.1922 8.43544 10.1922C9.30619 10.1922 9.88253 10.679 9.99143 11.5001H6.89107Z" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M13.9074 7.18893L11.6546 14.9995H12.747L14.9998 7.18893H13.9074Z" })
    ] });
    const RefreshCoverage = ({ className }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "svg",
      {
        className,
        width: "10",
        height: "10",
        viewBox: "0 0 10 10",
        fill: "currentColor",
        xmlns: "http://www.w3.org/2000/svg",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M8.77285 5.00118C8.77285 4.44177 8.65535 3.91344 8.42037 3.41619C8.19408 2.91894 7.87206 2.49272 7.45431 2.13754C7.04526 1.78236 6.57528 1.53373 6.04439 1.39166C5.52219 1.24071 4.9913 1.21407 4.4517 1.31175C3.9208 1.40942 3.43342 1.61809 2.98956 1.93775C2.54569 2.24853 2.18886 2.64367 1.91906 3.12316H3.47258V4.37517H0.613577L0 3.74917V0.419354H1.22715V1.95107C1.64491 1.39166 2.15405 0.947685 2.75457 0.619143C3.35509 0.281722 3.99478 0.0819335 4.67363 0.0197772C5.36118 -0.0423796 6.03133 0.0419756 6.68407 0.272843C7.33681 0.50371 7.91123 0.85445 8.40731 1.32506C8.9121 1.79568 9.30374 2.35065 9.58224 2.98997C9.86075 3.6293 10 4.2997 10 5.00118C10 5.78258 9.83029 6.51958 9.49086 7.21218C9.16014 7.8959 8.69887 8.47307 8.10705 8.94368C7.51523 9.41429 6.84508 9.72952 6.09661 9.88935C5.34813 10.0492 4.60836 10.0359 3.87728 9.84939C3.15492 9.65404 2.50653 9.30774 1.93211 8.81049C1.3577 8.31324 0.91819 7.70943 0.613577 6.99907L1.74935 6.53289C1.97563 7.06566 2.30635 7.51408 2.74151 7.87814C3.17668 8.2422 3.66406 8.49527 4.20366 8.63734C4.75196 8.77941 5.30461 8.79273 5.86162 8.6773C6.41862 8.55298 6.91906 8.31324 7.36292 7.95806C7.80679 7.60288 8.15057 7.16778 8.39426 6.65277C8.64665 6.13776 8.77285 5.58723 8.77285 5.00118Z" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M8.77285 5.00118C8.77285 4.44177 8.65535 3.91344 8.42037 3.41619C8.19408 2.91894 7.87206 2.49272 7.45431 2.13754C7.04526 1.78236 6.57528 1.53373 6.04439 1.39166C5.52219 1.24071 4.9913 1.21407 4.4517 1.31175C3.9208 1.40942 3.43342 1.61809 2.98956 1.93775C2.54569 2.24853 2.18886 2.64367 1.91906 3.12316H3.47258V4.37517H0.613577L0 3.74917V0.419354H1.22715V1.95107C1.64491 1.39166 2.15405 0.947685 2.75457 0.619143C3.35509 0.281722 3.99478 0.0819335 4.67363 0.0197772C5.36118 -0.0423796 6.03133 0.0419756 6.68407 0.272843C7.33681 0.50371 7.91123 0.85445 8.40731 1.32506C8.9121 1.79568 9.30374 2.35065 9.58224 2.98997C9.86075 3.6293 10 4.2997 10 5.00118C10 5.78258 9.83029 6.51958 9.49086 7.21218C9.16014 7.8959 8.69887 8.47307 8.10705 8.94368C7.51523 9.41429 6.84508 9.72952 6.09661 9.88935C5.34813 10.0492 4.60836 10.0359 3.87728 9.84939C3.15492 9.65404 2.50653 9.30774 1.93211 8.81049C1.3577 8.31324 0.91819 7.70943 0.613577 6.99907L1.74935 6.53289C1.97563 7.06566 2.30635 7.51408 2.74151 7.87814C3.17668 8.2422 3.66406 8.49527 4.20366 8.63734C4.75196 8.77941 5.30461 8.79273 5.86162 8.6773C6.41862 8.55298 6.91906 8.31324 7.36292 7.95806C7.80679 7.60288 8.15057 7.16778 8.39426 6.65277C8.64665 6.13776 8.77285 5.58723 8.77285 5.00118Z" })
        ]
      }
    );
    const Popup = reactExports.forwardRef(function Popop({ children: children2, onClose }, reference) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "relative", ref: reference, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-2 right-1 w-max max-w-[90vw]", onClick: (event) => event.stopPropagation(), children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          className: cn(
            "relative p-4 rounded",
            "bg-[var(--vscode-notifications-background)] shadow-lg",
            "border border-[var(--vscode-widget-border)] border-solid cursor-auto"
          ),
          children: [
            isDefined(onClose) && /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "absolute top-1 right-1 text-gray-400 hover:text-gray-600", onClick: () => onClose(), children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { className: "h-4 w-4" }) }),
            children2
          ]
        }
      ) }) });
    });
    const Table = reactExports.forwardRef(
      ({ className, ...properties }, reference) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "relative w-full h-full overflow-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsx("table", { ref: reference, className: cn("w-full caption-bottom", className), ...properties }) })
    );
    Table.displayName = "Table";
    const TableHeader = reactExports.forwardRef(
      ({ className, ...properties }, reference) => /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { ref: reference, className: cn("[&_tr]:border-b", className), ...properties })
    );
    TableHeader.displayName = "TableHeader";
    const TableBody = reactExports.forwardRef(
      ({ className, ...properties }, reference) => /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { ref: reference, className: cn("[&_tr:last-child]:border-0", className), ...properties })
    );
    TableBody.displayName = "TableBody";
    const TableFooter = reactExports.forwardRef(
      ({ className, ...properties }, reference) => /* @__PURE__ */ jsxRuntimeExports.jsx(
        "tfoot",
        {
          ref: reference,
          className: cn("bg-primary font-medium text-primary-foreground", className),
          ...properties
        }
      )
    );
    TableFooter.displayName = "TableFooter";
    const TableRow = reactExports.forwardRef(
      ({ className, ...properties }, reference) => /* @__PURE__ */ jsxRuntimeExports.jsx(
        "tr",
        {
          ref: reference,
          className: cn(
            "border-transparent hover:bg-vscode-list-hoverBackground data-[state=selected]:bg-muted",
            className
          ),
          ...properties
        }
      )
    );
    TableRow.displayName = "TableRow";
    const TableHead = reactExports.forwardRef(({ className, ...properties }, reference) => /* @__PURE__ */ jsxRuntimeExports.jsx(
      "th",
      {
        ref: reference,
        className: cn(
          "px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
          className
        ),
        ...properties
      }
    ));
    TableHead.displayName = "TableHead";
    const TableCell = reactExports.forwardRef(({ className, ...properties }, reference) => /* @__PURE__ */ jsxRuntimeExports.jsx(
      "td",
      {
        ref: reference,
        className: cn("p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]", className),
        ...properties
      }
    ));
    TableCell.displayName = "TableCell";
    const TableCaption = reactExports.forwardRef(
      ({ className, ...properties }, reference) => /* @__PURE__ */ jsxRuntimeExports.jsx("caption", { ref: reference, className: cn("mt-4 text-sm text-muted-foreground", className), ...properties })
    );
    TableCaption.displayName = "TableCaption";
    function FileTreeIcon({ type, testable }) {
      switch (type) {
        case "file": {
          return /* @__PURE__ */ jsxRuntimeExports.jsx("i", { className: "h-4 w-4 codicon codicon-file" });
        }
        case "dir": {
          return /* @__PURE__ */ jsxRuntimeExports.jsx("i", { className: "h-4 w-4 codicon codicon-folder" });
        }
        case "testable": {
          return /* @__PURE__ */ jsxRuntimeExports.jsx(TestableIcon, { testable });
        }
      }
    }
    function TestableIcon({ testable }) {
      switch (testable == null ? void 0 : testable.type) {
        case "class": {
          return /* @__PURE__ */ jsxRuntimeExports.jsx("i", { className: "h-4 w-4 codicon codicon-symbol-class text-vscode-class-symbol-foreground" });
        }
        case "function": {
          return /* @__PURE__ */ jsxRuntimeExports.jsx("i", { className: "h-4 w-4 codicon codicon-symbol-method text-vscode-function-symbol-foreground" });
        }
        case "method": {
          return /* @__PURE__ */ jsxRuntimeExports.jsx("i", { className: "h-4 w-4 codicon codicon-symbol-method text-vscode-function-symbol-foreground" });
        }
      }
      return null;
    }
    const FilesNavigator = ({ filesTree }) => {
      const [expandedState, setExpandedState] = reactExports.useState({ 0: true });
      const fileName = useFileName();
      const { testsFilesList, isCoverageLoaded, isOnboardingCompleted, dispatch, earlyConfig } = useAppStateContext();
      const handleGetFileTestables = (path) => {
        if (FILE_SUFFIXES.some((suffix) => path.endsWith(suffix))) {
          vscode.postMessage({
            type: "getFileTestablesList",
            payload: { path }
          });
        }
      };
      const handleGenerateClassTests = (row) => {
        var _a;
        const methods = ((_a = row.getParentRow()) == null ? void 0 : _a.original.subrows.filter(
          (x2) => {
            var _a2, _b;
            return x2.type === "testable" && x2.canCreateTests && ((_a2 = x2.testable) == null ? void 0 : _a2.type) === "method" && ((_b = x2.testable) == null ? void 0 : _b.parentName) === row.original.name;
          }
        ).map(({ testable }) => testable).filter(Boolean)) ?? [];
        const classItem = row.original;
        vscode.postMessage({
          type: "generateClassTests",
          payload: {
            path: removeLeadingSlash(classItem.path),
            testable: classItem.testable,
            eventEmittedBy: "code_explorer",
            methods
          }
        });
      };
      const handleGenerateTests = (row) => {
        var _a;
        if (row.original.type === "testable" && ((_a = row.original.testable) == null ? void 0 : _a.type) === "class") {
          handleGenerateClassTests(row);
          return;
        }
        const subRows = row.original.type === "file" ? row.subRows : [];
        const rows = row.original.type === "testable" ? [row] : subRows;
        const tests = rows.map(({ original }) => original).filter((test) => test.canCreateTests);
        for (const test of tests) {
          vscode.postMessage({
            type: "generateTests",
            payload: {
              path: removeLeadingSlash(test.path),
              testable: test.testable,
              eventEmittedBy: "code_explorer"
            }
          });
        }
        if (!isOnboardingCompleted) {
          onOnboardingComplete();
        }
      };
      const handleOpenFile = (path) => {
        vscode.postMessage({ type: "openFile", payload: { path } });
      };
      const handleExpandRow = (row) => {
        row.toggleExpanded();
        if (!isDefined(row.originalSubRows)) {
          return;
        }
        for (const subrow of row.originalSubRows.filter(({ type }) => type === "file")) {
          handleGetFileTestables(subrow.path);
        }
      };
      const handleOpenTestFile = (row) => {
        if (!isTestable(row) || isClass(row)) {
          return;
        }
        vscode.postMessage({
          type: "openTestFile",
          payload: { path: row.original.path, methodName: row.original.name, eventEmittedBy: "code_explorer" }
        });
      };
      const handleOpenMethod = (row) => {
        var _a;
        if (!isTestable(row) || isClass(row) || !isDefined(row.original.testable) || !isDefined(row.original.path)) {
          return;
        }
        vscode.postMessage({
          type: "openMethod",
          payload: { path: row.original.path, line: (_a = row.original.testable) == null ? void 0 : _a.startLine }
        });
      };
      const onRefreshCoverage = (event) => {
        event.stopPropagation();
        vscode.postMessage({ type: "refreshCoverage" });
        dispatch({ type: "coverageRefreshing", payload: true });
      };
      const onOnboardingComplete = () => {
        if (isOnboardingCompleted) {
          return;
        }
        dispatch({ type: "onboardingCompleted", payload: true });
        vscode.postMessage({ type: "onboardingCompleted" });
      };
      const prepareMethodName = (methodName) => {
        if ((earlyConfig == null ? void 0 : earlyConfig.testFileName) === TEST_FILE_NAME.KEBAB_CASE) {
          return toKebabCase$1(methodName);
        }
        return methodName;
      };
      const isTestFileExists = (row) => {
        const testsPaths = testsFilesList[row.original.path];
        const methodName = prepareMethodName(row.original.name);
        return isDefined(testsPaths) ? testsPaths.some((testPath) => testPath.includes(`${methodName}.`)) : false;
      };
      const columns = reactExports.useMemo(
        // eslint-disable-next-line sonarjs/cognitive-complexity
        () => [
          {
            accessorKey: "name",
            cell: ({ row, getValue: getValue2 }) => {
              const goToMethodTitle = isTestable(row) && !isClass(row) ? "Go to Method" : void 0;
              return /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "div",
                {
                  style: { paddingLeft: `${row.depth * 0.5}rem` },
                  className: `flex w-[70vw]`,
                  title: goToMethodTitle,
                  onClick: () => handleOpenMethod(row),
                  children: [
                    row.getCanExpand() ? /* @__PURE__ */ jsxRuntimeExports.jsx("button", { children: row.getIsExpanded() ? /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronDown, { className: "h-4 w-4" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRight, { className: "h-4 w-4" }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "w-4 min-w-[16px]" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex mr-1", children: /* @__PURE__ */ jsxRuntimeExports.jsx(FileTreeIcon, { type: row.original.type, testable: row.original.testable }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "select-none truncate", children: getValue2() })
                  ]
                }
              );
            }
          },
          {
            id: "coverage",
            cell: ({ row, table: table2 }) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              "div",
              {
                className: cn(
                  "h-4 w-12 flex",
                  (row.original.isProcessing || row.original.isDone) && "text-vscode-disabled"
                ),
                children: isDefined(row.original.coveragePercent) && (isRoot(row) ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    title: "Refresh Coverage",
                    className: "p-0.5 border rounded hover:text-early-primary hover:border-early-primary disabled:text-vscode-disabled disabled:border-vscode-disabled disabled:cursor-default",
                    disabled: isRefreshCoverageDisabled(table2) || !isCoverageLoaded,
                    onClick: onRefreshCoverage,
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(RefreshCoverage, { className: isCoverageLoaded ? "" : "animate-reverse-spin" })
                  }
                ) : `${row.original.coveragePercent}%`)
              }
            )
          },
          {
            id: "actions",
            cell: ({ row, table: table2 }) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-4 w-8 flex justify-end pr-2", children: [
              isTestable(row) && !isClass(row) && isTestFileExists(row) && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { title: "Go to Tests", onClick: () => handleOpenTestFile(row), className: "hover:text-early-primary", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GoToTestsIcon, {}) }),
              (isFile(row) || isClass(row)) && /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                CodiconAction,
                {
                  name: "go-to-file",
                  title: "Go to File",
                  className: "hover:text-early-primary",
                  onClick: (event) => {
                    event.stopPropagation();
                    row.original.path && handleOpenFile(row.original.path);
                  }
                }
              ) }),
              isAbleToGenerateTest(row) && (row.original.isProcessing ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", { title: "Generate Tests", className: "pl-1", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GenerateTestsProgressIcon, {}) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(
                "span",
                {
                  title: "Generate Tests",
                  className: cn(
                    "hover:text-early-primary pl-1",
                    isTestFileExists(row) && "group-hover:visible invisible"
                  ),
                  onClick: (event) => {
                    event.stopPropagation();
                    handleGenerateTests(row);
                  },
                  children: !isOnboardingCompleted && isFirstPublicTestable(row, table2) ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(GenerateTestsHighlightIcon, {}),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Popup, { onClose: onOnboardingComplete, children: /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-600 text-center text-sm block", children: t$1("FILES_TREE.GENERATE_TESTS_POPUP") }) })
                  ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(GenerateTestsIcon, {})
                }
              ))
            ] }),
            header: () => /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "w-4 max-w-sm" })
          }
        ],
        [testsFilesList, isCoverageLoaded, isOnboardingCompleted]
      );
      const table = useReactTable({
        data: filesTree,
        columns,
        state: {
          expanded: expandedState,
          pagination: { pageIndex: 0, pageSize: 1e4 }
        },
        onExpandedChange: setExpandedState,
        getSubRows: (row) => row.subrows,
        getCoreRowModel: getCoreRowModel(),
        getExpandedRowModel: getExpandedRowModel()
      });
      useRowsExpand({ table, getFileTestables: handleGetFileTestables });
      useOnboarding(table);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Table, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(TableBody, { children: table.getRowModel().rows.map((row) => {
        const isActiveFile = isFile(row) && row.original.path === fileName;
        const isPrivateTestableRow = isPrivateTestable(row);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          TableRow,
          {
            className: cn(
              "cursor-pointer group",
              isActiveFile && "bg-[var(--vscode-list-inactiveSelectionBackground)]"
            ),
            onClick: () => handleExpandRow(row),
            title: isPrivateTestableRow ? "Private" : void 0,
            children: row.getVisibleCells().map((cell) => {
              return /* @__PURE__ */ jsxRuntimeExports.jsx(
                TableCell,
                {
                  className: cn(
                    "p-0 py-1 text-xs",
                    isPrivateTestableRow ? "text-vscode-disabled" : "text-vscode-foreground"
                  ),
                  children: flexRender(cell.column.columnDef.cell, cell.getContext())
                },
                cell.id
              );
            })
          },
          row.id
        );
      }) }) }) });
    };
    function CodiconAction({
      name,
      className,
      isVisible = false,
      ...properties
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "i",
        {
          className: cn(
            `codicon codicon-${name} h-4 w-4 cursor-pointer hover:bg-vscode-toolbar-hover-background group-hover:visible hover:rounded-sm`,
            isVisible ? "visible" : "invisible",
            className
          ),
          ...properties
        }
      );
    }
    const container$1 = document.querySelector("#root");
    const isQABuild = JSON.parse((container$1 == null ? void 0 : container$1.dataset.isQaBuild) ?? "");
    JSON.parse((container$1 == null ? void 0 : container$1.dataset.hasCoverageError) ?? "");
    const Collapse = ({
      title,
      className = "",
      isOpenByDefault = false,
      isDisabled = false,
      onChange,
      children: children2
    }) => {
      const handleOpen = () => {
        if (!isDisabled) {
          setIsOpen((isOpen2) => !isOpen2);
          onChange == null ? void 0 : onChange();
        }
      };
      const [isOpen, setIsOpen] = reactExports.useState(isOpenByDefault);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `w-full ${className}`, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "div",
          {
            className: cn(
              "flex select-none text-[11px] leading-6  bg-[var(--vscode-sideBarSectionHeader-background)]",
              isDisabled ? "text-gray-300" : "text-gray-600"
            ),
            onClick: handleOpen,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("button", { children: isOpen ? /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronDown, { className: "h-4 w-4" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronRight, { className: "h-4 w-4" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: cn("w-full font-bold", isDisabled ? "" : "cursor-pointer"), children: title })
            ]
          }
        ),
        isOpen && /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: children2 })
      ] });
    };
    const InProgressIcon = () => /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { width: "12", height: "13", viewBox: "0 0 12 13", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "circle",
        {
          cx: "5.81286",
          cy: "5.92812",
          r: "4.5",
          transform: "rotate(30.4079 5.81286 5.92812)",
          stroke: "var(--text-gray-200)"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M5.8423 1.92829C6.68699 1.93431 7.5081 2.20758 8.18794 2.70894C8.86778 3.21031 9.37144 3.91403 9.62675 4.71924L10.58 4.417C10.2608 3.41048 9.63127 2.53084 8.78147 1.90413C7.93167 1.27743 6.90529 0.935835 5.84942 0.928318L5.8423 1.92829Z",
          fill: "var(--early-primary)"
        }
      )
    ] });
    const InQueueIcon = () => /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { width: "12", height: "13", viewBox: "0 0 12 13", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      "path",
      {
        d: "M7.89518 2.16797C7.69102 2.16797 7.51845 2.09748 7.37747 1.95651C7.2365 1.81554 7.16602 1.64297 7.16602 1.4388C7.16602 1.23464 7.2365 1.06207 7.37747 0.921094C7.51845 0.780122 7.69102 0.709635 7.89518 0.709635C8.09935 0.709635 8.27192 0.780122 8.41289 0.921094C8.55386 1.06207 8.62435 1.23464 8.62435 1.4388C8.62435 1.64297 8.55386 1.81554 8.41289 1.95651C8.27192 2.09748 8.09935 2.16797 7.89518 2.16797ZM7.89518 11.793C7.69102 11.793 7.51845 11.7225 7.37747 11.5815C7.2365 11.4405 7.16602 11.268 7.16602 11.0638C7.16602 10.8596 7.2365 10.6871 7.37747 10.5461C7.51845 10.4051 7.69102 10.3346 7.89518 10.3346C8.09935 10.3346 8.27192 10.4051 8.41289 10.5461C8.55386 10.6871 8.62435 10.8596 8.62435 11.0638C8.62435 11.268 8.55386 11.4405 8.41289 11.5815C8.27192 11.7225 8.09935 11.793 7.89518 11.793ZM10.2285 4.20964C10.0243 4.20964 9.85178 4.13915 9.71081 3.99818C9.56984 3.85721 9.49935 3.68464 9.49935 3.48047C9.49935 3.2763 9.56984 3.10373 9.71081 2.96276C9.85178 2.82179 10.0243 2.7513 10.2285 2.7513C10.4327 2.7513 10.6053 2.82179 10.7462 2.96276C10.8872 3.10373 10.9577 3.2763 10.9577 3.48047C10.9577 3.68464 10.8872 3.85721 10.7462 3.99818C10.6053 4.13915 10.4327 4.20964 10.2285 4.20964ZM10.2285 9.7513C10.0243 9.7513 9.85178 9.68082 9.71081 9.53984C9.56984 9.39887 9.49935 9.2263 9.49935 9.02214C9.49935 8.81797 9.56984 8.6454 9.71081 8.50443C9.85178 8.36346 10.0243 8.29297 10.2285 8.29297C10.4327 8.29297 10.6053 8.36346 10.7462 8.50443C10.8872 8.6454 10.9577 8.81797 10.9577 9.02214C10.9577 9.2263 10.8872 9.39887 10.7462 9.53984C10.6053 9.68082 10.4327 9.7513 10.2285 9.7513ZM11.1035 6.98047C10.8994 6.98047 10.7268 6.90998 10.5858 6.76901C10.4448 6.62804 10.3743 6.45547 10.3743 6.2513C10.3743 6.04714 10.4448 5.87457 10.5858 5.73359C10.7268 5.59262 10.8994 5.52214 11.1035 5.52214C11.3077 5.52214 11.4803 5.59262 11.6212 5.73359C11.7622 5.87457 11.8327 6.04714 11.8327 6.2513C11.8327 6.45547 11.7622 6.62804 11.6212 6.76901C11.4803 6.90998 11.3077 6.98047 11.1035 6.98047ZM5.99935 12.0846C5.1924 12.0846 4.43407 11.9315 3.72435 11.6253C3.01463 11.319 2.39727 10.9034 1.87227 10.3784C1.34727 9.85339 0.931641 9.23602 0.625391 8.5263C0.319141 7.81658 0.166016 7.05825 0.166016 6.2513C0.166016 5.44436 0.319141 4.68602 0.625391 3.9763C0.931641 3.26658 1.34727 2.64922 1.87227 2.12422C2.39727 1.59922 3.01463 1.18359 3.72435 0.877344C4.43407 0.571094 5.1924 0.417969 5.99935 0.417969V1.58464C4.69657 1.58464 3.5931 2.03672 2.68893 2.94089C1.78477 3.84505 1.33268 4.94852 1.33268 6.2513C1.33268 7.55408 1.78477 8.65755 2.68893 9.56172C3.5931 10.4659 4.69657 10.918 5.99935 10.918V12.0846ZM5.99935 7.41797C5.67852 7.41797 5.40386 7.30373 5.17539 7.07526C4.94692 6.84679 4.83268 6.57214 4.83268 6.2513C4.83268 6.20269 4.83511 6.15165 4.83997 6.09818C4.84484 6.04471 4.85699 5.99366 4.87643 5.94505L3.66602 4.73464L4.48268 3.91797L5.6931 5.12839C5.73199 5.11866 5.83407 5.10408 5.99935 5.08464C6.32018 5.08464 6.59484 5.19887 6.82331 5.42734C7.05178 5.65582 7.16602 5.93047 7.16602 6.2513C7.16602 6.57214 7.05178 6.84679 6.82331 7.07526C6.59484 7.30373 6.32018 7.41797 5.99935 7.41797Z",
        fill: "var(--early-primary)"
      }
    ) });
    const MessagesCollapse = ({ isOpen, onChange }) => {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Collapse,
        {
          isDisabled: true,
          title: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-between items-center flex-wrap w-full", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: t$1("SECTION.MESSAGES") }) }),
          className: cn("border-top-collapse bg-[var(--vscode-sideBar-background)] z-[1]", isOpen && "h-[30%]"),
          onChange,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: cn("w-full overflow-x-auto", isOpen && "h-[calc(100%-24px)]"), children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "container p-2 mx-auto flex flex-col items-start justify-center max-w-sm" }) })
        }
      );
    };
    const RunPreconfiguredTestButton = () => {
      if (!isQABuild) {
        return null;
      }
      const handleRunTestsButton = () => vscode.postMessage({ type: "generateTestsByConfig" });
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-3 my-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodeButton, { appearance: "secondary", onClick: handleRunTestsButton, children: t$1("RUN_PRECONFIGURED_TESTS.BUTTON_LABEL") }) });
    };
    const StopTestsButton = () => {
      const {
        generateTestFilesStatus: { areTestsProcessing }
      } = useAppStateContext();
      const onClick = () => vscode.postMessage({ type: "stopTests" });
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-3 my-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodeButton, { appearance: "secondary", onClick, disabled: !areTestsProcessing, children: t$1("STOP_TESTS.BUTTON_LABEL") }) });
    };
    const TestableCodesPanel = ({ children: children2 }) => {
      const { generateTestFilesStatus, earlyConfig } = useAppStateContext();
      const isStopTestsButtonEnabled = (earlyConfig == null ? void 0 : earlyConfig.stopTestsButtonEnabled) ?? false;
      const handleChange = () => setIsMessagesOpen((isMessagesOpen2) => !isMessagesOpen2);
      const [isMessagesOpen, setIsMessagesOpen] = reactExports.useState(false);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodePanelView, { className: "p-0 pt-2 border-top-collapse", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col w-full h-[calc(100vh-36px)]", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Collapse,
          {
            isOpenByDefault: true,
            className: cn(isMessagesOpen ? "h-[70%]" : "h-[calc(100%-30px)]"),
            title: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center w-full", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { children: [
                t$1("SECTION.TESTABLE_CODES"),
                /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodeTag, { className: "ml-1 text-[10px] font-normal leading-3", children: isQABuild ? "QA" : "Beta" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4 mr-5 text-xs font-normal cursor-default", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", title: t$1("TESTS_INDICATOR.IN_PROGRESS"), children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(InProgressIcon, {}),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-400", children: generateTestFilesStatus.processing.length })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", title: t$1("TESTS_INDICATOR.IN_QUEUE"), children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(InQueueIcon, {}),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-400", children: generateTestFilesStatus.queued.length })
                ] })
              ] })
            ] }),
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full h-[calc(100%-24px)] flex flex-col justify-between overflow-x-auto", children: [
              children2,
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col", children: [
                isQABuild && isStopTestsButtonEnabled && /* @__PURE__ */ jsxRuntimeExports.jsx(StopTestsButton, {}),
                /* @__PURE__ */ jsxRuntimeExports.jsx(RunPreconfiguredTestButton, {})
              ] })
            ] })
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(MessagesCollapse, { isOpen: isMessagesOpen, onChange: handleChange })
      ] }) });
    };
    const TAB = {
      MY_CODE_TAB: "MY_CODE_TAB",
      MY_CHANGES_TAB: "MY_CHANGES_TAB"
    };
    const CodeExplorerTabs = () => {
      var _a;
      const [activeTab, setActiveTab] = reactExports.useState(TAB.MY_CODE_TAB);
      const { isFileListLoaded, gitChangedFilesList, filesList } = useAppStateContext();
      const { projectFilesTree, gitChangedFilesTree } = useFileTree();
      const panelsReference = reactExports.useRef(null);
      const shadowRoot = (_a = panelsReference.current) == null ? void 0 : _a.shadowRoot;
      reactExports.useEffect(() => {
        if (isDefined(shadowRoot)) {
          const tablist = shadowRoot.querySelector(".tablist");
          if (isDefined(tablist)) {
            tablist.style.columnGap = "16px";
          }
        }
      }, [shadowRoot]);
      if (!isFileListLoaded) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "container h-screen-92 p-2 mx-auto flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodeProgressRing, {}) });
      }
      const handleActiveTab = (event) => {
        if (event instanceof CustomEvent) {
          setActiveTab(event.detail.id);
        }
      };
      const isProjectFilesEmpty = isEmptyObject(filesList);
      const isGitChangedFilesEmpty = isEmptyObject(gitChangedFilesList);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(VSCodePanels, { ref: panelsReference, activeid: activeTab, onChange: handleActiveTab, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodePanelTab, { id: TAB.MY_CODE_TAB, className: "text-[11px]", children: t$1("CODE_EXPLORE_TABS.MY_CODE_TAB") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodePanelTab, { id: TAB.MY_CHANGES_TAB, className: "text-[11px]", children: t$1("CODE_EXPLORE_TABS.MY_CHANGES_TAB") }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(TestableCodesPanel, { children: isProjectFilesEmpty ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "container p-2 mx-auto my-8 flex flex-col items-center justify-center max-w-sm", children: /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-400 block", children: t$1("CODE_EXPLORE_TABS.NO_PROJECT_FILES_MESSAGE") }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(FilesNavigator, { filesTree: projectFilesTree }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(TestableCodesPanel, { children: isGitChangedFilesEmpty ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "container p-2 mx-auto my-8 flex flex-col items-center justify-center max-w-sm", children: /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-400 block", children: t$1("CODE_EXPLORE_TABS.NO_CHANGED_FILES_MESSAGE") }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(FilesNavigator, { filesTree: gitChangedFilesTree }) })
      ] }) });
    };
    const EarlyLogoIcon = () => /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { width: "16", height: "16", viewBox: "0 0 210 210", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("g", { transform: "scale(1.25) translate(-20, -20)", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "path",
        {
          d: "M72.5,79.4c-27.7,0-47.1,20.9-47.1,50.7s19.8,50.7,49.2,50.7,39.3-13.9,43.3-34.6l.3-1.6h-18.4l-.3,1c-3,11.7-12.8,18.6-26.1,18.6s-28.5-11.7-29.1-29.8h74.8c0,0,.1-1.3.1-1.3.2-2.2.4-4.6.4-6.7-.8-29-18.8-47.1-47.1-47.1ZM45.5,118.9c2-13.3,13.4-23.1,27.2-23.1s25.5,8.6,27.4,23.1h-54.6Z",
          fill: "currentColor"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M165.4,42.6l-39.7,138.2h19.2l39.7-138.2h-19.2Z", fill: "currentColor" })
    ] }) });
    const MENU = {
      CODE_TREE: "CODE_TREE",
      SETTINGS: "SETTINGS"
    };
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        Object.keys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      Object.keys(source).forEach(function(key) {
        if (!options.isMergeableObject(source[key]) || !target[key]) {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        } else {
          destination[key] = deepmerge(target[key], source[key], options);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    const freeGlobal$1 = freeGlobal;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal$1 || freeSelf || Function("return this")();
    const root$1 = root;
    var Symbol$1 = root$1.Symbol;
    const Symbol$2 = Symbol$1;
    var objectProto$d = Object.prototype;
    var hasOwnProperty$a = objectProto$d.hasOwnProperty;
    var nativeObjectToString$1 = objectProto$d.toString;
    var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty$a.call(value, symToStringTag$1), tag = value[symToStringTag$1];
      try {
        value[symToStringTag$1] = void 0;
        var unmasked = true;
      } catch (e2) {
      }
      var result = nativeObjectToString$1.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$1] = tag;
        } else {
          delete value[symToStringTag$1];
        }
      }
      return result;
    }
    var objectProto$c = Object.prototype;
    var nativeObjectToString = objectProto$c.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    const getPrototype$1 = getPrototype;
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    var objectTag$3 = "[object Object]";
    var funcProto$2 = Function.prototype, objectProto$b = Object.prototype;
    var funcToString$2 = funcProto$2.toString;
    var hasOwnProperty$9 = objectProto$b.hasOwnProperty;
    var objectCtorString = funcToString$2.call(Object);
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag$3) {
        return false;
      }
      var proto = getPrototype$1(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty$9.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString$2.call(Ctor) == objectCtorString;
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function isObject$1(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
    function isFunction$1(value) {
      if (!isObject$1(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
    }
    var coreJsData = root$1["__core-js_shared__"];
    const coreJsData$1 = coreJsData;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var funcProto$1 = Function.prototype;
    var funcToString$1 = funcProto$1.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString$1.call(func);
        } catch (e2) {
        }
        try {
          return func + "";
        } catch (e2) {
        }
      }
      return "";
    }
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype, objectProto$a = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty$8 = objectProto$a.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty$8).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject$1(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction$1(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var Map$1 = getNative(root$1, "Map");
    const Map$2 = Map$1;
    var nativeCreate = getNative(Object, "create");
    const nativeCreate$1 = nativeCreate;
    function hashClear() {
      this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
    var objectProto$9 = Object.prototype;
    var hasOwnProperty$7 = objectProto$9.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate$1) {
        var result = data[key];
        return result === HASH_UNDEFINED$1 ? void 0 : result;
      }
      return hasOwnProperty$7.call(data, key) ? data[key] : void 0;
    }
    var objectProto$8 = Object.prototype;
    var hasOwnProperty$6 = objectProto$8.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$6.call(data, key);
    }
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate$1 && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map$2 || ListCache)(),
        "string": new Hash()
      };
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayEach(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e2) {
      }
    }();
    const defineProperty$1 = defineProperty;
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty$1) {
        defineProperty$1(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var objectProto$7 = Object.prototype;
    var hasOwnProperty$5 = objectProto$7.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty$5.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function baseTimes(n2, iteratee) {
      var index = -1, result = Array(n2);
      while (++index < n2) {
        result[index] = iteratee(index);
      }
      return result;
    }
    var argsTag$2 = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag$2;
    }
    var objectProto$6 = Object.prototype;
    var hasOwnProperty$4 = objectProto$6.hasOwnProperty;
    var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty$4.call(value, "callee") && !propertyIsEnumerable$1.call(value, "callee");
    };
    const isArguments$1 = isArguments;
    var isArray$1 = Array.isArray;
    const isArray$2 = isArray$1;
    function stubFalse() {
      return false;
    }
    var freeExports$2 = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule$2 = freeExports$2 && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;
    var Buffer$1 = moduleExports$2 ? root$1.Buffer : void 0;
    var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    const isBuffer$1 = isBuffer;
    var MAX_SAFE_INTEGER$1 = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER$1 : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", errorTag$1 = "[object Error]", funcTag$1 = "[object Function]", mapTag$4 = "[object Map]", numberTag$2 = "[object Number]", objectTag$2 = "[object Object]", regexpTag$2 = "[object RegExp]", setTag$4 = "[object Set]", stringTag$2 = "[object String]", weakMapTag$2 = "[object WeakMap]";
    var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$3 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
    typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] = typedArrayTags[arrayBufferTag$2] = typedArrayTags[boolTag$2] = typedArrayTags[dataViewTag$3] = typedArrayTags[dateTag$2] = typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$4] = typedArrayTags[numberTag$2] = typedArrayTags[objectTag$2] = typedArrayTags[regexpTag$2] = typedArrayTags[setTag$4] = typedArrayTags[stringTag$2] = typedArrayTags[weakMapTag$2] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    var freeExports$1 = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
    var freeProcess = moduleExports$1 && freeGlobal$1.process;
    var nodeUtil = function() {
      try {
        var types = freeModule$1 && freeModule$1.require && freeModule$1.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e2) {
      }
    }();
    const nodeUtil$1 = nodeUtil;
    var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    const isTypedArray$1 = isTypedArray;
    var objectProto$5 = Object.prototype;
    var hasOwnProperty$3 = objectProto$5.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray$2(value), isArg = !isArr && isArguments$1(value), isBuff = !isArr && !isArg && isBuffer$1(value), isType = !isArr && !isArg && !isBuff && isTypedArray$1(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty$3.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    var objectProto$4 = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$4;
      return value === proto;
    }
    var nativeKeys = overArg(Object.keys, Object);
    const nativeKeys$1 = nativeKeys;
    var objectProto$3 = Object.prototype;
    var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys$1(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$2.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction$1(value);
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    var objectProto$2 = Object.prototype;
    var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject$1(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty$1.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root$1.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function stubArray() {
      return [];
    }
    var objectProto$1 = Object.prototype;
    var propertyIsEnumerable = objectProto$1.propertyIsEnumerable;
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols$1 ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    const getSymbols$1 = getSymbols;
    function copySymbols(source, object) {
      return copyObject(source, getSymbols$1(source), object);
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols$1(object));
        object = getPrototype$1(object);
      }
      return result;
    };
    const getSymbolsIn$1 = getSymbolsIn;
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn$1(source), object);
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray$2(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols$1);
    }
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn$1);
    }
    var DataView = getNative(root$1, "DataView");
    const DataView$1 = DataView;
    var Promise$1 = getNative(root$1, "Promise");
    const Promise$2 = Promise$1;
    var Set$1 = getNative(root$1, "Set");
    const Set$2 = Set$1;
    var WeakMap$1 = getNative(root$1, "WeakMap");
    const WeakMap$2 = WeakMap$1;
    var mapTag$3 = "[object Map]", objectTag$1 = "[object Object]", promiseTag = "[object Promise]", setTag$3 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
    var dataViewTag$2 = "[object DataView]";
    var dataViewCtorString = toSource(DataView$1), mapCtorString = toSource(Map$2), promiseCtorString = toSource(Promise$2), setCtorString = toSource(Set$2), weakMapCtorString = toSource(WeakMap$2);
    var getTag = baseGetTag;
    if (DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$2 || Map$2 && getTag(new Map$2()) != mapTag$3 || Promise$2 && getTag(Promise$2.resolve()) != promiseTag || Set$2 && getTag(new Set$2()) != setTag$3 || WeakMap$2 && getTag(new WeakMap$2()) != weakMapTag$1) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag$1 ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag$2;
            case mapCtorString:
              return mapTag$3;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag$3;
            case weakMapCtorString:
              return weakMapTag$1;
          }
        }
        return result;
      };
    }
    const getTag$1 = getTag;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function initCloneArray(array) {
      var length = array.length, result = new array.constructor(length);
      if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    var Uint8Array2 = root$1.Uint8Array;
    const Uint8Array$1 = Uint8Array2;
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
      return result;
    }
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    var reFlags = /\w*$/;
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : void 0;
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    var boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", mapTag$2 = "[object Map]", numberTag$1 = "[object Number]", regexpTag$1 = "[object RegExp]", setTag$2 = "[object Set]", stringTag$1 = "[object String]", symbolTag$2 = "[object Symbol]";
    var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag$1:
          return cloneArrayBuffer(object);
        case boolTag$1:
        case dateTag$1:
          return new Ctor(+object);
        case dataViewTag$1:
          return cloneDataView(object, isDeep);
        case float32Tag$1:
        case float64Tag$1:
        case int8Tag$1:
        case int16Tag$1:
        case int32Tag$1:
        case uint8Tag$1:
        case uint8ClampedTag$1:
        case uint16Tag$1:
        case uint32Tag$1:
          return cloneTypedArray(object, isDeep);
        case mapTag$2:
          return new Ctor();
        case numberTag$1:
        case stringTag$1:
          return new Ctor(object);
        case regexpTag$1:
          return cloneRegExp(object);
        case setTag$2:
          return new Ctor();
        case symbolTag$2:
          return cloneSymbol(object);
      }
    }
    var objectCreate = Object.create;
    var baseCreate = function() {
      function object() {
      }
      return function(proto) {
        if (!isObject$1(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    const baseCreate$1 = baseCreate;
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate$1(getPrototype$1(object)) : {};
    }
    var mapTag$1 = "[object Map]";
    function baseIsMap(value) {
      return isObjectLike(value) && getTag$1(value) == mapTag$1;
    }
    var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
    const isMap$1 = isMap;
    var setTag$1 = "[object Set]";
    function baseIsSet(value) {
      return isObjectLike(value) && getTag$1(value) == setTag$1;
    }
    var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet;
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    const isSet$1 = isSet;
    var CLONE_DEEP_FLAG$1 = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG$2 = 4;
    var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag$1 = "[object Symbol]", weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result, isDeep = bitmask & CLONE_DEEP_FLAG$1, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG$2;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject$1(value)) {
        return value;
      }
      var isArr = isArray$2(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag$1(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer$1(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (isSet$1(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap$1(value)) {
        value.forEach(function(subValue, key2) {
          result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
      }
      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
      var props = isArr ? void 0 : keysFunc(value);
      arrayEach(props || value, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value[key2];
        }
        assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
      return result;
    }
    var CLONE_DEEP_FLAG = 1, CLONE_SYMBOLS_FLAG$1 = 4;
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG$1);
    }
    var isArray = Array.isArray;
    var keyList = Object.keys;
    var hasProp = Object.prototype.hasOwnProperty;
    var hasElementType = typeof Element !== "undefined";
    function equal(a, b2) {
      if (a === b2)
        return true;
      if (a && b2 && typeof a == "object" && typeof b2 == "object") {
        var arrA = isArray(a), arrB = isArray(b2), i, length, key;
        if (arrA && arrB) {
          length = a.length;
          if (length != b2.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b2[i]))
              return false;
          return true;
        }
        if (arrA != arrB)
          return false;
        var dateA = a instanceof Date, dateB = b2 instanceof Date;
        if (dateA != dateB)
          return false;
        if (dateA && dateB)
          return a.getTime() == b2.getTime();
        var regexpA = a instanceof RegExp, regexpB = b2 instanceof RegExp;
        if (regexpA != regexpB)
          return false;
        if (regexpA && regexpB)
          return a.toString() == b2.toString();
        var keys2 = keyList(a);
        length = keys2.length;
        if (length !== keyList(b2).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!hasProp.call(b2, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element && b2 instanceof Element)
          return a === b2;
        for (i = length; i-- !== 0; ) {
          key = keys2[i];
          if (key === "_owner" && a.$$typeof) {
            continue;
          } else {
            if (!equal(a[key], b2[key]))
              return false;
          }
        }
        return true;
      }
      return a !== a && b2 !== b2;
    }
    var reactFastCompare = function exportedEqual(a, b2) {
      try {
        return equal(a, b2);
      } catch (error) {
        if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {
          console.warn("Warning: react-fast-compare does not handle circular references.", error.name, error.message);
          return false;
        }
        throw error;
      }
    };
    const isEqual = /* @__PURE__ */ getDefaultExportFromCjs(reactFastCompare);
    var isProduction = true;
    function warning(condition, message) {
      if (!isProduction) {
        if (condition) {
          return;
        }
        var text2 = "Warning: " + message;
        if (typeof console !== "undefined") {
          console.warn(text2);
        }
        try {
          throw Error(text2);
        } catch (x2) {
        }
      }
    }
    var CLONE_SYMBOLS_FLAG = 4;
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
        if (cache2.has(key)) {
          return cache2.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache2.set(key, result) || cache2;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache2.size === MAX_MEMOIZE_SIZE) {
          cache2.clear();
        }
        return key;
      });
      var cache2 = result.cache;
      return result;
    }
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string2) {
      var result = [];
      if (string2.charCodeAt(0) === 46) {
        result.push("");
      }
      string2.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    const stringToPath$1 = stringToPath;
    var INFINITY$1 = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY$1 ? "-0" : result;
    }
    var INFINITY = 1 / 0;
    var symbolProto = Symbol$2 ? Symbol$2.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray$2(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    function toPath(value) {
      if (isArray$2(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath$1(toString(value)));
    }
    var reactIs$1 = { exports: {} };
    var reactIs_production_min = {};
    /** @license React v16.13.1
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b = "function" === typeof Symbol && Symbol.for, c = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h = b ? Symbol.for("react.provider") : 60109, k = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m = b ? Symbol.for("react.concurrent_mode") : 60111, n = b ? Symbol.for("react.forward_ref") : 60112, p = b ? Symbol.for("react.suspense") : 60113, q = b ? Symbol.for("react.suspense_list") : 60120, r = b ? Symbol.for("react.memo") : 60115, t = b ? Symbol.for("react.lazy") : 60116, v = b ? Symbol.for("react.block") : 60121, w = b ? Symbol.for("react.fundamental") : 60117, x = b ? Symbol.for("react.responder") : 60118, y = b ? Symbol.for("react.scope") : 60119;
    function z$1(a) {
      if ("object" === typeof a && null !== a) {
        var u2 = a.$$typeof;
        switch (u2) {
          case c:
            switch (a = a.type, a) {
              case l:
              case m:
              case e:
              case g:
              case f:
              case p:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case k:
                  case n:
                  case t:
                  case r:
                  case h:
                    return a;
                  default:
                    return u2;
                }
            }
          case d:
            return u2;
        }
      }
    }
    function A(a) {
      return z$1(a) === m;
    }
    reactIs_production_min.AsyncMode = l;
    reactIs_production_min.ConcurrentMode = m;
    reactIs_production_min.ContextConsumer = k;
    reactIs_production_min.ContextProvider = h;
    reactIs_production_min.Element = c;
    reactIs_production_min.ForwardRef = n;
    reactIs_production_min.Fragment = e;
    reactIs_production_min.Lazy = t;
    reactIs_production_min.Memo = r;
    reactIs_production_min.Portal = d;
    reactIs_production_min.Profiler = g;
    reactIs_production_min.StrictMode = f;
    reactIs_production_min.Suspense = p;
    reactIs_production_min.isAsyncMode = function(a) {
      return A(a) || z$1(a) === l;
    };
    reactIs_production_min.isConcurrentMode = A;
    reactIs_production_min.isContextConsumer = function(a) {
      return z$1(a) === k;
    };
    reactIs_production_min.isContextProvider = function(a) {
      return z$1(a) === h;
    };
    reactIs_production_min.isElement = function(a) {
      return "object" === typeof a && null !== a && a.$$typeof === c;
    };
    reactIs_production_min.isForwardRef = function(a) {
      return z$1(a) === n;
    };
    reactIs_production_min.isFragment = function(a) {
      return z$1(a) === e;
    };
    reactIs_production_min.isLazy = function(a) {
      return z$1(a) === t;
    };
    reactIs_production_min.isMemo = function(a) {
      return z$1(a) === r;
    };
    reactIs_production_min.isPortal = function(a) {
      return z$1(a) === d;
    };
    reactIs_production_min.isProfiler = function(a) {
      return z$1(a) === g;
    };
    reactIs_production_min.isStrictMode = function(a) {
      return z$1(a) === f;
    };
    reactIs_production_min.isSuspense = function(a) {
      return z$1(a) === p;
    };
    reactIs_production_min.isValidElementType = function(a) {
      return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
    };
    reactIs_production_min.typeOf = z$1;
    {
      reactIs$1.exports = reactIs_production_min;
    }
    var reactIsExports = reactIs$1.exports;
    var reactIs = reactIsExports;
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    var FormikContext = /* @__PURE__ */ reactExports.createContext(void 0);
    FormikContext.displayName = "FormikContext";
    FormikContext.Provider;
    FormikContext.Consumer;
    function useFormikContext() {
      var formik = reactExports.useContext(FormikContext);
      !!!formik ? warning(false) : void 0;
      return formik;
    }
    var isFunction = function isFunction2(obj) {
      return typeof obj === "function";
    };
    var isObject = function isObject2(obj) {
      return obj !== null && typeof obj === "object";
    };
    var isInteger = function isInteger2(obj) {
      return String(Math.floor(Number(obj))) === obj;
    };
    var isString = function isString2(obj) {
      return Object.prototype.toString.call(obj) === "[object String]";
    };
    var isPromise = function isPromise2(value) {
      return isObject(value) && isFunction(value.then);
    };
    function getIn(obj, key, def, p2) {
      if (p2 === void 0) {
        p2 = 0;
      }
      var path = toPath(key);
      while (obj && p2 < path.length) {
        obj = obj[path[p2++]];
      }
      if (p2 !== path.length && !obj) {
        return def;
      }
      return obj === void 0 ? def : obj;
    }
    function setIn(obj, path, value) {
      var res = clone(obj);
      var resVal = res;
      var i = 0;
      var pathArray = toPath(path);
      for (; i < pathArray.length - 1; i++) {
        var currentPath = pathArray[i];
        var currentObj = getIn(obj, pathArray.slice(0, i + 1));
        if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {
          resVal = resVal[currentPath] = clone(currentObj);
        } else {
          var nextPath = pathArray[i + 1];
          resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};
        }
      }
      if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {
        return obj;
      }
      if (value === void 0) {
        delete resVal[pathArray[i]];
      } else {
        resVal[pathArray[i]] = value;
      }
      if (i === 0 && value === void 0) {
        delete res[pathArray[i]];
      }
      return res;
    }
    function setNestedObjectValues(object, value, visited, response) {
      if (visited === void 0) {
        visited = /* @__PURE__ */ new WeakMap();
      }
      if (response === void 0) {
        response = {};
      }
      for (var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++) {
        var k2 = _Object$keys[_i];
        var val = object[k2];
        if (isObject(val)) {
          if (!visited.get(val)) {
            visited.set(val, true);
            response[k2] = Array.isArray(val) ? [] : {};
            setNestedObjectValues(val, value, visited, response[k2]);
          }
        } else {
          response[k2] = value;
        }
      }
      return response;
    }
    function formikReducer(state, msg) {
      switch (msg.type) {
        case "SET_VALUES":
          return _extends({}, state, {
            values: msg.payload
          });
        case "SET_TOUCHED":
          return _extends({}, state, {
            touched: msg.payload
          });
        case "SET_ERRORS":
          if (isEqual(state.errors, msg.payload)) {
            return state;
          }
          return _extends({}, state, {
            errors: msg.payload
          });
        case "SET_STATUS":
          return _extends({}, state, {
            status: msg.payload
          });
        case "SET_ISSUBMITTING":
          return _extends({}, state, {
            isSubmitting: msg.payload
          });
        case "SET_ISVALIDATING":
          return _extends({}, state, {
            isValidating: msg.payload
          });
        case "SET_FIELD_VALUE":
          return _extends({}, state, {
            values: setIn(state.values, msg.payload.field, msg.payload.value)
          });
        case "SET_FIELD_TOUCHED":
          return _extends({}, state, {
            touched: setIn(state.touched, msg.payload.field, msg.payload.value)
          });
        case "SET_FIELD_ERROR":
          return _extends({}, state, {
            errors: setIn(state.errors, msg.payload.field, msg.payload.value)
          });
        case "RESET_FORM":
          return _extends({}, state, msg.payload);
        case "SET_FORMIK_STATE":
          return msg.payload(state);
        case "SUBMIT_ATTEMPT":
          return _extends({}, state, {
            touched: setNestedObjectValues(state.values, true),
            isSubmitting: true,
            submitCount: state.submitCount + 1
          });
        case "SUBMIT_FAILURE":
          return _extends({}, state, {
            isSubmitting: false
          });
        case "SUBMIT_SUCCESS":
          return _extends({}, state, {
            isSubmitting: false
          });
        default:
          return state;
      }
    }
    var emptyErrors = {};
    var emptyTouched = {};
    function useFormik(_ref) {
      var _ref$validateOnChange = _ref.validateOnChange, validateOnChange = _ref$validateOnChange === void 0 ? true : _ref$validateOnChange, _ref$validateOnBlur = _ref.validateOnBlur, validateOnBlur = _ref$validateOnBlur === void 0 ? true : _ref$validateOnBlur, _ref$validateOnMount = _ref.validateOnMount, validateOnMount = _ref$validateOnMount === void 0 ? false : _ref$validateOnMount, isInitialValid = _ref.isInitialValid, _ref$enableReinitiali = _ref.enableReinitialize, enableReinitialize = _ref$enableReinitiali === void 0 ? false : _ref$enableReinitiali, onSubmit = _ref.onSubmit, rest = _objectWithoutPropertiesLoose(_ref, ["validateOnChange", "validateOnBlur", "validateOnMount", "isInitialValid", "enableReinitialize", "onSubmit"]);
      var props = _extends({
        validateOnChange,
        validateOnBlur,
        validateOnMount,
        onSubmit
      }, rest);
      var initialValues = reactExports.useRef(props.initialValues);
      var initialErrors = reactExports.useRef(props.initialErrors || emptyErrors);
      var initialTouched = reactExports.useRef(props.initialTouched || emptyTouched);
      var initialStatus = reactExports.useRef(props.initialStatus);
      var isMounted = reactExports.useRef(false);
      var fieldRegistry = reactExports.useRef({});
      reactExports.useEffect(function() {
        isMounted.current = true;
        return function() {
          isMounted.current = false;
        };
      }, []);
      var _React$useState = reactExports.useState(0), setIteration = _React$useState[1];
      var stateRef = reactExports.useRef({
        values: cloneDeep(props.initialValues),
        errors: cloneDeep(props.initialErrors) || emptyErrors,
        touched: cloneDeep(props.initialTouched) || emptyTouched,
        status: cloneDeep(props.initialStatus),
        isSubmitting: false,
        isValidating: false,
        submitCount: 0
      });
      var state = stateRef.current;
      var dispatch = reactExports.useCallback(function(action) {
        var prev = stateRef.current;
        stateRef.current = formikReducer(prev, action);
        if (prev !== stateRef.current)
          setIteration(function(x2) {
            return x2 + 1;
          });
      }, []);
      var runValidateHandler = reactExports.useCallback(function(values, field) {
        return new Promise(function(resolve, reject) {
          var maybePromisedErrors = props.validate(values, field);
          if (maybePromisedErrors == null) {
            resolve(emptyErrors);
          } else if (isPromise(maybePromisedErrors)) {
            maybePromisedErrors.then(function(errors) {
              resolve(errors || emptyErrors);
            }, function(actualException) {
              reject(actualException);
            });
          } else {
            resolve(maybePromisedErrors);
          }
        });
      }, [props.validate]);
      var runValidationSchema = reactExports.useCallback(function(values, field) {
        var validationSchema2 = props.validationSchema;
        var schema = isFunction(validationSchema2) ? validationSchema2(field) : validationSchema2;
        var promise = field && schema.validateAt ? schema.validateAt(field, values) : validateYupSchema(values, schema);
        return new Promise(function(resolve, reject) {
          promise.then(function() {
            resolve(emptyErrors);
          }, function(err) {
            if (err.name === "ValidationError") {
              resolve(yupToFormErrors(err));
            } else {
              reject(err);
            }
          });
        });
      }, [props.validationSchema]);
      var runSingleFieldLevelValidation = reactExports.useCallback(function(field, value) {
        return new Promise(function(resolve) {
          return resolve(fieldRegistry.current[field].validate(value));
        });
      }, []);
      var runFieldLevelValidations = reactExports.useCallback(function(values) {
        var fieldKeysWithValidation = Object.keys(fieldRegistry.current).filter(function(f2) {
          return isFunction(fieldRegistry.current[f2].validate);
        });
        var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function(f2) {
          return runSingleFieldLevelValidation(f2, getIn(values, f2));
        }) : [Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];
        return Promise.all(fieldValidations).then(function(fieldErrorsList) {
          return fieldErrorsList.reduce(function(prev, curr, index) {
            if (curr === "DO_NOT_DELETE_YOU_WILL_BE_FIRED") {
              return prev;
            }
            if (curr) {
              prev = setIn(prev, fieldKeysWithValidation[index], curr);
            }
            return prev;
          }, {});
        });
      }, [runSingleFieldLevelValidation]);
      var runAllValidations = reactExports.useCallback(function(values) {
        return Promise.all([runFieldLevelValidations(values), props.validationSchema ? runValidationSchema(values) : {}, props.validate ? runValidateHandler(values) : {}]).then(function(_ref2) {
          var fieldErrors = _ref2[0], schemaErrors = _ref2[1], validateErrors = _ref2[2];
          var combinedErrors = deepmerge_1.all([fieldErrors, schemaErrors, validateErrors], {
            arrayMerge
          });
          return combinedErrors;
        });
      }, [props.validate, props.validationSchema, runFieldLevelValidations, runValidateHandler, runValidationSchema]);
      var validateFormWithHighPriority = useEventCallback(function(values) {
        if (values === void 0) {
          values = state.values;
        }
        dispatch({
          type: "SET_ISVALIDATING",
          payload: true
        });
        return runAllValidations(values).then(function(combinedErrors) {
          if (!!isMounted.current) {
            dispatch({
              type: "SET_ISVALIDATING",
              payload: false
            });
            dispatch({
              type: "SET_ERRORS",
              payload: combinedErrors
            });
          }
          return combinedErrors;
        });
      });
      reactExports.useEffect(function() {
        if (validateOnMount && isMounted.current === true && isEqual(initialValues.current, props.initialValues)) {
          validateFormWithHighPriority(initialValues.current);
        }
      }, [validateOnMount, validateFormWithHighPriority]);
      var resetForm = reactExports.useCallback(function(nextState) {
        var values = nextState && nextState.values ? nextState.values : initialValues.current;
        var errors = nextState && nextState.errors ? nextState.errors : initialErrors.current ? initialErrors.current : props.initialErrors || {};
        var touched = nextState && nextState.touched ? nextState.touched : initialTouched.current ? initialTouched.current : props.initialTouched || {};
        var status = nextState && nextState.status ? nextState.status : initialStatus.current ? initialStatus.current : props.initialStatus;
        initialValues.current = values;
        initialErrors.current = errors;
        initialTouched.current = touched;
        initialStatus.current = status;
        var dispatchFn = function dispatchFn2() {
          dispatch({
            type: "RESET_FORM",
            payload: {
              isSubmitting: !!nextState && !!nextState.isSubmitting,
              errors,
              touched,
              status,
              values,
              isValidating: !!nextState && !!nextState.isValidating,
              submitCount: !!nextState && !!nextState.submitCount && typeof nextState.submitCount === "number" ? nextState.submitCount : 0
            }
          });
        };
        if (props.onReset) {
          var maybePromisedOnReset = props.onReset(state.values, imperativeMethods);
          if (isPromise(maybePromisedOnReset)) {
            maybePromisedOnReset.then(dispatchFn);
          } else {
            dispatchFn();
          }
        } else {
          dispatchFn();
        }
      }, [props.initialErrors, props.initialStatus, props.initialTouched, props.onReset]);
      reactExports.useEffect(function() {
        if (isMounted.current === true && !isEqual(initialValues.current, props.initialValues)) {
          if (enableReinitialize) {
            initialValues.current = props.initialValues;
            resetForm();
            if (validateOnMount) {
              validateFormWithHighPriority(initialValues.current);
            }
          }
        }
      }, [enableReinitialize, props.initialValues, resetForm, validateOnMount, validateFormWithHighPriority]);
      reactExports.useEffect(function() {
        if (enableReinitialize && isMounted.current === true && !isEqual(initialErrors.current, props.initialErrors)) {
          initialErrors.current = props.initialErrors || emptyErrors;
          dispatch({
            type: "SET_ERRORS",
            payload: props.initialErrors || emptyErrors
          });
        }
      }, [enableReinitialize, props.initialErrors]);
      reactExports.useEffect(function() {
        if (enableReinitialize && isMounted.current === true && !isEqual(initialTouched.current, props.initialTouched)) {
          initialTouched.current = props.initialTouched || emptyTouched;
          dispatch({
            type: "SET_TOUCHED",
            payload: props.initialTouched || emptyTouched
          });
        }
      }, [enableReinitialize, props.initialTouched]);
      reactExports.useEffect(function() {
        if (enableReinitialize && isMounted.current === true && !isEqual(initialStatus.current, props.initialStatus)) {
          initialStatus.current = props.initialStatus;
          dispatch({
            type: "SET_STATUS",
            payload: props.initialStatus
          });
        }
      }, [enableReinitialize, props.initialStatus, props.initialTouched]);
      var validateField = useEventCallback(function(name) {
        if (fieldRegistry.current[name] && isFunction(fieldRegistry.current[name].validate)) {
          var value = getIn(state.values, name);
          var maybePromise = fieldRegistry.current[name].validate(value);
          if (isPromise(maybePromise)) {
            dispatch({
              type: "SET_ISVALIDATING",
              payload: true
            });
            return maybePromise.then(function(x2) {
              return x2;
            }).then(function(error) {
              dispatch({
                type: "SET_FIELD_ERROR",
                payload: {
                  field: name,
                  value: error
                }
              });
              dispatch({
                type: "SET_ISVALIDATING",
                payload: false
              });
            });
          } else {
            dispatch({
              type: "SET_FIELD_ERROR",
              payload: {
                field: name,
                value: maybePromise
              }
            });
            return Promise.resolve(maybePromise);
          }
        } else if (props.validationSchema) {
          dispatch({
            type: "SET_ISVALIDATING",
            payload: true
          });
          return runValidationSchema(state.values, name).then(function(x2) {
            return x2;
          }).then(function(error) {
            dispatch({
              type: "SET_FIELD_ERROR",
              payload: {
                field: name,
                value: getIn(error, name)
              }
            });
            dispatch({
              type: "SET_ISVALIDATING",
              payload: false
            });
          });
        }
        return Promise.resolve();
      });
      var registerField = reactExports.useCallback(function(name, _ref3) {
        var validate = _ref3.validate;
        fieldRegistry.current[name] = {
          validate
        };
      }, []);
      var unregisterField = reactExports.useCallback(function(name) {
        delete fieldRegistry.current[name];
      }, []);
      var setTouched = useEventCallback(function(touched, shouldValidate) {
        dispatch({
          type: "SET_TOUCHED",
          payload: touched
        });
        var willValidate = shouldValidate === void 0 ? validateOnBlur : shouldValidate;
        return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
      });
      var setErrors = reactExports.useCallback(function(errors) {
        dispatch({
          type: "SET_ERRORS",
          payload: errors
        });
      }, []);
      var setValues = useEventCallback(function(values, shouldValidate) {
        var resolvedValues = isFunction(values) ? values(state.values) : values;
        dispatch({
          type: "SET_VALUES",
          payload: resolvedValues
        });
        var willValidate = shouldValidate === void 0 ? validateOnChange : shouldValidate;
        return willValidate ? validateFormWithHighPriority(resolvedValues) : Promise.resolve();
      });
      var setFieldError = reactExports.useCallback(function(field, value) {
        dispatch({
          type: "SET_FIELD_ERROR",
          payload: {
            field,
            value
          }
        });
      }, []);
      var setFieldValue = useEventCallback(function(field, value, shouldValidate) {
        dispatch({
          type: "SET_FIELD_VALUE",
          payload: {
            field,
            value
          }
        });
        var willValidate = shouldValidate === void 0 ? validateOnChange : shouldValidate;
        return willValidate ? validateFormWithHighPriority(setIn(state.values, field, value)) : Promise.resolve();
      });
      var executeChange = reactExports.useCallback(function(eventOrTextValue, maybePath) {
        var field = maybePath;
        var val = eventOrTextValue;
        var parsed;
        if (!isString(eventOrTextValue)) {
          if (eventOrTextValue.persist) {
            eventOrTextValue.persist();
          }
          var target = eventOrTextValue.target ? eventOrTextValue.target : eventOrTextValue.currentTarget;
          var type = target.type, name = target.name, id2 = target.id, value = target.value, checked = target.checked, outerHTML = target.outerHTML, options = target.options, multiple = target.multiple;
          field = maybePath ? maybePath : name ? name : id2;
          if (!field && false) {
            warnAboutMissingIdentifier({
              htmlContent: outerHTML,
              documentationAnchorLink: "handlechange-e-reactchangeeventany--void",
              handlerName: "handleChange"
            });
          }
          val = /number|range/.test(type) ? (parsed = parseFloat(value), isNaN(parsed) ? "" : parsed) : /checkbox/.test(type) ? getValueForCheckbox(getIn(state.values, field), checked, value) : options && multiple ? getSelectedValues(options) : value;
        }
        if (field) {
          setFieldValue(field, val);
        }
      }, [setFieldValue, state.values]);
      var handleChange = useEventCallback(function(eventOrPath) {
        if (isString(eventOrPath)) {
          return function(event) {
            return executeChange(event, eventOrPath);
          };
        } else {
          executeChange(eventOrPath);
        }
      });
      var setFieldTouched = useEventCallback(function(field, touched, shouldValidate) {
        if (touched === void 0) {
          touched = true;
        }
        dispatch({
          type: "SET_FIELD_TOUCHED",
          payload: {
            field,
            value: touched
          }
        });
        var willValidate = shouldValidate === void 0 ? validateOnBlur : shouldValidate;
        return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
      });
      var executeBlur = reactExports.useCallback(function(e2, path) {
        if (e2.persist) {
          e2.persist();
        }
        var _e$target = e2.target, name = _e$target.name, id2 = _e$target.id, outerHTML = _e$target.outerHTML;
        var field = path ? path : name ? name : id2;
        if (!field && false) {
          warnAboutMissingIdentifier({
            htmlContent: outerHTML,
            documentationAnchorLink: "handleblur-e-any--void",
            handlerName: "handleBlur"
          });
        }
        setFieldTouched(field, true);
      }, [setFieldTouched]);
      var handleBlur = useEventCallback(function(eventOrString) {
        if (isString(eventOrString)) {
          return function(event) {
            return executeBlur(event, eventOrString);
          };
        } else {
          executeBlur(eventOrString);
        }
      });
      var setFormikState = reactExports.useCallback(function(stateOrCb) {
        if (isFunction(stateOrCb)) {
          dispatch({
            type: "SET_FORMIK_STATE",
            payload: stateOrCb
          });
        } else {
          dispatch({
            type: "SET_FORMIK_STATE",
            payload: function payload() {
              return stateOrCb;
            }
          });
        }
      }, []);
      var setStatus = reactExports.useCallback(function(status) {
        dispatch({
          type: "SET_STATUS",
          payload: status
        });
      }, []);
      var setSubmitting = reactExports.useCallback(function(isSubmitting) {
        dispatch({
          type: "SET_ISSUBMITTING",
          payload: isSubmitting
        });
      }, []);
      var submitForm = useEventCallback(function() {
        dispatch({
          type: "SUBMIT_ATTEMPT"
        });
        return validateFormWithHighPriority().then(function(combinedErrors) {
          var isInstanceOfError = combinedErrors instanceof Error;
          var isActuallyValid = !isInstanceOfError && Object.keys(combinedErrors).length === 0;
          if (isActuallyValid) {
            var promiseOrUndefined;
            try {
              promiseOrUndefined = executeSubmit();
              if (promiseOrUndefined === void 0) {
                return;
              }
            } catch (error) {
              throw error;
            }
            return Promise.resolve(promiseOrUndefined).then(function(result) {
              if (!!isMounted.current) {
                dispatch({
                  type: "SUBMIT_SUCCESS"
                });
              }
              return result;
            })["catch"](function(_errors) {
              if (!!isMounted.current) {
                dispatch({
                  type: "SUBMIT_FAILURE"
                });
                throw _errors;
              }
            });
          } else if (!!isMounted.current) {
            dispatch({
              type: "SUBMIT_FAILURE"
            });
            if (isInstanceOfError) {
              throw combinedErrors;
            }
          }
          return;
        });
      });
      var handleSubmit = useEventCallback(function(e2) {
        if (e2 && e2.preventDefault && isFunction(e2.preventDefault)) {
          e2.preventDefault();
        }
        if (e2 && e2.stopPropagation && isFunction(e2.stopPropagation)) {
          e2.stopPropagation();
        }
        submitForm()["catch"](function(reason) {
          console.warn("Warning: An unhandled error was caught from submitForm()", reason);
        });
      });
      var imperativeMethods = {
        resetForm,
        validateForm: validateFormWithHighPriority,
        validateField,
        setErrors,
        setFieldError,
        setFieldTouched,
        setFieldValue,
        setStatus,
        setSubmitting,
        setTouched,
        setValues,
        setFormikState,
        submitForm
      };
      var executeSubmit = useEventCallback(function() {
        return onSubmit(state.values, imperativeMethods);
      });
      var handleReset = useEventCallback(function(e2) {
        if (e2 && e2.preventDefault && isFunction(e2.preventDefault)) {
          e2.preventDefault();
        }
        if (e2 && e2.stopPropagation && isFunction(e2.stopPropagation)) {
          e2.stopPropagation();
        }
        resetForm();
      });
      var getFieldMeta = reactExports.useCallback(function(name) {
        return {
          value: getIn(state.values, name),
          error: getIn(state.errors, name),
          touched: !!getIn(state.touched, name),
          initialValue: getIn(initialValues.current, name),
          initialTouched: !!getIn(initialTouched.current, name),
          initialError: getIn(initialErrors.current, name)
        };
      }, [state.errors, state.touched, state.values]);
      var getFieldHelpers = reactExports.useCallback(function(name) {
        return {
          setValue: function setValue(value, shouldValidate) {
            return setFieldValue(name, value, shouldValidate);
          },
          setTouched: function setTouched2(value, shouldValidate) {
            return setFieldTouched(name, value, shouldValidate);
          },
          setError: function setError(value) {
            return setFieldError(name, value);
          }
        };
      }, [setFieldValue, setFieldTouched, setFieldError]);
      var getFieldProps = reactExports.useCallback(function(nameOrOptions) {
        var isAnObject = isObject(nameOrOptions);
        var name = isAnObject ? nameOrOptions.name : nameOrOptions;
        var valueState = getIn(state.values, name);
        var field = {
          name,
          value: valueState,
          onChange: handleChange,
          onBlur: handleBlur
        };
        if (isAnObject) {
          var type = nameOrOptions.type, valueProp = nameOrOptions.value, is = nameOrOptions.as, multiple = nameOrOptions.multiple;
          if (type === "checkbox") {
            if (valueProp === void 0) {
              field.checked = !!valueState;
            } else {
              field.checked = !!(Array.isArray(valueState) && ~valueState.indexOf(valueProp));
              field.value = valueProp;
            }
          } else if (type === "radio") {
            field.checked = valueState === valueProp;
            field.value = valueProp;
          } else if (is === "select" && multiple) {
            field.value = field.value || [];
            field.multiple = true;
          }
        }
        return field;
      }, [handleBlur, handleChange, state.values]);
      var dirty = reactExports.useMemo(function() {
        return !isEqual(initialValues.current, state.values);
      }, [initialValues.current, state.values]);
      var isValid2 = reactExports.useMemo(function() {
        return typeof isInitialValid !== "undefined" ? dirty ? state.errors && Object.keys(state.errors).length === 0 : isInitialValid !== false && isFunction(isInitialValid) ? isInitialValid(props) : isInitialValid : state.errors && Object.keys(state.errors).length === 0;
      }, [isInitialValid, dirty, state.errors, props]);
      var ctx = _extends({}, state, {
        initialValues: initialValues.current,
        initialErrors: initialErrors.current,
        initialTouched: initialTouched.current,
        initialStatus: initialStatus.current,
        handleBlur,
        handleChange,
        handleReset,
        handleSubmit,
        resetForm,
        setErrors,
        setFormikState,
        setFieldTouched,
        setFieldValue,
        setFieldError,
        setStatus,
        setSubmitting,
        setTouched,
        setValues,
        submitForm,
        validateForm: validateFormWithHighPriority,
        validateField,
        isValid: isValid2,
        dirty,
        unregisterField,
        registerField,
        getFieldProps,
        getFieldMeta,
        getFieldHelpers,
        validateOnBlur,
        validateOnChange,
        validateOnMount
      });
      return ctx;
    }
    function warnAboutMissingIdentifier(_ref4) {
      var htmlContent = _ref4.htmlContent, documentationAnchorLink = _ref4.documentationAnchorLink, handlerName = _ref4.handlerName;
      console.warn("Warning: Formik called `" + handlerName + "`, but you forgot to pass an `id` or `name` attribute to your input:\n    " + htmlContent + "\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#" + documentationAnchorLink + "\n  ");
    }
    function yupToFormErrors(yupError) {
      var errors = {};
      if (yupError.inner) {
        if (yupError.inner.length === 0) {
          return setIn(errors, yupError.path, yupError.message);
        }
        for (var _iterator = yupError.inner, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
          var _ref5;
          if (_isArray) {
            if (_i >= _iterator.length)
              break;
            _ref5 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done)
              break;
            _ref5 = _i.value;
          }
          var err = _ref5;
          if (!getIn(errors, err.path)) {
            errors = setIn(errors, err.path, err.message);
          }
        }
      }
      return errors;
    }
    function validateYupSchema(values, schema, sync, context) {
      if (sync === void 0) {
        sync = false;
      }
      var normalizedValues = prepareDataForValidation(values);
      return schema[sync ? "validateSync" : "validate"](normalizedValues, {
        abortEarly: false,
        context: context || normalizedValues
      });
    }
    function prepareDataForValidation(values) {
      var data = Array.isArray(values) ? [] : {};
      for (var k2 in values) {
        if (Object.prototype.hasOwnProperty.call(values, k2)) {
          var key = String(k2);
          if (Array.isArray(values[key]) === true) {
            data[key] = values[key].map(function(value) {
              if (Array.isArray(value) === true || isPlainObject(value)) {
                return prepareDataForValidation(value);
              } else {
                return value !== "" ? value : void 0;
              }
            });
          } else if (isPlainObject(values[key])) {
            data[key] = prepareDataForValidation(values[key]);
          } else {
            data[key] = values[key] !== "" ? values[key] : void 0;
          }
        }
      }
      return data;
    }
    function arrayMerge(target, source, options) {
      var destination = target.slice();
      source.forEach(function merge(e2, i) {
        if (typeof destination[i] === "undefined") {
          var cloneRequested = options.clone !== false;
          var shouldClone = cloneRequested && options.isMergeableObject(e2);
          destination[i] = shouldClone ? deepmerge_1(Array.isArray(e2) ? [] : {}, e2, options) : e2;
        } else if (options.isMergeableObject(e2)) {
          destination[i] = deepmerge_1(target[i], e2, options);
        } else if (target.indexOf(e2) === -1) {
          destination.push(e2);
        }
      });
      return destination;
    }
    function getSelectedValues(options) {
      return Array.from(options).filter(function(el2) {
        return el2.selected;
      }).map(function(el2) {
        return el2.value;
      });
    }
    function getValueForCheckbox(currentValue, checked, valueProp) {
      if (typeof currentValue === "boolean") {
        return Boolean(checked);
      }
      var currentArrayOfValues = [];
      var isValueInArray = false;
      var index = -1;
      if (!Array.isArray(currentValue)) {
        if (!valueProp || valueProp == "true" || valueProp == "false") {
          return Boolean(checked);
        }
      } else {
        currentArrayOfValues = currentValue;
        index = currentValue.indexOf(valueProp);
        isValueInArray = index >= 0;
      }
      if (checked && valueProp && !isValueInArray) {
        return currentArrayOfValues.concat(valueProp);
      }
      if (!isValueInArray) {
        return currentArrayOfValues;
      }
      return currentArrayOfValues.slice(0, index).concat(currentArrayOfValues.slice(index + 1));
    }
    var useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
    function useEventCallback(fn) {
      var ref2 = reactExports.useRef(fn);
      useIsomorphicLayoutEffect(function() {
        ref2.current = fn;
      });
      return reactExports.useCallback(function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return ref2.current.apply(void 0, args);
      }, []);
    }
    var Form = /* @__PURE__ */ reactExports.forwardRef(function(props, ref2) {
      var action = props.action, rest = _objectWithoutPropertiesLoose(props, ["action"]);
      var _action = action != null ? action : "#";
      var _useFormikContext = useFormikContext(), handleReset = _useFormikContext.handleReset, handleSubmit = _useFormikContext.handleSubmit;
      return reactExports.createElement("form", _extends({
        onSubmit: handleSubmit,
        ref: ref2,
        onReset: handleReset,
        action: _action
      }, rest));
    });
    Form.displayName = "Form";
    var dist = {};
    var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
      var extendStatics = function(d2, b2) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t2[0] & 1)
          throw t2[1];
        return t2[1];
      }, trys: [], ops: [] }, f2, y2, t2, g2;
      return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
        return this;
      }), g2;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
              return t2;
            if (y2 = 0, t2)
              op = [op[0] & 2, t2.value];
            switch (op[0]) {
              case 0:
              case 1:
                t2 = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t2[1]) {
                  _.label = t2[1];
                  t2 = op;
                  break;
                }
                if (t2 && _.label < t2[2]) {
                  _.label = t2[2];
                  _.ops.push(op);
                  break;
                }
                if (t2[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t2 = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(dist, "__esModule", { value: true });
    dist.toFormikValidate = toFormikValidationSchema_1 = dist.toFormikValidationSchema = dist.ValidationError = void 0;
    var ValidationError = (
      /** @class */
      function(_super) {
        __extends(ValidationError2, _super);
        function ValidationError2(message) {
          var _this = _super.call(this, message) || this;
          _this.name = "ValidationError";
          _this.inner = [];
          return _this;
        }
        return ValidationError2;
      }(Error)
    );
    dist.ValidationError = ValidationError;
    function createValidationError(e2) {
      var error = new ValidationError(e2.message);
      error.inner = e2.errors.map(function(err) {
        return {
          message: err.message,
          path: err.path.join(".")
        };
      });
      return error;
    }
    function toFormikValidationSchema(schema, params) {
      return {
        validate: function(obj) {
          return __awaiter(this, void 0, void 0, function() {
            var err_1;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  _a.trys.push([0, 2, , 3]);
                  return [4, schema.parseAsync(obj, params)];
                case 1:
                  _a.sent();
                  return [3, 3];
                case 2:
                  err_1 = _a.sent();
                  throw createValidationError(err_1);
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }
      };
    }
    var toFormikValidationSchema_1 = dist.toFormikValidationSchema = toFormikValidationSchema;
    function createValidationResult(error) {
      var result = {};
      for (var _i = 0, _a = error.errors; _i < _a.length; _i++) {
        var x2 = _a[_i];
        result[x2.path.filter(Boolean).join(".")] = x2.message;
      }
      return result;
    }
    function toFormikValidate(schema, params) {
      var _this = this;
      return function(values) {
        return __awaiter(_this, void 0, void 0, function() {
          var result;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, schema.safeParseAsync(values, params)];
              case 1:
                result = _a.sent();
                if (!result.success) {
                  return [2, createValidationResult(result.error)];
                }
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
    }
    dist.toFormikValidate = toFormikValidate;
    const Modal = ({ isOpen, children: children2, onClose }) => {
      const container2 = document.querySelector("#modal-root");
      if (!isOpen || !isDefined(container2)) {
        return null;
      }
      return reactDomExports.createPortal(
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            className: "fixed inset-0 flex justify-center items-center bg-modal-overlay z-[2]",
            onClick: (event) => event.stopPropagation(),
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: cn(
                  "relative p-4 m-4 rounded",
                  "bg-modal-bg shadow-lg",
                  "border border-[var(--vscode-widget-border)] border-solid cursor-auto"
                ),
                children: [
                  isDefined(onClose) && /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "absolute top-1 right-1 text-gray-400 hover:text-gray-600", onClick: () => onClose(), children: /* @__PURE__ */ jsxRuntimeExports.jsx(X, { className: "h-4 w-4" }) }),
                  children2
                ]
              }
            )
          }
        ),
        container2
      );
    };
    var util;
    (function(util2) {
      util2.assertEqual = (val) => val;
      function assertIs(_arg) {
      }
      util2.assertIs = assertIs;
      function assertNever(_x) {
        throw new Error();
      }
      util2.assertNever = assertNever;
      util2.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
          obj[item] = item;
        }
        return obj;
      };
      util2.getValidEnumValues = (obj) => {
        const validKeys = util2.objectKeys(obj).filter((k2) => typeof obj[obj[k2]] !== "number");
        const filtered = {};
        for (const k2 of validKeys) {
          filtered[k2] = obj[k2];
        }
        return util2.objectValues(filtered);
      };
      util2.objectValues = (obj) => {
        return util2.objectKeys(obj).map(function(e2) {
          return obj[e2];
        });
      };
      util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
        const keys2 = [];
        for (const key in object) {
          if (Object.prototype.hasOwnProperty.call(object, key)) {
            keys2.push(key);
          }
        }
        return keys2;
      };
      util2.find = (arr, checker) => {
        for (const item of arr) {
          if (checker(item))
            return item;
        }
        return void 0;
      };
      util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
      function joinValues(array, separator = " | ") {
        return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
      }
      util2.joinValues = joinValues;
      util2.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
          return value.toString();
        }
        return value;
      };
    })(util || (util = {}));
    var objectUtil;
    (function(objectUtil2) {
      objectUtil2.mergeShapes = (first, second) => {
        return {
          ...first,
          ...second
          // second overwrites first
        };
      };
    })(objectUtil || (objectUtil = {}));
    const ZodParsedType = util.arrayToEnum([
      "string",
      "nan",
      "number",
      "integer",
      "float",
      "boolean",
      "date",
      "bigint",
      "symbol",
      "function",
      "undefined",
      "null",
      "array",
      "object",
      "unknown",
      "promise",
      "void",
      "never",
      "map",
      "set"
    ]);
    const getParsedType = (data) => {
      const t2 = typeof data;
      switch (t2) {
        case "undefined":
          return ZodParsedType.undefined;
        case "string":
          return ZodParsedType.string;
        case "number":
          return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
          return ZodParsedType.boolean;
        case "function":
          return ZodParsedType.function;
        case "bigint":
          return ZodParsedType.bigint;
        case "symbol":
          return ZodParsedType.symbol;
        case "object":
          if (Array.isArray(data)) {
            return ZodParsedType.array;
          }
          if (data === null) {
            return ZodParsedType.null;
          }
          if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
            return ZodParsedType.promise;
          }
          if (typeof Map !== "undefined" && data instanceof Map) {
            return ZodParsedType.map;
          }
          if (typeof Set !== "undefined" && data instanceof Set) {
            return ZodParsedType.set;
          }
          if (typeof Date !== "undefined" && data instanceof Date) {
            return ZodParsedType.date;
          }
          return ZodParsedType.object;
        default:
          return ZodParsedType.unknown;
      }
    };
    const ZodIssueCode = util.arrayToEnum([
      "invalid_type",
      "invalid_literal",
      "custom",
      "invalid_union",
      "invalid_union_discriminator",
      "invalid_enum_value",
      "unrecognized_keys",
      "invalid_arguments",
      "invalid_return_type",
      "invalid_date",
      "invalid_string",
      "too_small",
      "too_big",
      "invalid_intersection_types",
      "not_multiple_of",
      "not_finite"
    ]);
    const quotelessJson = (obj) => {
      const json = JSON.stringify(obj, null, 2);
      return json.replace(/"([^"]+)":/g, "$1:");
    };
    class ZodError extends Error {
      constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
          this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
          this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(this, actualProto);
        } else {
          this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
      }
      get errors() {
        return this.issues;
      }
      format(_mapper) {
        const mapper = _mapper || function(issue) {
          return issue.message;
        };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
          for (const issue of error.issues) {
            if (issue.code === "invalid_union") {
              issue.unionErrors.map(processError);
            } else if (issue.code === "invalid_return_type") {
              processError(issue.returnTypeError);
            } else if (issue.code === "invalid_arguments") {
              processError(issue.argumentsError);
            } else if (issue.path.length === 0) {
              fieldErrors._errors.push(mapper(issue));
            } else {
              let curr = fieldErrors;
              let i = 0;
              while (i < issue.path.length) {
                const el2 = issue.path[i];
                const terminal = i === issue.path.length - 1;
                if (!terminal) {
                  curr[el2] = curr[el2] || { _errors: [] };
                } else {
                  curr[el2] = curr[el2] || { _errors: [] };
                  curr[el2]._errors.push(mapper(issue));
                }
                curr = curr[el2];
                i++;
              }
            }
          }
        };
        processError(this);
        return fieldErrors;
      }
      static assert(value) {
        if (!(value instanceof ZodError)) {
          throw new Error(`Not a ZodError: ${value}`);
        }
      }
      toString() {
        return this.message;
      }
      get message() {
        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
      }
      get isEmpty() {
        return this.issues.length === 0;
      }
      flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
          if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
            fieldErrors[sub.path[0]].push(mapper(sub));
          } else {
            formErrors.push(mapper(sub));
          }
        }
        return { formErrors, fieldErrors };
      }
      get formErrors() {
        return this.flatten();
      }
    }
    ZodError.create = (issues) => {
      const error = new ZodError(issues);
      return error;
    };
    const errorMap = (issue, _ctx) => {
      let message;
      switch (issue.code) {
        case ZodIssueCode.invalid_type:
          if (issue.received === ZodParsedType.undefined) {
            message = "Required";
          } else {
            message = `Expected ${issue.expected}, received ${issue.received}`;
          }
          break;
        case ZodIssueCode.invalid_literal:
          message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
          break;
        case ZodIssueCode.unrecognized_keys:
          message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
          break;
        case ZodIssueCode.invalid_union:
          message = `Invalid input`;
          break;
        case ZodIssueCode.invalid_union_discriminator:
          message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
          break;
        case ZodIssueCode.invalid_enum_value:
          message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
          break;
        case ZodIssueCode.invalid_arguments:
          message = `Invalid function arguments`;
          break;
        case ZodIssueCode.invalid_return_type:
          message = `Invalid function return type`;
          break;
        case ZodIssueCode.invalid_date:
          message = `Invalid date`;
          break;
        case ZodIssueCode.invalid_string:
          if (typeof issue.validation === "object") {
            if ("includes" in issue.validation) {
              message = `Invalid input: must include "${issue.validation.includes}"`;
              if (typeof issue.validation.position === "number") {
                message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
              }
            } else if ("startsWith" in issue.validation) {
              message = `Invalid input: must start with "${issue.validation.startsWith}"`;
            } else if ("endsWith" in issue.validation) {
              message = `Invalid input: must end with "${issue.validation.endsWith}"`;
            } else {
              util.assertNever(issue.validation);
            }
          } else if (issue.validation !== "regex") {
            message = `Invalid ${issue.validation}`;
          } else {
            message = "Invalid";
          }
          break;
        case ZodIssueCode.too_small:
          if (issue.type === "array")
            message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
          else if (issue.type === "string")
            message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
          else if (issue.type === "number")
            message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
          else if (issue.type === "date")
            message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
          else
            message = "Invalid input";
          break;
        case ZodIssueCode.too_big:
          if (issue.type === "array")
            message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
          else if (issue.type === "string")
            message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
          else if (issue.type === "number")
            message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "bigint")
            message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "date")
            message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
          else
            message = "Invalid input";
          break;
        case ZodIssueCode.custom:
          message = `Invalid input`;
          break;
        case ZodIssueCode.invalid_intersection_types:
          message = `Intersection results could not be merged`;
          break;
        case ZodIssueCode.not_multiple_of:
          message = `Number must be a multiple of ${issue.multipleOf}`;
          break;
        case ZodIssueCode.not_finite:
          message = "Number must be finite";
          break;
        default:
          message = _ctx.defaultError;
          util.assertNever(issue);
      }
      return { message };
    };
    let overrideErrorMap = errorMap;
    function setErrorMap(map) {
      overrideErrorMap = map;
    }
    function getErrorMap() {
      return overrideErrorMap;
    }
    const makeIssue = (params) => {
      const { data, path, errorMaps, issueData } = params;
      const fullPath = [...path, ...issueData.path || []];
      const fullIssue = {
        ...issueData,
        path: fullPath
      };
      if (issueData.message !== void 0) {
        return {
          ...issueData,
          path: fullPath,
          message: issueData.message
        };
      }
      let errorMessage = "";
      const maps = errorMaps.filter((m2) => !!m2).slice().reverse();
      for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
      }
      return {
        ...issueData,
        path: fullPath,
        message: errorMessage
      };
    };
    const EMPTY_PATH = [];
    function addIssueToContext(ctx, issueData) {
      const overrideMap = getErrorMap();
      const issue = makeIssue({
        issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          overrideMap,
          overrideMap === errorMap ? void 0 : errorMap
          // then global default map
        ].filter((x2) => !!x2)
      });
      ctx.common.issues.push(issue);
    }
    class ParseStatus {
      constructor() {
        this.value = "valid";
      }
      dirty() {
        if (this.value === "valid")
          this.value = "dirty";
      }
      abort() {
        if (this.value !== "aborted")
          this.value = "aborted";
      }
      static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
          if (s.status === "aborted")
            return INVALID;
          if (s.status === "dirty")
            status.dirty();
          arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
      }
      static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value
          });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
      }
      static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
          const { key, value } = pair;
          if (key.status === "aborted")
            return INVALID;
          if (value.status === "aborted")
            return INVALID;
          if (key.status === "dirty")
            status.dirty();
          if (value.status === "dirty")
            status.dirty();
          if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
            finalObject[key.value] = value.value;
          }
        }
        return { status: status.value, value: finalObject };
      }
    }
    const INVALID = Object.freeze({
      status: "aborted"
    });
    const DIRTY = (value) => ({ status: "dirty", value });
    const OK = (value) => ({ status: "valid", value });
    const isAborted = (x2) => x2.status === "aborted";
    const isDirty = (x2) => x2.status === "dirty";
    const isValid = (x2) => x2.status === "valid";
    const isAsync = (x2) => typeof Promise !== "undefined" && x2 instanceof Promise;
    function __classPrivateFieldGet(receiver, state, kind, f2) {
      if (kind === "a" && !f2)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f2) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f2)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
    }
    typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e2 = new Error(message);
      return e2.name = "SuppressedError", e2.error = error, e2.suppressed = suppressed, e2;
    };
    var errorUtil;
    (function(errorUtil2) {
      errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
      errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
    })(errorUtil || (errorUtil = {}));
    var _ZodEnum_cache, _ZodNativeEnum_cache;
    class ParseInputLazyPath {
      constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
      }
      get path() {
        if (!this._cachedPath.length) {
          if (this._key instanceof Array) {
            this._cachedPath.push(...this._path, ...this._key);
          } else {
            this._cachedPath.push(...this._path, this._key);
          }
        }
        return this._cachedPath;
      }
    }
    const handleResult = (ctx, result) => {
      if (isValid(result)) {
        return { success: true, data: result.value };
      } else {
        if (!ctx.common.issues.length) {
          throw new Error("Validation failed but no issues detected.");
        }
        return {
          success: false,
          get error() {
            if (this._error)
              return this._error;
            const error = new ZodError(ctx.common.issues);
            this._error = error;
            return this._error;
          }
        };
      }
    };
    function processCreateParams(params) {
      if (!params)
        return {};
      const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
      if (errorMap2 && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
      }
      if (errorMap2)
        return { errorMap: errorMap2, description };
      const customMap = (iss, ctx) => {
        var _a, _b;
        const { message } = params;
        if (iss.code === "invalid_enum_value") {
          return { message: message !== null && message !== void 0 ? message : ctx.defaultError };
        }
        if (typeof ctx.data === "undefined") {
          return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };
        }
        if (iss.code !== "invalid_type")
          return { message: ctx.defaultError };
        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
      };
      return { errorMap: customMap, description };
    }
    class ZodType {
      constructor(def) {
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
      }
      get description() {
        return this._def.description;
      }
      _getType(input) {
        return getParsedType(input.data);
      }
      _getOrReturnCtx(input, ctx) {
        return ctx || {
          common: input.parent.common,
          data: input.data,
          parsedType: getParsedType(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        };
      }
      _processInputParams(input) {
        return {
          status: new ParseStatus(),
          ctx: {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          }
        };
      }
      _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) {
          throw new Error("Synchronous parse encountered promise.");
        }
        return result;
      }
      _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
      }
      parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      safeParse(data, params) {
        var _a;
        const ctx = {
          common: {
            issues: [],
            async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
            contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
          },
          path: (params === null || params === void 0 ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
      }
      async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      async safeParseAsync(data, params) {
        const ctx = {
          common: {
            issues: [],
            contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            async: true
          },
          path: (params === null || params === void 0 ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
      }
      refine(check, message) {
        const getIssueProperties = (val) => {
          if (typeof message === "string" || typeof message === "undefined") {
            return { message };
          } else if (typeof message === "function") {
            return message(val);
          } else {
            return message;
          }
        };
        return this._refinement((val, ctx) => {
          const result = check(val);
          const setError = () => ctx.addIssue({
            code: ZodIssueCode.custom,
            ...getIssueProperties(val)
          });
          if (typeof Promise !== "undefined" && result instanceof Promise) {
            return result.then((data) => {
              if (!data) {
                setError();
                return false;
              } else {
                return true;
              }
            });
          }
          if (!result) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
          if (!check(val)) {
            ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
            return false;
          } else {
            return true;
          }
        });
      }
      _refinement(refinement) {
        return new ZodEffects({
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "refinement", refinement }
        });
      }
      superRefine(refinement) {
        return this._refinement(refinement);
      }
      optional() {
        return ZodOptional.create(this, this._def);
      }
      nullable() {
        return ZodNullable.create(this, this._def);
      }
      nullish() {
        return this.nullable().optional();
      }
      array() {
        return ZodArray.create(this, this._def);
      }
      promise() {
        return ZodPromise.create(this, this._def);
      }
      or(option) {
        return ZodUnion.create([this, option], this._def);
      }
      and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
      }
      transform(transform) {
        return new ZodEffects({
          ...processCreateParams(this._def),
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "transform", transform }
        });
      }
      default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
          ...processCreateParams(this._def),
          innerType: this,
          defaultValue: defaultValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodDefault
        });
      }
      brand() {
        return new ZodBranded({
          typeName: ZodFirstPartyTypeKind.ZodBranded,
          type: this,
          ...processCreateParams(this._def)
        });
      }
      catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch({
          ...processCreateParams(this._def),
          innerType: this,
          catchValue: catchValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodCatch
        });
      }
      describe(description) {
        const This = this.constructor;
        return new This({
          ...this._def,
          description
        });
      }
      pipe(target) {
        return ZodPipeline.create(this, target);
      }
      readonly() {
        return ZodReadonly.create(this);
      }
      isOptional() {
        return this.safeParse(void 0).success;
      }
      isNullable() {
        return this.safeParse(null).success;
      }
    }
    const cuidRegex = /^c[^\s-]{8,}$/i;
    const cuid2Regex = /^[0-9a-z]+$/;
    const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
    const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
    const nanoidRegex = /^[a-z0-9_-]{21}$/i;
    const durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
    const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
    const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
    let emojiRegex;
    const ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
    const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
    const base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
    const dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
    const dateRegex = new RegExp(`^${dateRegexSource}$`);
    function timeRegexSource(args) {
      let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
      if (args.precision) {
        regex = `${regex}\\.\\d{${args.precision}}`;
      } else if (args.precision == null) {
        regex = `${regex}(\\.\\d+)?`;
      }
      return regex;
    }
    function timeRegex(args) {
      return new RegExp(`^${timeRegexSource(args)}$`);
    }
    function datetimeRegex(args) {
      let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
      const opts = [];
      opts.push(args.local ? `Z?` : `Z`);
      if (args.offset)
        opts.push(`([+-]\\d{2}:?\\d{2})`);
      regex = `${regex}(${opts.join("|")})`;
      return new RegExp(`^${regex}$`);
    }
    function isValidIP(ip, version) {
      if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
        return true;
      }
      if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
        return true;
      }
      return false;
    }
    class ZodString extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.string,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        const status = new ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.length < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.length > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "length") {
            const tooBig = input.data.length > check.value;
            const tooSmall = input.data.length < check.value;
            if (tooBig || tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              if (tooBig) {
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              } else if (tooSmall) {
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              }
              status.dirty();
            }
          } else if (check.kind === "email") {
            if (!emailRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "email",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "emoji") {
            if (!emojiRegex) {
              emojiRegex = new RegExp(_emojiRegex, "u");
            }
            if (!emojiRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "emoji",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "uuid") {
            if (!uuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "uuid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "nanoid") {
            if (!nanoidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "nanoid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid") {
            if (!cuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "cuid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid2") {
            if (!cuid2Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "cuid2",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ulid") {
            if (!ulidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "ulid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "url") {
            try {
              new URL(input.data);
            } catch (_a) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "url",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "regex") {
            check.regex.lastIndex = 0;
            const testResult = check.regex.test(input.data);
            if (!testResult) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "regex",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "trim") {
            input.data = input.data.trim();
          } else if (check.kind === "includes") {
            if (!input.data.includes(check.value, check.position)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { includes: check.value, position: check.position },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "toLowerCase") {
            input.data = input.data.toLowerCase();
          } else if (check.kind === "toUpperCase") {
            input.data = input.data.toUpperCase();
          } else if (check.kind === "startsWith") {
            if (!input.data.startsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { startsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "endsWith") {
            if (!input.data.endsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { endsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "datetime") {
            const regex = datetimeRegex(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "datetime",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "date") {
            const regex = dateRegex;
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "date",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "time") {
            const regex = timeRegex(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "time",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "duration") {
            if (!durationRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "duration",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ip") {
            if (!isValidIP(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "ip",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64") {
            if (!base64Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "base64",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _regex(regex, validation, message) {
        return this.refinement((data) => regex.test(data), {
          validation,
          code: ZodIssueCode.invalid_string,
          ...errorUtil.errToObj(message)
        });
      }
      _addCheck(check) {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      email(message) {
        return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
      }
      url(message) {
        return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
      }
      emoji(message) {
        return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
      }
      uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
      }
      nanoid(message) {
        return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
      }
      cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
      }
      cuid2(message) {
        return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
      }
      ulid(message) {
        return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
      }
      base64(message) {
        return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
      }
      ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
      }
      datetime(options) {
        var _a, _b;
        if (typeof options === "string") {
          return this._addCheck({
            kind: "datetime",
            precision: null,
            offset: false,
            local: false,
            message: options
          });
        }
        return this._addCheck({
          kind: "datetime",
          precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
          offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
          local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
          ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      date(message) {
        return this._addCheck({ kind: "date", message });
      }
      time(options) {
        if (typeof options === "string") {
          return this._addCheck({
            kind: "time",
            precision: null,
            message: options
          });
        }
        return this._addCheck({
          kind: "time",
          precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
          ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      duration(message) {
        return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
      }
      regex(regex, message) {
        return this._addCheck({
          kind: "regex",
          regex,
          ...errorUtil.errToObj(message)
        });
      }
      includes(value, options) {
        return this._addCheck({
          kind: "includes",
          value,
          position: options === null || options === void 0 ? void 0 : options.position,
          ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      startsWith(value, message) {
        return this._addCheck({
          kind: "startsWith",
          value,
          ...errorUtil.errToObj(message)
        });
      }
      endsWith(value, message) {
        return this._addCheck({
          kind: "endsWith",
          value,
          ...errorUtil.errToObj(message)
        });
      }
      min(minLength, message) {
        return this._addCheck({
          kind: "min",
          value: minLength,
          ...errorUtil.errToObj(message)
        });
      }
      max(maxLength, message) {
        return this._addCheck({
          kind: "max",
          value: maxLength,
          ...errorUtil.errToObj(message)
        });
      }
      length(len, message) {
        return this._addCheck({
          kind: "length",
          value: len,
          ...errorUtil.errToObj(message)
        });
      }
      /**
       * @deprecated Use z.string().min(1) instead.
       * @see {@link ZodString.min}
       */
      nonempty(message) {
        return this.min(1, errorUtil.errToObj(message));
      }
      trim() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "trim" }]
        });
      }
      toLowerCase() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toLowerCase" }]
        });
      }
      toUpperCase() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toUpperCase" }]
        });
      }
      get isDatetime() {
        return !!this._def.checks.find((ch2) => ch2.kind === "datetime");
      }
      get isDate() {
        return !!this._def.checks.find((ch2) => ch2.kind === "date");
      }
      get isTime() {
        return !!this._def.checks.find((ch2) => ch2.kind === "time");
      }
      get isDuration() {
        return !!this._def.checks.find((ch2) => ch2.kind === "duration");
      }
      get isEmail() {
        return !!this._def.checks.find((ch2) => ch2.kind === "email");
      }
      get isURL() {
        return !!this._def.checks.find((ch2) => ch2.kind === "url");
      }
      get isEmoji() {
        return !!this._def.checks.find((ch2) => ch2.kind === "emoji");
      }
      get isUUID() {
        return !!this._def.checks.find((ch2) => ch2.kind === "uuid");
      }
      get isNANOID() {
        return !!this._def.checks.find((ch2) => ch2.kind === "nanoid");
      }
      get isCUID() {
        return !!this._def.checks.find((ch2) => ch2.kind === "cuid");
      }
      get isCUID2() {
        return !!this._def.checks.find((ch2) => ch2.kind === "cuid2");
      }
      get isULID() {
        return !!this._def.checks.find((ch2) => ch2.kind === "ulid");
      }
      get isIP() {
        return !!this._def.checks.find((ch2) => ch2.kind === "ip");
      }
      get isBase64() {
        return !!this._def.checks.find((ch2) => ch2.kind === "base64");
      }
      get minLength() {
        let min2 = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "min") {
            if (min2 === null || ch2.value > min2)
              min2 = ch2.value;
          }
        }
        return min2;
      }
      get maxLength() {
        let max2 = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "max") {
            if (max2 === null || ch2.value < max2)
              max2 = ch2.value;
          }
        }
        return max2;
      }
    }
    ZodString.create = (params) => {
      var _a;
      return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
      });
    };
    function floatSafeRemainder(val, step) {
      const valDecCount = (val.toString().split(".")[1] || "").length;
      const stepDecCount = (step.toString().split(".")[1] || "").length;
      const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
      const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
      const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
      return valInt % stepInt / Math.pow(10, decCount);
    }
    class ZodNumber extends ZodType {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.number,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        let ctx = void 0;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "int") {
            if (!util.isInteger(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: "integer",
                received: "float",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (floatSafeRemainder(input.data, check.value) !== 0) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "finite") {
            if (!Number.isFinite(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_finite,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new ZodNumber({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      int(message) {
        return this._addCheck({
          kind: "int",
          message: errorUtil.toString(message)
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil.toString(message)
        });
      }
      finite(message) {
        return this._addCheck({
          kind: "finite",
          message: errorUtil.toString(message)
        });
      }
      safe(message) {
        return this._addCheck({
          kind: "min",
          inclusive: true,
          value: Number.MIN_SAFE_INTEGER,
          message: errorUtil.toString(message)
        })._addCheck({
          kind: "max",
          inclusive: true,
          value: Number.MAX_SAFE_INTEGER,
          message: errorUtil.toString(message)
        });
      }
      get minValue() {
        let min2 = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "min") {
            if (min2 === null || ch2.value > min2)
              min2 = ch2.value;
          }
        }
        return min2;
      }
      get maxValue() {
        let max2 = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "max") {
            if (max2 === null || ch2.value < max2)
              max2 = ch2.value;
          }
        }
        return max2;
      }
      get isInt() {
        return !!this._def.checks.find((ch2) => ch2.kind === "int" || ch2.kind === "multipleOf" && util.isInteger(ch2.value));
      }
      get isFinite() {
        let max2 = null, min2 = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "finite" || ch2.kind === "int" || ch2.kind === "multipleOf") {
            return true;
          } else if (ch2.kind === "min") {
            if (min2 === null || ch2.value > min2)
              min2 = ch2.value;
          } else if (ch2.kind === "max") {
            if (max2 === null || ch2.value < max2)
              max2 = ch2.value;
          }
        }
        return Number.isFinite(min2) && Number.isFinite(max2);
      }
    }
    ZodNumber.create = (params) => {
      return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
      });
    };
    class ZodBigInt extends ZodType {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = BigInt(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.bigint,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        let ctx = void 0;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                type: "bigint",
                minimum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                type: "bigint",
                maximum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (input.data % check.value !== BigInt(0)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new ZodBigInt({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil.toString(message)
        });
      }
      get minValue() {
        let min2 = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "min") {
            if (min2 === null || ch2.value > min2)
              min2 = ch2.value;
          }
        }
        return min2;
      }
      get maxValue() {
        let max2 = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "max") {
            if (max2 === null || ch2.value < max2)
              max2 = ch2.value;
          }
        }
        return max2;
      }
    }
    ZodBigInt.create = (params) => {
      var _a;
      return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
      });
    };
    class ZodBoolean extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.boolean,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodBoolean.create = (params) => {
      return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
      });
    };
    class ZodDate extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.date,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        if (isNaN(input.data.getTime())) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_date
          });
          return INVALID;
        }
        const status = new ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.getTime() < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                message: check.message,
                inclusive: true,
                exact: false,
                minimum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.getTime() > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                message: check.message,
                inclusive: true,
                exact: false,
                maximum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return {
          status: status.value,
          value: new Date(input.data.getTime())
        };
      }
      _addCheck(check) {
        return new ZodDate({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      min(minDate, message) {
        return this._addCheck({
          kind: "min",
          value: minDate.getTime(),
          message: errorUtil.toString(message)
        });
      }
      max(maxDate, message) {
        return this._addCheck({
          kind: "max",
          value: maxDate.getTime(),
          message: errorUtil.toString(message)
        });
      }
      get minDate() {
        let min2 = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "min") {
            if (min2 === null || ch2.value > min2)
              min2 = ch2.value;
          }
        }
        return min2 != null ? new Date(min2) : null;
      }
      get maxDate() {
        let max2 = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "max") {
            if (max2 === null || ch2.value < max2)
              max2 = ch2.value;
          }
        }
        return max2 != null ? new Date(max2) : null;
      }
    }
    ZodDate.create = (params) => {
      return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params)
      });
    };
    class ZodSymbol extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.symbol) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.symbol,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodSymbol.create = (params) => {
      return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params)
      });
    };
    class ZodUndefined extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.undefined,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodUndefined.create = (params) => {
      return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params)
      });
    };
    class ZodNull extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.null,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodNull.create = (params) => {
      return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params)
      });
    };
    class ZodAny extends ZodType {
      constructor() {
        super(...arguments);
        this._any = true;
      }
      _parse(input) {
        return OK(input.data);
      }
    }
    ZodAny.create = (params) => {
      return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params)
      });
    };
    class ZodUnknown extends ZodType {
      constructor() {
        super(...arguments);
        this._unknown = true;
      }
      _parse(input) {
        return OK(input.data);
      }
    }
    ZodUnknown.create = (params) => {
      return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params)
      });
    };
    class ZodNever extends ZodType {
      _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.never,
          received: ctx.parsedType
        });
        return INVALID;
      }
    }
    ZodNever.create = (params) => {
      return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params)
      });
    };
    class ZodVoid extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.void,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodVoid.create = (params) => {
      return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params)
      });
    };
    class ZodArray extends ZodType {
      _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.array,
            received: ctx.parsedType
          });
          return INVALID;
        }
        if (def.exactLength !== null) {
          const tooBig = ctx.data.length > def.exactLength.value;
          const tooSmall = ctx.data.length < def.exactLength.value;
          if (tooBig || tooSmall) {
            addIssueToContext(ctx, {
              code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
              minimum: tooSmall ? def.exactLength.value : void 0,
              maximum: tooBig ? def.exactLength.value : void 0,
              type: "array",
              inclusive: true,
              exact: true,
              message: def.exactLength.message
            });
            status.dirty();
          }
        }
        if (def.minLength !== null) {
          if (ctx.data.length < def.minLength.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: def.minLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.minLength.message
            });
            status.dirty();
          }
        }
        if (def.maxLength !== null) {
          if (ctx.data.length > def.maxLength.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: def.maxLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.maxLength.message
            });
            status.dirty();
          }
        }
        if (ctx.common.async) {
          return Promise.all([...ctx.data].map((item, i) => {
            return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
          })).then((result2) => {
            return ParseStatus.mergeArray(status, result2);
          });
        }
        const result = [...ctx.data].map((item, i) => {
          return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return ParseStatus.mergeArray(status, result);
      }
      get element() {
        return this._def.type;
      }
      min(minLength, message) {
        return new ZodArray({
          ...this._def,
          minLength: { value: minLength, message: errorUtil.toString(message) }
        });
      }
      max(maxLength, message) {
        return new ZodArray({
          ...this._def,
          maxLength: { value: maxLength, message: errorUtil.toString(message) }
        });
      }
      length(len, message) {
        return new ZodArray({
          ...this._def,
          exactLength: { value: len, message: errorUtil.toString(message) }
        });
      }
      nonempty(message) {
        return this.min(1, message);
      }
    }
    ZodArray.create = (schema, params) => {
      return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params)
      });
    };
    function deepPartialify(schema) {
      if (schema instanceof ZodObject) {
        const newShape = {};
        for (const key in schema.shape) {
          const fieldSchema = schema.shape[key];
          newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
          ...schema._def,
          shape: () => newShape
        });
      } else if (schema instanceof ZodArray) {
        return new ZodArray({
          ...schema._def,
          type: deepPartialify(schema.element)
        });
      } else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
      } else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
      } else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
      } else {
        return schema;
      }
    }
    class ZodObject extends ZodType {
      constructor() {
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = this.extend;
      }
      _getCached() {
        if (this._cached !== null)
          return this._cached;
        const shape = this._def.shape();
        const keys2 = util.objectKeys(shape);
        return this._cached = { shape, keys: keys2 };
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
          for (const key in ctx.data) {
            if (!shapeKeys.includes(key)) {
              extraKeys.push(key);
            }
          }
        }
        const pairs = [];
        for (const key of shapeKeys) {
          const keyValidator = shape[key];
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (this._def.catchall instanceof ZodNever) {
          const unknownKeys = this._def.unknownKeys;
          if (unknownKeys === "passthrough") {
            for (const key of extraKeys) {
              pairs.push({
                key: { status: "valid", value: key },
                value: { status: "valid", value: ctx.data[key] }
              });
            }
          } else if (unknownKeys === "strict") {
            if (extraKeys.length > 0) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.unrecognized_keys,
                keys: extraKeys
              });
              status.dirty();
            }
          } else if (unknownKeys === "strip")
            ;
          else {
            throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
          }
        } else {
          const catchall = this._def.catchall;
          for (const key of extraKeys) {
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: catchall._parse(
                new ParseInputLazyPath(ctx, value, ctx.path, key)
                //, ctx.child(key), value, getParsedType(value)
              ),
              alwaysSet: key in ctx.data
            });
          }
        }
        if (ctx.common.async) {
          return Promise.resolve().then(async () => {
            const syncPairs = [];
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              syncPairs.push({
                key,
                value,
                alwaysSet: pair.alwaysSet
              });
            }
            return syncPairs;
          }).then((syncPairs) => {
            return ParseStatus.mergeObjectSync(status, syncPairs);
          });
        } else {
          return ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get shape() {
        return this._def.shape();
      }
      strict(message) {
        errorUtil.errToObj;
        return new ZodObject({
          ...this._def,
          unknownKeys: "strict",
          ...message !== void 0 ? {
            errorMap: (issue, ctx) => {
              var _a, _b, _c, _d;
              const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
              if (issue.code === "unrecognized_keys")
                return {
                  message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                };
              return {
                message: defaultError
              };
            }
          } : {}
        });
      }
      strip() {
        return new ZodObject({
          ...this._def,
          unknownKeys: "strip"
        });
      }
      passthrough() {
        return new ZodObject({
          ...this._def,
          unknownKeys: "passthrough"
        });
      }
      // const AugmentFactory =
      //   <Def extends ZodObjectDef>(def: Def) =>
      //   <Augmentation extends ZodRawShape>(
      //     augmentation: Augmentation
      //   ): ZodObject<
      //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
      //     Def["unknownKeys"],
      //     Def["catchall"]
      //   > => {
      //     return new ZodObject({
      //       ...def,
      //       shape: () => ({
      //         ...def.shape(),
      //         ...augmentation,
      //       }),
      //     }) as any;
      //   };
      extend(augmentation) {
        return new ZodObject({
          ...this._def,
          shape: () => ({
            ...this._def.shape(),
            ...augmentation
          })
        });
      }
      /**
       * Prior to zod@1.0.12 there was a bug in the
       * inferred type of merged objects. Please
       * upgrade if you are experiencing issues.
       */
      merge(merging) {
        const merged = new ZodObject({
          unknownKeys: merging._def.unknownKeys,
          catchall: merging._def.catchall,
          shape: () => ({
            ...this._def.shape(),
            ...merging._def.shape()
          }),
          typeName: ZodFirstPartyTypeKind.ZodObject
        });
        return merged;
      }
      // merge<
      //   Incoming extends AnyZodObject,
      //   Augmentation extends Incoming["shape"],
      //   NewOutput extends {
      //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
      //       ? Augmentation[k]["_output"]
      //       : k extends keyof Output
      //       ? Output[k]
      //       : never;
      //   },
      //   NewInput extends {
      //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
      //       ? Augmentation[k]["_input"]
      //       : k extends keyof Input
      //       ? Input[k]
      //       : never;
      //   }
      // >(
      //   merging: Incoming
      // ): ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"],
      //   NewOutput,
      //   NewInput
      // > {
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      setKey(key, schema) {
        return this.augment({ [key]: schema });
      }
      // merge<Incoming extends AnyZodObject>(
      //   merging: Incoming
      // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
      // ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"]
      // > {
      //   // const mergedShape = objectUtil.mergeShapes(
      //   //   this._def.shape(),
      //   //   merging._def.shape()
      //   // );
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      catchall(index) {
        return new ZodObject({
          ...this._def,
          catchall: index
        });
      }
      pick(mask) {
        const shape = {};
        util.objectKeys(mask).forEach((key) => {
          if (mask[key] && this.shape[key]) {
            shape[key] = this.shape[key];
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      omit(mask) {
        const shape = {};
        util.objectKeys(this.shape).forEach((key) => {
          if (!mask[key]) {
            shape[key] = this.shape[key];
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      /**
       * @deprecated
       */
      deepPartial() {
        return deepPartialify(this);
      }
      partial(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
          const fieldSchema = this.shape[key];
          if (mask && !mask[key]) {
            newShape[key] = fieldSchema;
          } else {
            newShape[key] = fieldSchema.optional();
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      required(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
          if (mask && !mask[key]) {
            newShape[key] = this.shape[key];
          } else {
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while (newField instanceof ZodOptional) {
              newField = newField._def.innerType;
            }
            newShape[key] = newField;
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      keyof() {
        return createZodEnum(util.objectKeys(this.shape));
      }
    }
    ZodObject.create = (shape, params) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.strictCreate = (shape, params) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.lazycreate = (shape, params) => {
      return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    class ZodUnion extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
          for (const result of results) {
            if (result.result.status === "valid") {
              return result.result;
            }
          }
          for (const result of results) {
            if (result.result.status === "dirty") {
              ctx.common.issues.push(...result.ctx.common.issues);
              return result.result;
            }
          }
          const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union,
            unionErrors
          });
          return INVALID;
        }
        if (ctx.common.async) {
          return Promise.all(options.map(async (option) => {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            return {
              result: await option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              }),
              ctx: childCtx
            };
          })).then(handleResults);
        } else {
          let dirty = void 0;
          const issues = [];
          for (const option of options) {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            const result = option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            });
            if (result.status === "valid") {
              return result;
            } else if (result.status === "dirty" && !dirty) {
              dirty = { result, ctx: childCtx };
            }
            if (childCtx.common.issues.length) {
              issues.push(childCtx.common.issues);
            }
          }
          if (dirty) {
            ctx.common.issues.push(...dirty.ctx.common.issues);
            return dirty.result;
          }
          const unionErrors = issues.map((issues2) => new ZodError(issues2));
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union,
            unionErrors
          });
          return INVALID;
        }
      }
      get options() {
        return this._def.options;
      }
    }
    ZodUnion.create = (types, params) => {
      return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params)
      });
    };
    const getDiscriminator = (type) => {
      if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
      } else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
      } else if (type instanceof ZodLiteral) {
        return [type.value];
      } else if (type instanceof ZodEnum) {
        return type.options;
      } else if (type instanceof ZodNativeEnum) {
        return util.objectValues(type.enum);
      } else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
      } else if (type instanceof ZodUndefined) {
        return [void 0];
      } else if (type instanceof ZodNull) {
        return [null];
      } else if (type instanceof ZodOptional) {
        return [void 0, ...getDiscriminator(type.unwrap())];
      } else if (type instanceof ZodNullable) {
        return [null, ...getDiscriminator(type.unwrap())];
      } else if (type instanceof ZodBranded) {
        return getDiscriminator(type.unwrap());
      } else if (type instanceof ZodReadonly) {
        return getDiscriminator(type.unwrap());
      } else if (type instanceof ZodCatch) {
        return getDiscriminator(type._def.innerType);
      } else {
        return [];
      }
    };
    class ZodDiscriminatedUnion extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union_discriminator,
            options: Array.from(this.optionsMap.keys()),
            path: [discriminator]
          });
          return INVALID;
        }
        if (ctx.common.async) {
          return option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        } else {
          return option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        }
      }
      get discriminator() {
        return this._def.discriminator;
      }
      get options() {
        return this._def.options;
      }
      get optionsMap() {
        return this._def.optionsMap;
      }
      /**
       * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
       * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
       * have a different value for each object in the union.
       * @param discriminator the name of the discriminator property
       * @param types an array of object schemas
       * @param params
       */
      static create(discriminator, options, params) {
        const optionsMap = /* @__PURE__ */ new Map();
        for (const type of options) {
          const discriminatorValues = getDiscriminator(type.shape[discriminator]);
          if (!discriminatorValues.length) {
            throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
          }
          for (const value of discriminatorValues) {
            if (optionsMap.has(value)) {
              throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
            }
            optionsMap.set(value, type);
          }
        }
        return new ZodDiscriminatedUnion({
          typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
          discriminator,
          options,
          optionsMap,
          ...processCreateParams(params)
        });
      }
    }
    function mergeValues(a, b2) {
      const aType = getParsedType(a);
      const bType = getParsedType(b2);
      if (a === b2) {
        return { valid: true, data: a };
      } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
        const bKeys = util.objectKeys(b2);
        const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a, ...b2 };
        for (const key of sharedKeys) {
          const sharedValue = mergeValues(a[key], b2[key]);
          if (!sharedValue.valid) {
            return { valid: false };
          }
          newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
      } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
        if (a.length !== b2.length) {
          return { valid: false };
        }
        const newArray = [];
        for (let index = 0; index < a.length; index++) {
          const itemA = a[index];
          const itemB = b2[index];
          const sharedValue = mergeValues(itemA, itemB);
          if (!sharedValue.valid) {
            return { valid: false };
          }
          newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
      } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b2) {
        return { valid: true, data: a };
      } else {
        return { valid: false };
      }
    }
    class ZodIntersection extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
          if (isAborted(parsedLeft) || isAborted(parsedRight)) {
            return INVALID;
          }
          const merged = mergeValues(parsedLeft.value, parsedRight.value);
          if (!merged.valid) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_intersection_types
            });
            return INVALID;
          }
          if (isDirty(parsedLeft) || isDirty(parsedRight)) {
            status.dirty();
          }
          return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
          return Promise.all([
            this._def.left._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }),
            this._def.right._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
          ]).then(([left, right]) => handleParsed(left, right));
        } else {
          return handleParsed(this._def.left._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }), this._def.right._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }));
        }
      }
    }
    ZodIntersection.create = (left, right, params) => {
      return new ZodIntersection({
        left,
        right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params)
      });
    };
    class ZodTuple extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.array,
            received: ctx.parsedType
          });
          return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          status.dirty();
        }
        const items = [...ctx.data].map((item, itemIndex) => {
          const schema = this._def.items[itemIndex] || this._def.rest;
          if (!schema)
            return null;
          return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        }).filter((x2) => !!x2);
        if (ctx.common.async) {
          return Promise.all(items).then((results) => {
            return ParseStatus.mergeArray(status, results);
          });
        } else {
          return ParseStatus.mergeArray(status, items);
        }
      }
      get items() {
        return this._def.items;
      }
      rest(rest) {
        return new ZodTuple({
          ...this._def,
          rest
        });
      }
    }
    ZodTuple.create = (schemas, params) => {
      if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
      }
      return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params)
      });
    };
    class ZodRecord extends ZodType {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
          pairs.push({
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
            value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (ctx.common.async) {
          return ParseStatus.mergeObjectAsync(status, pairs);
        } else {
          return ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get element() {
        return this._def.valueType;
      }
      static create(first, second, third) {
        if (second instanceof ZodType) {
          return new ZodRecord({
            keyType: first,
            valueType: second,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(third)
          });
        }
        return new ZodRecord({
          keyType: ZodString.create(),
          valueType: first,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(second)
        });
      }
    }
    class ZodMap extends ZodType {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.map,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
          return {
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
            value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
          };
        });
        if (ctx.common.async) {
          const finalMap = /* @__PURE__ */ new Map();
          return Promise.resolve().then(async () => {
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return INVALID;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          });
        } else {
          const finalMap = /* @__PURE__ */ new Map();
          for (const pair of pairs) {
            const key = pair.key;
            const value = pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        }
      }
    }
    ZodMap.create = (keyType, valueType, params) => {
      return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params)
      });
    };
    class ZodSet extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.set,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
          if (ctx.data.size < def.minSize.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: def.minSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.minSize.message
            });
            status.dirty();
          }
        }
        if (def.maxSize !== null) {
          if (ctx.data.size > def.maxSize.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: def.maxSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.maxSize.message
            });
            status.dirty();
          }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements3) {
          const parsedSet = /* @__PURE__ */ new Set();
          for (const element of elements3) {
            if (element.status === "aborted")
              return INVALID;
            if (element.status === "dirty")
              status.dirty();
            parsedSet.add(element.value);
          }
          return { status: status.value, value: parsedSet };
        }
        const elements2 = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
          return Promise.all(elements2).then((elements3) => finalizeSet(elements3));
        } else {
          return finalizeSet(elements2);
        }
      }
      min(minSize, message) {
        return new ZodSet({
          ...this._def,
          minSize: { value: minSize, message: errorUtil.toString(message) }
        });
      }
      max(maxSize, message) {
        return new ZodSet({
          ...this._def,
          maxSize: { value: maxSize, message: errorUtil.toString(message) }
        });
      }
      size(size, message) {
        return this.min(size, message).max(size, message);
      }
      nonempty(message) {
        return this.min(1, message);
      }
    }
    ZodSet.create = (valueType, params) => {
      return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params)
      });
    };
    class ZodFunction extends ZodType {
      constructor() {
        super(...arguments);
        this.validate = this.implement;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.function,
            received: ctx.parsedType
          });
          return INVALID;
        }
        function makeArgsIssue(args, error) {
          return makeIssue({
            data: args,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              getErrorMap(),
              errorMap
            ].filter((x2) => !!x2),
            issueData: {
              code: ZodIssueCode.invalid_arguments,
              argumentsError: error
            }
          });
        }
        function makeReturnsIssue(returns, error) {
          return makeIssue({
            data: returns,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              getErrorMap(),
              errorMap
            ].filter((x2) => !!x2),
            issueData: {
              code: ZodIssueCode.invalid_return_type,
              returnTypeError: error
            }
          });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
          const me2 = this;
          return OK(async function(...args) {
            const error = new ZodError([]);
            const parsedArgs = await me2._def.args.parseAsync(args, params).catch((e2) => {
              error.addIssue(makeArgsIssue(args, e2));
              throw error;
            });
            const result = await Reflect.apply(fn, this, parsedArgs);
            const parsedReturns = await me2._def.returns._def.type.parseAsync(result, params).catch((e2) => {
              error.addIssue(makeReturnsIssue(result, e2));
              throw error;
            });
            return parsedReturns;
          });
        } else {
          const me2 = this;
          return OK(function(...args) {
            const parsedArgs = me2._def.args.safeParse(args, params);
            if (!parsedArgs.success) {
              throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
            }
            const result = Reflect.apply(fn, this, parsedArgs.data);
            const parsedReturns = me2._def.returns.safeParse(result, params);
            if (!parsedReturns.success) {
              throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
            }
            return parsedReturns.data;
          });
        }
      }
      parameters() {
        return this._def.args;
      }
      returnType() {
        return this._def.returns;
      }
      args(...items) {
        return new ZodFunction({
          ...this._def,
          args: ZodTuple.create(items).rest(ZodUnknown.create())
        });
      }
      returns(returnType) {
        return new ZodFunction({
          ...this._def,
          returns: returnType
        });
      }
      implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      static create(args, returns, params) {
        return new ZodFunction({
          args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
          returns: returns || ZodUnknown.create(),
          typeName: ZodFirstPartyTypeKind.ZodFunction,
          ...processCreateParams(params)
        });
      }
    }
    class ZodLazy extends ZodType {
      get schema() {
        return this._def.getter();
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
      }
    }
    ZodLazy.create = (getter, params) => {
      return new ZodLazy({
        getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params)
      });
    };
    class ZodLiteral extends ZodType {
      _parse(input) {
        if (input.data !== this._def.value) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_literal,
            expected: this._def.value
          });
          return INVALID;
        }
        return { status: "valid", value: input.data };
      }
      get value() {
        return this._def.value;
      }
    }
    ZodLiteral.create = (value, params) => {
      return new ZodLiteral({
        value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params)
      });
    };
    function createZodEnum(values, params) {
      return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params)
      });
    }
    class ZodEnum extends ZodType {
      constructor() {
        super(...arguments);
        _ZodEnum_cache.set(this, void 0);
      }
      _parse(input) {
        if (typeof input.data !== "string") {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          addIssueToContext(ctx, {
            expected: util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodIssueCode.invalid_type
          });
          return INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
          __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return INVALID;
        }
        return OK(input.data);
      }
      get options() {
        return this._def.values;
      }
      get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      extract(values, newDef = this._def) {
        return ZodEnum.create(values, {
          ...this._def,
          ...newDef
        });
      }
      exclude(values, newDef = this._def) {
        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
          ...this._def,
          ...newDef
        });
      }
    }
    _ZodEnum_cache = /* @__PURE__ */ new WeakMap();
    ZodEnum.create = createZodEnum;
    class ZodNativeEnum extends ZodType {
      constructor() {
        super(...arguments);
        _ZodNativeEnum_cache.set(this, void 0);
      }
      _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
          const expectedValues = util.objectValues(nativeEnumValues);
          addIssueToContext(ctx, {
            expected: util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodIssueCode.invalid_type
          });
          return INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
          __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), "f");
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
          const expectedValues = util.objectValues(nativeEnumValues);
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return INVALID;
        }
        return OK(input.data);
      }
      get enum() {
        return this._def.values;
      }
    }
    _ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
    ZodNativeEnum.create = (values, params) => {
      return new ZodNativeEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params)
      });
    };
    class ZodPromise extends ZodType {
      unwrap() {
        return this._def.type;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.promise,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return OK(promisified.then((data) => {
          return this._def.type.parseAsync(data, {
            path: ctx.path,
            errorMap: ctx.common.contextualErrorMap
          });
        }));
      }
    }
    ZodPromise.create = (schema, params) => {
      return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params)
      });
    };
    class ZodEffects extends ZodType {
      innerType() {
        return this._def.schema;
      }
      sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
          addIssue: (arg) => {
            addIssueToContext(ctx, arg);
            if (arg.fatal) {
              status.abort();
            } else {
              status.dirty();
            }
          },
          get path() {
            return ctx.path;
          }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
          const processed = effect.transform(ctx.data, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(processed).then(async (processed2) => {
              if (status.value === "aborted")
                return INVALID;
              const result = await this._def.schema._parseAsync({
                data: processed2,
                path: ctx.path,
                parent: ctx
              });
              if (result.status === "aborted")
                return INVALID;
              if (result.status === "dirty")
                return DIRTY(result.value);
              if (status.value === "dirty")
                return DIRTY(result.value);
              return result;
            });
          } else {
            if (status.value === "aborted")
              return INVALID;
            const result = this._def.schema._parseSync({
              data: processed,
              path: ctx.path,
              parent: ctx
            });
            if (result.status === "aborted")
              return INVALID;
            if (result.status === "dirty")
              return DIRTY(result.value);
            if (status.value === "dirty")
              return DIRTY(result.value);
            return result;
          }
        }
        if (effect.type === "refinement") {
          const executeRefinement = (acc) => {
            const result = effect.refinement(acc, checkCtx);
            if (ctx.common.async) {
              return Promise.resolve(result);
            }
            if (result instanceof Promise) {
              throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
            }
            return acc;
          };
          if (ctx.common.async === false) {
            const inner = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inner.status === "aborted")
              return INVALID;
            if (inner.status === "dirty")
              status.dirty();
            executeRefinement(inner.value);
            return { status: status.value, value: inner.value };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
              if (inner.status === "aborted")
                return INVALID;
              if (inner.status === "dirty")
                status.dirty();
              return executeRefinement(inner.value).then(() => {
                return { status: status.value, value: inner.value };
              });
            });
          }
        }
        if (effect.type === "transform") {
          if (ctx.common.async === false) {
            const base = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (!isValid(base))
              return base;
            const result = effect.transform(base.value, checkCtx);
            if (result instanceof Promise) {
              throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
            }
            return { status: status.value, value: result };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
              if (!isValid(base))
                return base;
              return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
            });
          }
        }
        util.assertNever(effect);
      }
    }
    ZodEffects.create = (schema, effect, params) => {
      return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params)
      });
    };
    ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
      return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params)
      });
    };
    class ZodOptional extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) {
          return OK(void 0);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    }
    ZodOptional.create = (type, params) => {
      return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params)
      });
    };
    class ZodNullable extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) {
          return OK(null);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    }
    ZodNullable.create = (type, params) => {
      return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params)
      });
    };
    class ZodDefault extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) {
          data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      removeDefault() {
        return this._def.innerType;
      }
    }
    ZodDefault.create = (type, params) => {
      return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function" ? params.default : () => params.default,
        ...processCreateParams(params)
      });
    };
    class ZodCatch extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const newCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          }
        };
        const result = this._def.innerType._parse({
          data: newCtx.data,
          path: newCtx.path,
          parent: {
            ...newCtx
          }
        });
        if (isAsync(result)) {
          return result.then((result2) => {
            return {
              status: "valid",
              value: result2.status === "valid" ? result2.value : this._def.catchValue({
                get error() {
                  return new ZodError(newCtx.common.issues);
                },
                input: newCtx.data
              })
            };
          });
        } else {
          return {
            status: "valid",
            value: result.status === "valid" ? result.value : this._def.catchValue({
              get error() {
                return new ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        }
      }
      removeCatch() {
        return this._def.innerType;
      }
    }
    ZodCatch.create = (type, params) => {
      return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams(params)
      });
    };
    class ZodNaN extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.nan,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return { status: "valid", value: input.data };
      }
    }
    ZodNaN.create = (params) => {
      return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params)
      });
    };
    const BRAND = Symbol("zod_brand");
    class ZodBranded extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      unwrap() {
        return this._def.type;
      }
    }
    class ZodPipeline extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
          const handleAsync = async () => {
            const inResult = await this._def.in._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inResult.status === "aborted")
              return INVALID;
            if (inResult.status === "dirty") {
              status.dirty();
              return DIRTY(inResult.value);
            } else {
              return this._def.out._parseAsync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              });
            }
          };
          return handleAsync();
        } else {
          const inResult = this._def.in._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return {
              status: "dirty",
              value: inResult.value
            };
          } else {
            return this._def.out._parseSync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        }
      }
      static create(a, b2) {
        return new ZodPipeline({
          in: a,
          out: b2,
          typeName: ZodFirstPartyTypeKind.ZodPipeline
        });
      }
    }
    class ZodReadonly extends ZodType {
      _parse(input) {
        const result = this._def.innerType._parse(input);
        const freeze = (data) => {
          if (isValid(data)) {
            data.value = Object.freeze(data.value);
          }
          return data;
        };
        return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
      }
      unwrap() {
        return this._def.innerType;
      }
    }
    ZodReadonly.create = (type, params) => {
      return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params)
      });
    };
    function custom(check, params = {}, fatal) {
      if (check)
        return ZodAny.create().superRefine((data, ctx) => {
          var _a, _b;
          if (!check(data)) {
            const p2 = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
            const _fatal = (_b = (_a = p2.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
            const p22 = typeof p2 === "string" ? { message: p2 } : p2;
            ctx.addIssue({ code: "custom", ...p22, fatal: _fatal });
          }
        });
      return ZodAny.create();
    }
    const late = {
      object: ZodObject.lazycreate
    };
    var ZodFirstPartyTypeKind;
    (function(ZodFirstPartyTypeKind2) {
      ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
      ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
      ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
      ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
      ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
      ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
      ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
      ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
      ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
      ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
      ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
      ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
      ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
      ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
      ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
      ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
      ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
      ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
      ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
      ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
      ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
      ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
      ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
      ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
      ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
      ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
      ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
      ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
      ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
      ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
      ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
      ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
      ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
      ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
      ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
      ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
    })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
    const instanceOfType = (cls, params = {
      message: `Input not instance of ${cls.name}`
    }) => custom((data) => data instanceof cls, params);
    const stringType = ZodString.create;
    const numberType = ZodNumber.create;
    const nanType = ZodNaN.create;
    const bigIntType = ZodBigInt.create;
    const booleanType = ZodBoolean.create;
    const dateType = ZodDate.create;
    const symbolType = ZodSymbol.create;
    const undefinedType = ZodUndefined.create;
    const nullType = ZodNull.create;
    const anyType = ZodAny.create;
    const unknownType = ZodUnknown.create;
    const neverType = ZodNever.create;
    const voidType = ZodVoid.create;
    const arrayType = ZodArray.create;
    const objectType = ZodObject.create;
    const strictObjectType = ZodObject.strictCreate;
    const unionType = ZodUnion.create;
    const discriminatedUnionType = ZodDiscriminatedUnion.create;
    const intersectionType = ZodIntersection.create;
    const tupleType = ZodTuple.create;
    const recordType = ZodRecord.create;
    const mapType = ZodMap.create;
    const setType = ZodSet.create;
    const functionType = ZodFunction.create;
    const lazyType = ZodLazy.create;
    const literalType = ZodLiteral.create;
    const enumType = ZodEnum.create;
    const nativeEnumType = ZodNativeEnum.create;
    const promiseType = ZodPromise.create;
    const effectsType = ZodEffects.create;
    const optionalType = ZodOptional.create;
    const nullableType = ZodNullable.create;
    const preprocessType = ZodEffects.createWithPreprocess;
    const pipelineType = ZodPipeline.create;
    const ostring = () => stringType().optional();
    const onumber = () => numberType().optional();
    const oboolean = () => booleanType().optional();
    const coerce = {
      string: (arg) => ZodString.create({ ...arg, coerce: true }),
      number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
      boolean: (arg) => ZodBoolean.create({
        ...arg,
        coerce: true
      }),
      bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
      date: (arg) => ZodDate.create({ ...arg, coerce: true })
    };
    const NEVER = INVALID;
    var z = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      defaultErrorMap: errorMap,
      setErrorMap,
      getErrorMap,
      makeIssue,
      EMPTY_PATH,
      addIssueToContext,
      ParseStatus,
      INVALID,
      DIRTY,
      OK,
      isAborted,
      isDirty,
      isValid,
      isAsync,
      get util() {
        return util;
      },
      get objectUtil() {
        return objectUtil;
      },
      ZodParsedType,
      getParsedType,
      ZodType,
      datetimeRegex,
      ZodString,
      ZodNumber,
      ZodBigInt,
      ZodBoolean,
      ZodDate,
      ZodSymbol,
      ZodUndefined,
      ZodNull,
      ZodAny,
      ZodUnknown,
      ZodNever,
      ZodVoid,
      ZodArray,
      ZodObject,
      ZodUnion,
      ZodDiscriminatedUnion,
      ZodIntersection,
      ZodTuple,
      ZodRecord,
      ZodMap,
      ZodSet,
      ZodFunction,
      ZodLazy,
      ZodLiteral,
      ZodEnum,
      ZodNativeEnum,
      ZodPromise,
      ZodEffects,
      ZodTransformer: ZodEffects,
      ZodOptional,
      ZodNullable,
      ZodDefault,
      ZodCatch,
      ZodNaN,
      BRAND,
      ZodBranded,
      ZodPipeline,
      ZodReadonly,
      custom,
      Schema: ZodType,
      ZodSchema: ZodType,
      late,
      get ZodFirstPartyTypeKind() {
        return ZodFirstPartyTypeKind;
      },
      coerce,
      any: anyType,
      array: arrayType,
      bigint: bigIntType,
      boolean: booleanType,
      date: dateType,
      discriminatedUnion: discriminatedUnionType,
      effect: effectsType,
      "enum": enumType,
      "function": functionType,
      "instanceof": instanceOfType,
      intersection: intersectionType,
      lazy: lazyType,
      literal: literalType,
      map: mapType,
      nan: nanType,
      nativeEnum: nativeEnumType,
      never: neverType,
      "null": nullType,
      nullable: nullableType,
      number: numberType,
      object: objectType,
      oboolean,
      onumber,
      optional: optionalType,
      ostring,
      pipeline: pipelineType,
      preprocess: preprocessType,
      promise: promiseType,
      record: recordType,
      set: setType,
      strictObject: strictObjectType,
      string: stringType,
      symbol: symbolType,
      transformer: effectsType,
      tuple: tupleType,
      "undefined": undefinedType,
      union: unionType,
      unknown: unknownType,
      "void": voidType,
      NEVER,
      ZodIssueCode,
      quotelessJson,
      ZodError
    });
    const MAX_EMAIL_LENGTH = 56;
    const MAX_FROM_AND_TO_LENGTH = 32;
    const validationSchema = z.object({
      email: z.string().email(t$1("INVITE_FRIEND_MODAL.EMAIL_VALIDATION_ERROR")).min(1).max(MAX_EMAIL_LENGTH),
      from: z.string().regex(/^[\sA-Za-z]+$/, t$1("INVITE_FRIEND_MODAL.NAME_VALIDATION_ERROR")).max(MAX_FROM_AND_TO_LENGTH).optional(),
      to: z.string().regex(/^[\sA-Za-z]+$/, t$1("INVITE_FRIEND_MODAL.NAME_VALIDATION_ERROR")).max(MAX_FROM_AND_TO_LENGTH).optional()
    });
    const hasCurrentTargetValue = (event) => isDefined(event.currentTarget) && "value" in event.currentTarget && isString$2(event.currentTarget.value);
    const InviteFriendModal = ({ isOpen, onClose }) => {
      const formik = useFormik({
        initialValues: {
          email: "",
          from: "",
          to: ""
        },
        validationSchema: toFormikValidationSchema_1(validationSchema),
        onSubmit: async (values, { setSubmitting, setFieldError, resetForm }) => {
          try {
            const [senderFirstName, senderLastName] = values.from.split(" ");
            const [reciverFirstName, reciverLastName] = values.to.split(" ");
            vscode.postMessage({
              type: "inviteFriend",
              payload: {
                email: values.email,
                senderFirstName,
                senderLastName,
                reciverFirstName,
                reciverLastName
              }
            });
            onClose();
            resetForm();
          } catch {
            setFieldError("email", t$1("INVITE_FRIEND_MODAL.EMAIL_VALIDATION_ERROR"));
          } finally {
            setSubmitting(false);
          }
        }
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Modal, { isOpen, onClose, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: formik.handleSubmit, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-500 text-base", children: t$1("INVITE_FRIEND_MODAL.MODAL_TITLE") }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-wrap justify-between gap-2 max-w-sm mt-2 mb-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full relative", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-400", children: t$1("INVITE_FRIEND_MODAL.EMAIL_LABEL") }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              VSCodeTextField,
              {
                className: "w-full min-w-44",
                type: "email",
                placeholder: t$1("INVITE_FRIEND_MODAL.EMAIL_PLACEHOLDER"),
                value: formik.values.email,
                onInput: (event) => {
                  if (hasCurrentTargetValue(event)) {
                    formik.setFieldValue("email", event.currentTarget.value.slice(0, MAX_EMAIL_LENGTH));
                  }
                },
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { slot: "start", className: "codicon codicon-mail" })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "label",
              {
                className: "absolute right-1 text-red-500 font-bold",
                title: t$1("INVITE_FRIEND_MODAL.REQUIRED"),
                children: "*"
              }
            ),
            isDefined(formik.errors.email) && /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-red-500 block mt-1", children: t$1(formik.errors.email) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-400", children: t$1("INVITE_FRIEND_MODAL.FROM_LABEL") }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              VSCodeTextField,
              {
                className: "w-full min-w-44",
                type: "text",
                placeholder: t$1("INVITE_FRIEND_MODAL.FROM_PLACEHOLDER"),
                value: formik.values.from,
                onInput: (event) => {
                  if (hasCurrentTargetValue(event)) {
                    formik.setFieldValue("from", event.currentTarget.value.slice(0, MAX_FROM_AND_TO_LENGTH));
                  }
                },
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { slot: "start", className: "codicon codicon-feedback" })
              }
            ),
            isDefined(formik.errors.from) && /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-red-500 block mt-1", children: t$1(formik.errors.from) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-gray-400", children: t$1("INVITE_FRIEND_MODAL.TO_LABEL") }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              VSCodeTextField,
              {
                className: "w-full min-w-44",
                type: "text",
                placeholder: t$1("INVITE_FRIEND_MODAL.TO_PLACEHOLDER"),
                value: formik.values.to,
                onInput: (event) => {
                  if (hasCurrentTargetValue(event)) {
                    formik.setFieldValue("to", event.currentTarget.value.slice(0, MAX_FROM_AND_TO_LENGTH));
                  }
                },
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { slot: "start", className: "codicon codicon-account" })
              }
            ),
            isDefined(formik.errors.to) && /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-red-500 block mt-1", children: t$1(formik.errors.to) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodeButton, { className: "min-w-fit h-[26px] mt-3", onClick: () => formik.handleSubmit(), children: t$1("INVITE_FRIEND_MODAL.SEND_BUTTON") })
        ] })
      ] }) });
    };
    function BurgerMenuItem({ title, icon: Icon2, onClick }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "my-2 first:mt-0 last:mb-0 rounded", onClick: () => onClick(), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "flex items-center text-sm text-gray-400 hover:text-gray-600 cursor-pointer", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Icon2, { className: "h-4 w-4 mr-3" }),
        title
      ] }) });
    }
    function BurgerMenu({ isActive, onClose }) {
      const popupReference = reactExports.useRef(null);
      const [isInviteFriendModalOpen, setIsInviteFriendModalOpen] = reactExports.useState(false);
      const handleOutsideClick = (event) => {
        if (!isActive || isDefined(popupReference.current) && popupReference.current.contains(event.target)) {
          return;
        }
        onClose();
      };
      reactExports.useEffect(() => {
        document.addEventListener("mousedown", handleOutsideClick);
        return () => {
          document.removeEventListener("mousedown", handleOutsideClick);
        };
      }, [isActive]);
      const onHomepageClick = () => {
        vscode.postMessage({ type: "openExternalUrl", payload: { url: "https://www.startearly.ai?fromide=true" } });
        vscode.postMessage({
          type: "trackEvent",
          payload: {
            eventName: "BurgerMenu_Selected",
            properties: { target: "Homepage" }
          }
        });
        onClose();
      };
      const onGettingStartedClick = () => {
        vscode.postMessage({
          type: "openExternalUrl",
          payload: { url: "https://www.startearly.ai/docs/getting-started?fromide=true" }
        });
        vscode.postMessage({
          type: "trackEvent",
          payload: {
            eventName: "BurgerMenu_Selected",
            properties: { target: "GettingStarted" }
          }
        });
        onClose();
      };
      const onSetupConfigClick = () => {
        vscode.postMessage({
          type: "openExternalUrl",
          payload: { url: "https://www.startearly.ai/docs/setup-and-configuration-guide?fromide=true" }
        });
        vscode.postMessage({
          type: "trackEvent",
          payload: {
            eventName: "BurgerMenu_Selected",
            properties: { target: "ConfigSetup" }
          }
        });
        onClose();
      };
      const onInviteFriend = () => {
        setIsInviteFriendModalOpen(true);
        vscode.postMessage({
          type: "trackEvent",
          payload: {
            eventName: "BurgerMenu_Selected",
            properties: { target: "InviteFriend" }
          }
        });
        onClose();
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        isActive && /* @__PURE__ */ jsxRuntimeExports.jsx(Popup, { ref: popupReference, children: /* @__PURE__ */ jsxRuntimeExports.jsx("menu", { className: "w-40", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(BurgerMenuItem, { title: t$1("BURGER_MENU.HOMEPAGE"), icon: House, onClick: onHomepageClick }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            BurgerMenuItem,
            {
              title: t$1("BURGER_MENU.GETTING_STARTED"),
              icon: FileCode2,
              onClick: onGettingStartedClick
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(BurgerMenuItem, { title: t$1("BURGER_MENU.SETUP_CONFIG"), icon: FileCog, onClick: onSetupConfigClick }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(BurgerMenuItem, { title: t$1("BURGER_MENU.INVITE_FRIEND"), icon: UserRoundPlus, onClick: onInviteFriend })
        ] }) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(InviteFriendModal, { isOpen: isInviteFriendModalOpen, onClose: () => setIsInviteFriendModalOpen(false) })
      ] });
    }
    function MenuButton({ children: children2, isActive = false, onClick }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          className: cn(
            "h-7 w-7 px-1.5 py-1 hover:text-gray-600",
            isActive ? "mt-0.5 pt-0.5 border-b-2 border-button-blue rounded-t bg-gray-100 text-gray-400" : "text-gray-300"
          ),
          onClick: () => onClick(),
          children: children2
        }
      );
    }
    function PanelMenu({ activeMenu, onChange }) {
      const [isBurgerMenuActive, setBurgerMenuState] = reactExports.useState(false);
      const onClick = (value) => {
        if (activeMenu !== value) {
          onChange(value);
        }
      };
      const onBurgerMenuClick = () => {
        setBurgerMenuState((isChecked) => !isChecked);
        vscode.postMessage({
          type: "trackEvent",
          payload: { eventName: "BurgerMenu_Opened" }
        });
      };
      const onBurgerMenuClose = () => {
        setBurgerMenuState(false);
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("nav", { className: "absolute right-0 h-7 mt-1 px-2 flex bg-[var(--vscode-sideBar-background)] z-[1]", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(MenuButton, { isActive: activeMenu === MENU.CODE_TREE, onClick: () => onClick(MENU.CODE_TREE), children: /* @__PURE__ */ jsxRuntimeExports.jsx(EarlyLogoIcon, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(MenuButton, { isActive: activeMenu === MENU.SETTINGS, onClick: () => onClick(MENU.SETTINGS), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Settings, { className: "h-4 w-4" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-px h-5 mx-1 my-1 bg-[var(--vscode-sideBarSectionHeader-border)]" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(MenuButton, { onClick: onBurgerMenuClick, children: [
          isBurgerMenuActive ? /* @__PURE__ */ jsxRuntimeExports.jsx(X, { className: "h-4 w-4" }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Menu, { className: "h-4 w-4" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(BurgerMenu, { isActive: isBurgerMenuActive, onClose: onBurgerMenuClose })
        ] })
      ] });
    }
    function SettingsCheckbox({ title, description, label, isChecked, onChange }) {
      const toggleChecked = (event) => {
        const target = event.target;
        onChange(target.checked);
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-3 hover:bg-gray-50", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block mb-1 text-gray-500 text-sm font-bold", children: title }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block mb-2 text-gray-300 text-xs", children: description }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodeCheckbox, { onChange: toggleChecked, checked: isChecked, children: label })
      ] });
    }
    function SettingsDropdown({ title, value, options, onChange }) {
      const handleChange = (event) => {
        const target = event.target;
        onChange(target == null ? void 0 : target.value);
      };
      const { isDeprecated: isDeprecatedValue = false, description } = options.find(({ value: v2 }) => v2 === value) || options[0];
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-3 hover:bg-gray-50", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block mb-1 text-gray-500 text-sm font-bold", children: title }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "block mb-2 text-gray-300 text-xs", children: description }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          VSCodeDropdown,
          {
            value,
            className: cn("w-80 max-w-full", isDeprecatedValue ? "text-gray-200" : ""),
            onChange: handleChange,
            children: options.map(({ value: v2, label, isDeprecated = false }) => /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodeOption, { value: v2, className: cn("px-1.5 py-1", isDeprecated ? "hidden" : ""), children: label }, v2))
          }
        )
      ] });
    }
    function SettingsMenu() {
      const { earlyConfig, shouldShowOnboardingPage } = useAppStateContext();
      reactExports.useEffect(() => {
        vscode.postMessage({ type: "getEarlyConfig" });
        vscode.postMessage({ type: "getShouldShowOnboardingPage" });
      }, []);
      const onTestingFrameworkChange = (value) => {
        vscode.postMessage({
          type: "setTestFramework",
          payload: {
            testFramework: value
          }
        });
        vscode.postMessage({
          type: "trackEvent",
          payload: {
            eventName: "Settings_Change",
            properties: { target: "testFramework", value }
          }
        });
      };
      const onTestSuffixChange = (value) => {
        vscode.postMessage({
          type: "setTestSuffix",
          payload: {
            testSuffix: value
          }
        });
        vscode.postMessage({
          type: "trackEvent",
          payload: {
            eventName: "Settings_Change",
            properties: { target: "testSuffix", value }
          }
        });
      };
      const onTestStructureVariantChange = (value) => {
        vscode.postMessage({
          type: "setTestStructureVariant",
          payload: {
            testStructureVariant: value
          }
        });
        vscode.postMessage({
          type: "trackEvent",
          payload: {
            eventName: "Settings_Change",
            properties: { target: "testStructureVariant", value }
          }
        });
      };
      const onTestFileNameChange = (value) => {
        vscode.postMessage({
          type: "setTestFileName",
          payload: {
            testFileName: value
          }
        });
        vscode.postMessage({
          type: "trackEvent",
          payload: {
            eventName: "Settings_Change",
            properties: { target: "testFileName", value }
          }
        });
      };
      const onEarlPanelEnabledChange = (value) => {
        if (value === (earlyConfig == null ? void 0 : earlyConfig.earlPanelEnabled)) {
          return;
        }
        vscode.postMessage({
          type: "setEarlPanelEnabled",
          payload: {
            earlPanelEnabled: value
          }
        });
        vscode.postMessage({
          type: "trackEvent",
          payload: {
            eventName: "Settings_Change",
            properties: { target: "earlPanelEnabled", value }
          }
        });
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "pt-1", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("header", { className: "h-[29px]", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "p-1.5 text-[11px] text-gray-600", children: t$1("SETTINGS_MENU.SETTINGS_TITLE") }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("menu", { className: "px-4 pt-4 border-top-collapse", children: isDefined(earlyConfig) && isDefined(shouldShowOnboardingPage) ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            SettingsDropdown,
            {
              title: t$1("SETTINGS_MENU.TESTING_FRAMEWORK"),
              value: earlyConfig.testFramework,
              options: [
                {
                  value: TEST_FRAMEWORK.JEST,
                  label: t$1("SETTINGS_MENU.TESTING_FRAMEWORK_JEST"),
                  description: t$1("SETTINGS_MENU.TESTING_FRAMEWORK_DESCRIPTION", {
                    framework: /* @__PURE__ */ jsxRuntimeExports.jsx("b", { className: "text-gray-500", children: t$1("SETTINGS_MENU.TESTING_FRAMEWORK_JEST") })
                  })
                },
                {
                  value: TEST_FRAMEWORK.MOCHA,
                  label: t$1("SETTINGS_MENU.TESTING_FRAMEWORK_MOCHA_SINON_CHAI"),
                  description: t$1("SETTINGS_MENU.TESTING_FRAMEWORK_DESCRIPTION", {
                    framework: /* @__PURE__ */ jsxRuntimeExports.jsx("b", { className: "text-gray-500", children: t$1("SETTINGS_MENU.TESTING_FRAMEWORK_MOCHA_SINON_CHAI") })
                  })
                }
              ],
              onChange: onTestingFrameworkChange
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            SettingsDropdown,
            {
              title: t$1("SETTINGS_MENU.TEST_SUFFIX"),
              value: earlyConfig.testSuffix,
              options: [
                {
                  value: TEST_SUFFIX.SPEC,
                  label: t$1("SETTINGS_MENU.TEST_SUFFIX_SPEC"),
                  description: t$1("SETTINGS_MENU.TEST_SUFFIX_DESCRIPTION", {
                    suffix: /* @__PURE__ */ jsxRuntimeExports.jsx("b", { className: "text-gray-500", children: t$1("SETTINGS_MENU.TEST_SUFFIX_SPEC") }),
                    pathname: /* @__PURE__ */ jsxRuntimeExports.jsxs("code", { children: [
                      "*.early.",
                      t$1("SETTINGS_MENU.TEST_SUFFIX_SPEC"),
                      ".(ts|js)"
                    ] })
                  })
                },
                {
                  value: TEST_SUFFIX.TEST,
                  label: t$1("SETTINGS_MENU.TEST_SUFFIX_TEST"),
                  description: t$1("SETTINGS_MENU.TEST_SUFFIX_DESCRIPTION", {
                    suffix: /* @__PURE__ */ jsxRuntimeExports.jsx("b", { className: "text-gray-500", children: t$1("SETTINGS_MENU.TEST_SUFFIX_TEST") }),
                    pathname: /* @__PURE__ */ jsxRuntimeExports.jsxs("code", { children: [
                      "*.early.",
                      t$1("SETTINGS_MENU.TEST_SUFFIX_TEST"),
                      ".(ts|js)"
                    ] })
                  })
                }
              ],
              onChange: onTestSuffixChange
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            SettingsDropdown,
            {
              title: t$1("SETTINGS_MENU.TEST_STRUCTURE_VARIANT"),
              value: earlyConfig.testStructureVariant,
              options: [
                {
                  value: TEST_STRUCTURE_VARIANT.SIBLING_FOLDER,
                  label: t$1("SETTINGS_MENU.TEST_STRUCTURE_VARIANT_SIBLING_FOLDER"),
                  description: t$1("SETTINGS_MENU.TEST_STRUCTURE_VARIANT_SIBLING_FOLDER_DESCRIPTION")
                },
                {
                  value: TEST_STRUCTURE_VARIANT.ROOT_FOLDER,
                  label: t$1("SETTINGS_MENU.TEST_STRUCTURE_VARIANT_ROOT_FOLDER"),
                  description: t$1("SETTINGS_MENU.TEST_STRUCTURE_VARIANT_ROOT_FOLDER_DESCRIPTION")
                },
                {
                  value: DEPRECATED_TEST_STRUCTURE_VARIANT.FLAT,
                  label: t$1("SETTINGS_MENU.TEST_STRUCTURE_VARIANT_DEPRECATED"),
                  description: t$1("SETTINGS_MENU.TEST_STRUCTURE_VARIANT_DEPRECATED_FLAT_DESCRIPTION"),
                  isDeprecated: true
                },
                {
                  value: DEPRECATED_TEST_STRUCTURE_VARIANT.FOLDER,
                  label: t$1("SETTINGS_MENU.TEST_STRUCTURE_VARIANT_DEPRECATED"),
                  description: t$1("SETTINGS_MENU.TEST_STRUCTURE_VARIANT_DEPRECATED_FOLDER_DESCRIPTION"),
                  isDeprecated: true
                },
                {
                  value: DEPRECATED_TEST_STRUCTURE_VARIANT.TESTS_FOLDER,
                  label: t$1("SETTINGS_MENU.TEST_STRUCTURE_VARIANT_DEPRECATED"),
                  description: t$1("SETTINGS_MENU.TEST_STRUCTURE_VARIANT_DEPRECATED_TESTS_FOLDER_DESCRIPTION"),
                  isDeprecated: true
                }
              ],
              onChange: onTestStructureVariantChange
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            SettingsDropdown,
            {
              title: t$1("SETTINGS_MENU.TEST_FILE_NAME"),
              value: earlyConfig.testFileName,
              options: [
                {
                  value: TEST_FILE_NAME.CAMEL_CASE,
                  label: t$1("SETTINGS_MENU.TEST_FILE_NAME_CAMEL_CASE"),
                  description: t$1("SETTINGS_MENU.TEST_FILE_NAME_DESCRIPTION", {
                    convention: /* @__PURE__ */ jsxRuntimeExports.jsx("b", { className: "text-gray-500", children: t$1("SETTINGS_MENU.TEST_FILE_NAME_CAMEL_CASE") }),
                    case: /* @__PURE__ */ jsxRuntimeExports.jsx("code", { children: "camelCase" })
                  })
                },
                {
                  value: TEST_FILE_NAME.KEBAB_CASE,
                  label: t$1("SETTINGS_MENU.TEST_FILE_NAME_KEBAB_CASE"),
                  description: t$1("SETTINGS_MENU.TEST_FILE_NAME_DESCRIPTION", {
                    convention: /* @__PURE__ */ jsxRuntimeExports.jsx("b", { className: "text-gray-500", children: t$1("SETTINGS_MENU.TEST_FILE_NAME_KEBAB_CASE") }),
                    case: /* @__PURE__ */ jsxRuntimeExports.jsx("code", { children: "kebab-case" })
                  })
                }
              ],
              onChange: onTestFileNameChange
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            SettingsCheckbox,
            {
              title: t$1("SETTINGS_MENU.EARL_PANEL_ENABLED"),
              description: t$1("SETTINGS_MENU.EARL_PANEL_ENABLED_DESCRIPTION", {
                panel: /* @__PURE__ */ jsxRuntimeExports.jsx("b", { className: "text-gray-500", children: t$1("SETTINGS_MENU.EARL_PANEL_ENABLED") }),
                verb: earlyConfig.earlPanelEnabled ? t$1("SETTINGS_MENU.WILL") : t$1("SETTINGS_MENU.WONT")
              }),
              label: t$1("SETTINGS_MENU.EARL_PANEL_ENABLED_LABEL"),
              isChecked: earlyConfig.earlPanelEnabled,
              onChange: onEarlPanelEnabledChange
            }
          )
        ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-[50vh] flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(VSCodeProgressRing, {}) }) })
      ] });
    }
    function PanelContent() {
      const [activeMenu, setActiveMenu] = reactExports.useState(MENU.CODE_TREE);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(PanelMenu, { activeMenu, onChange: setActiveMenu }),
        activeMenu === MENU.CODE_TREE && /* @__PURE__ */ jsxRuntimeExports.jsx(CodeExplorerTabs, {}),
        activeMenu === MENU.SETTINGS && /* @__PURE__ */ jsxRuntimeExports.jsx(SettingsMenu, {})
      ] });
    }
    const app = "";
    function App() {
      return /* @__PURE__ */ jsxRuntimeExports.jsx("main", { className: "h-screen overflow-hidden", children: /* @__PURE__ */ jsxRuntimeExports.jsx(AppStateProvider, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(LoggedInView, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(PanelContent, {}),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { id: "modal-root" })
      ] }) }) });
    }
    const container = document.querySelector("#root");
    if (container) {
      const root2 = createRoot(container);
      root2.render(
        /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.StrictMode, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}) })
      );
    } else {
      console.error("Root not found");
    }
  }
});
export default require_assets();
